##################################################
# file: Magento_client.py
# 
# client stubs generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#     /usr/local/bin/wsdl2py http://127.0.0.1/magento/api/v2_soap?wsdl=1
# 
##################################################

from Magento_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
from ZSI.schema import GED, GTD
import ZSI

# Locator
class MagentoServiceLocator:
    Mage_Api_Model_Server_V2_HandlerPort_address = "http://127.0.0.1/magento/index.php/api/v2_soap/index/"
    def getMage_Api_Model_Server_V2_HandlerPortAddress(self):
        return MagentoServiceLocator.Mage_Api_Model_Server_V2_HandlerPort_address
    def getMage_Api_Model_Server_V2_HandlerPort(self, url=None, **kw):
        return Mage_Api_Model_Server_V2_HandlerBindingSOAP(url or MagentoServiceLocator.Mage_Api_Model_Server_V2_HandlerPort_address, **kw)

# Methods
class Mage_Api_Model_Server_V2_HandlerBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: endSession
    def endSession(self, request, **kw):
        if isinstance(request, endSession) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=endSessionResponse.typecode.ofwhat, pyclass=endSessionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: login
    def login(self, request, **kw):
        if isinstance(request, login) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=loginResponse.typecode.ofwhat, pyclass=loginResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: startSession
    def startSession(self, request, **kw):
        if isinstance(request, startSession) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=startSessionResponse.typecode.ofwhat, pyclass=startSessionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: resources
    def resources(self, request, **kw):
        if isinstance(request, resourcesRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=resourcesResponse.typecode.ofwhat, pyclass=resourcesResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: globalFaults
    def globalFaults(self, request, **kw):
        if isinstance(request, globalFaults) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=globalFaultsResponse.typecode.ofwhat, pyclass=globalFaultsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: resourceFaults
    def resourceFaults(self, request, **kw):
        if isinstance(request, resourceFaults) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=resourceFaultsResponse.typecode.ofwhat, pyclass=resourceFaultsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: storeList
    def storeList(self, request, **kw):
        if isinstance(request, storeListRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=storeListResponse.typecode.ofwhat, pyclass=storeListResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: storeInfo
    def storeInfo(self, request, **kw):
        if isinstance(request, storeInfoRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=storeInfoResponse.typecode.ofwhat, pyclass=storeInfoResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: magentoInfo
    def magentoInfo(self, request, **kw):
        if isinstance(request, magentoInfoRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=magentoInfoResponse.typecode.ofwhat, pyclass=magentoInfoResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: directoryCountryList
    def directoryCountryList(self, request, **kw):
        if isinstance(request, directoryCountryListRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=directoryCountryListResponse.typecode.ofwhat, pyclass=directoryCountryListResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: directoryRegionList
    def directoryRegionList(self, request, **kw):
        if isinstance(request, directoryRegionListRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=directoryRegionListResponse.typecode.ofwhat, pyclass=directoryRegionListResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: customerCustomerList
    def customerCustomerList(self, request, **kw):
        if isinstance(request, customerCustomerListRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=customerCustomerListResponse.typecode.ofwhat, pyclass=customerCustomerListResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: customerCustomerCreate
    def customerCustomerCreate(self, request, **kw):
        if isinstance(request, customerCustomerCreateRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=customerCustomerCreateResponse.typecode.ofwhat, pyclass=customerCustomerCreateResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: customerCustomerInfo
    def customerCustomerInfo(self, request, **kw):
        if isinstance(request, customerCustomerInfoRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=customerCustomerInfoResponse.typecode.ofwhat, pyclass=customerCustomerInfoResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: customerCustomerUpdate
    def customerCustomerUpdate(self, request, **kw):
        if isinstance(request, customerCustomerUpdateRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=customerCustomerUpdateResponse.typecode.ofwhat, pyclass=customerCustomerUpdateResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: customerCustomerDelete
    def customerCustomerDelete(self, request, **kw):
        if isinstance(request, customerCustomerDeleteRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=customerCustomerDeleteResponse.typecode.ofwhat, pyclass=customerCustomerDeleteResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: customerGroupList
    def customerGroupList(self, request, **kw):
        if isinstance(request, customerGroupListRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=customerGroupListResponse.typecode.ofwhat, pyclass=customerGroupListResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: customerAddressList
    def customerAddressList(self, request, **kw):
        if isinstance(request, customerAddressListRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=customerAddressListResponse.typecode.ofwhat, pyclass=customerAddressListResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: customerAddressCreate
    def customerAddressCreate(self, request, **kw):
        if isinstance(request, customerAddressCreateRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=customerAddressCreateResponse.typecode.ofwhat, pyclass=customerAddressCreateResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: customerAddressInfo
    def customerAddressInfo(self, request, **kw):
        if isinstance(request, customerAddressInfoRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=customerAddressInfoResponse.typecode.ofwhat, pyclass=customerAddressInfoResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: customerAddressUpdate
    def customerAddressUpdate(self, request, **kw):
        if isinstance(request, customerAddressUpdateRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=customerAddressUpdateResponse.typecode.ofwhat, pyclass=customerAddressUpdateResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: customerAddressDelete
    def customerAddressDelete(self, request, **kw):
        if isinstance(request, customerAddressDeleteRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=customerAddressDeleteResponse.typecode.ofwhat, pyclass=customerAddressDeleteResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogCategoryCurrentStore
    def catalogCategoryCurrentStore(self, request, **kw):
        if isinstance(request, catalogCategoryCurrentStoreRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogCategoryCurrentStoreResponse.typecode.ofwhat, pyclass=catalogCategoryCurrentStoreResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogCategoryTree
    def catalogCategoryTree(self, request, **kw):
        if isinstance(request, catalogCategoryTreeRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogCategoryTreeResponse.typecode.ofwhat, pyclass=catalogCategoryTreeResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogCategoryLevel
    def catalogCategoryLevel(self, request, **kw):
        if isinstance(request, catalogCategoryLevelRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogCategoryLevelResponse.typecode.ofwhat, pyclass=catalogCategoryLevelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogCategoryInfo
    def catalogCategoryInfo(self, request, **kw):
        if isinstance(request, catalogCategoryInfoRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogCategoryInfoResponse.typecode.ofwhat, pyclass=catalogCategoryInfoResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogCategoryCreate
    def catalogCategoryCreate(self, request, **kw):
        if isinstance(request, catalogCategoryCreateRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogCategoryCreateResponse.typecode.ofwhat, pyclass=catalogCategoryCreateResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogCategoryUpdate
    def catalogCategoryUpdate(self, request, **kw):
        if isinstance(request, catalogCategoryUpdateRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogCategoryUpdateResponse.typecode.ofwhat, pyclass=catalogCategoryUpdateResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogCategoryMove
    def catalogCategoryMove(self, request, **kw):
        if isinstance(request, catalogCategoryMoveRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogCategoryMoveResponse.typecode.ofwhat, pyclass=catalogCategoryMoveResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogCategoryDelete
    def catalogCategoryDelete(self, request, **kw):
        if isinstance(request, catalogCategoryDeleteRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogCategoryDeleteResponse.typecode.ofwhat, pyclass=catalogCategoryDeleteResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogCategoryAssignedProducts
    def catalogCategoryAssignedProducts(self, request, **kw):
        if isinstance(request, catalogCategoryAssignedProductsRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogCategoryAssignedProductsResponse.typecode.ofwhat, pyclass=catalogCategoryAssignedProductsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogCategoryAssignProduct
    def catalogCategoryAssignProduct(self, request, **kw):
        if isinstance(request, catalogCategoryAssignProductRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogCategoryAssignProductResponse.typecode.ofwhat, pyclass=catalogCategoryAssignProductResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogCategoryUpdateProduct
    def catalogCategoryUpdateProduct(self, request, **kw):
        if isinstance(request, catalogCategoryUpdateProductRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogCategoryUpdateProductResponse.typecode.ofwhat, pyclass=catalogCategoryUpdateProductResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogCategoryRemoveProduct
    def catalogCategoryRemoveProduct(self, request, **kw):
        if isinstance(request, catalogCategoryRemoveProductRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogCategoryRemoveProductResponse.typecode.ofwhat, pyclass=catalogCategoryRemoveProductResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductCurrentStore
    def catalogProductCurrentStore(self, request, **kw):
        if isinstance(request, catalogProductCurrentStoreRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductCurrentStoreResponse.typecode.ofwhat, pyclass=catalogProductCurrentStoreResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductListOfAdditionalAttributes
    def catalogProductListOfAdditionalAttributes(self, request, **kw):
        if isinstance(request, catalogProductListOfAdditionalAttributesRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductListOfAdditionalAttributesResponse.typecode.ofwhat, pyclass=catalogProductListOfAdditionalAttributesResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductList
    def catalogProductList(self, request, **kw):
        if isinstance(request, catalogProductListRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductListResponse.typecode.ofwhat, pyclass=catalogProductListResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductInfo
    def catalogProductInfo(self, request, **kw):
        if isinstance(request, catalogProductInfoRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductInfoResponse.typecode.ofwhat, pyclass=catalogProductInfoResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductCreate
    def catalogProductCreate(self, request, **kw):
        if isinstance(request, catalogProductCreateRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductCreateResponse.typecode.ofwhat, pyclass=catalogProductCreateResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductUpdate
    def catalogProductUpdate(self, request, **kw):
        if isinstance(request, catalogProductUpdateRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductUpdateResponse.typecode.ofwhat, pyclass=catalogProductUpdateResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductSetSpecialPrice
    def catalogProductSetSpecialPrice(self, request, **kw):
        if isinstance(request, catalogProductSetSpecialPriceRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductSetSpecialPriceResponse.typecode.ofwhat, pyclass=catalogProductSetSpecialPriceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductGetSpecialPrice
    def catalogProductGetSpecialPrice(self, request, **kw):
        if isinstance(request, catalogProductGetSpecialPriceRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductGetSpecialPriceResponse.typecode.ofwhat, pyclass=catalogProductGetSpecialPriceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductDelete
    def catalogProductDelete(self, request, **kw):
        if isinstance(request, catalogProductDeleteRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductDeleteResponse.typecode.ofwhat, pyclass=catalogProductDeleteResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductAttributeCurrentStore
    def catalogProductAttributeCurrentStore(self, request, **kw):
        if isinstance(request, catalogProductAttributeCurrentStoreRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductAttributeCurrentStoreResponse.typecode.ofwhat, pyclass=catalogProductAttributeCurrentStoreResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductAttributeSetCreate
    def catalogProductAttributeSetCreate(self, request, **kw):
        if isinstance(request, catalogProductAttributeSetCreateRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductAttributeSetCreateResponse.typecode.ofwhat, pyclass=catalogProductAttributeSetCreateResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductAttributeList
    def catalogProductAttributeList(self, request, **kw):
        if isinstance(request, catalogProductAttributeListRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductAttributeListResponse.typecode.ofwhat, pyclass=catalogProductAttributeListResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductAttributeOptions
    def catalogProductAttributeOptions(self, request, **kw):
        if isinstance(request, catalogProductAttributeOptionsRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductAttributeOptionsResponse.typecode.ofwhat, pyclass=catalogProductAttributeOptionsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductAttributeSetRemove
    def catalogProductAttributeSetRemove(self, request, **kw):
        if isinstance(request, catalogProductAttributeSetRemoveRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductAttributeSetRemoveResponse.typecode.ofwhat, pyclass=catalogProductAttributeSetRemoveResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductAttributeSetList
    def catalogProductAttributeSetList(self, request, **kw):
        if isinstance(request, catalogProductAttributeSetListRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductAttributeSetListResponse.typecode.ofwhat, pyclass=catalogProductAttributeSetListResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductAttributeSetAttributeAdd
    def catalogProductAttributeSetAttributeAdd(self, request, **kw):
        if isinstance(request, catalogProductAttributeSetAttributeAddRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductAttributeSetAttributeAddResponse.typecode.ofwhat, pyclass=catalogProductAttributeSetAttributeAddResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductAttributeSetAttributeRemove
    def catalogProductAttributeSetAttributeRemove(self, request, **kw):
        if isinstance(request, catalogProductAttributeSetAttributeRemoveRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductAttributeSetAttributeRemoveResponse.typecode.ofwhat, pyclass=catalogProductAttributeSetAttributeRemoveResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductAttributeSetGroupAdd
    def catalogProductAttributeSetGroupAdd(self, request, **kw):
        if isinstance(request, catalogProductAttributeSetGroupAddRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductAttributeSetGroupAddResponse.typecode.ofwhat, pyclass=catalogProductAttributeSetGroupAddResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductAttributeSetGroupRename
    def catalogProductAttributeSetGroupRename(self, request, **kw):
        if isinstance(request, catalogProductAttributeSetGroupRenameRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductAttributeSetGroupRenameResponse.typecode.ofwhat, pyclass=catalogProductAttributeSetGroupRenameResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductAttributeSetGroupRemove
    def catalogProductAttributeSetGroupRemove(self, request, **kw):
        if isinstance(request, catalogProductAttributeSetGroupRemoveRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductAttributeSetGroupRemoveResponse.typecode.ofwhat, pyclass=catalogProductAttributeSetGroupRemoveResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductAttributeTypes
    def catalogProductAttributeTypes(self, request, **kw):
        if isinstance(request, catalogProductAttributeTypesRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductAttributeTypesResponse.typecode.ofwhat, pyclass=catalogProductAttributeTypesResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductAttributeCreate
    def catalogProductAttributeCreate(self, request, **kw):
        if isinstance(request, catalogProductAttributeCreateRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductAttributeCreateResponse.typecode.ofwhat, pyclass=catalogProductAttributeCreateResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogCategoryAttributeCurrentStore
    def catalogCategoryAttributeCurrentStore(self, request, **kw):
        if isinstance(request, catalogCategoryAttributeCurrentStoreRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogCategoryAttributeCurrentStoreResponse.typecode.ofwhat, pyclass=catalogCategoryAttributeCurrentStoreResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductAttributeMediaCurrentStore
    def catalogProductAttributeMediaCurrentStore(self, request, **kw):
        if isinstance(request, catalogProductAttributeMediaCurrentStoreRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductAttributeMediaCurrentStoreResponse.typecode.ofwhat, pyclass=catalogProductAttributeMediaCurrentStoreResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductAttributeRemove
    def catalogProductAttributeRemove(self, request, **kw):
        if isinstance(request, catalogProductAttributeRemoveRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductAttributeRemoveResponse.typecode.ofwhat, pyclass=catalogProductAttributeRemoveResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductAttributeInfo
    def catalogProductAttributeInfo(self, request, **kw):
        if isinstance(request, catalogProductAttributeInfoRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductAttributeInfoResponse.typecode.ofwhat, pyclass=catalogProductAttributeInfoResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductAttributeUpdate
    def catalogProductAttributeUpdate(self, request, **kw):
        if isinstance(request, catalogProductAttributeUpdateRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductAttributeUpdateResponse.typecode.ofwhat, pyclass=catalogProductAttributeUpdateResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductAttributeAddOption
    def catalogProductAttributeAddOption(self, request, **kw):
        if isinstance(request, catalogProductAttributeAddOptionRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductAttributeAddOptionResponse.typecode.ofwhat, pyclass=catalogProductAttributeAddOptionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductAttributeRemoveOption
    def catalogProductAttributeRemoveOption(self, request, **kw):
        if isinstance(request, catalogProductAttributeRemoveOptionRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductAttributeRemoveOptionResponse.typecode.ofwhat, pyclass=catalogProductAttributeRemoveOptionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductTypeList
    def catalogProductTypeList(self, request, **kw):
        if isinstance(request, catalogProductTypeListRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductTypeListResponse.typecode.ofwhat, pyclass=catalogProductTypeListResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductAttributeTierPriceInfo
    def catalogProductAttributeTierPriceInfo(self, request, **kw):
        if isinstance(request, catalogProductAttributeTierPriceInfoRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductAttributeTierPriceInfoResponse.typecode.ofwhat, pyclass=catalogProductAttributeTierPriceInfoResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductAttributeTierPriceUpdate
    def catalogProductAttributeTierPriceUpdate(self, request, **kw):
        if isinstance(request, catalogProductAttributeTierPriceUpdateRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductAttributeTierPriceUpdateResponse.typecode.ofwhat, pyclass=catalogProductAttributeTierPriceUpdateResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogCategoryAttributeList
    def catalogCategoryAttributeList(self, request, **kw):
        if isinstance(request, catalogCategoryAttributeListRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogCategoryAttributeListResponse.typecode.ofwhat, pyclass=catalogCategoryAttributeListResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogCategoryAttributeOptions
    def catalogCategoryAttributeOptions(self, request, **kw):
        if isinstance(request, catalogCategoryAttributeOptionsRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogCategoryAttributeOptionsResponse.typecode.ofwhat, pyclass=catalogCategoryAttributeOptionsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductAttributeMediaList
    def catalogProductAttributeMediaList(self, request, **kw):
        if isinstance(request, catalogProductAttributeMediaListRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductAttributeMediaListResponse.typecode.ofwhat, pyclass=catalogProductAttributeMediaListResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductAttributeMediaInfo
    def catalogProductAttributeMediaInfo(self, request, **kw):
        if isinstance(request, catalogProductAttributeMediaInfoRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductAttributeMediaInfoResponse.typecode.ofwhat, pyclass=catalogProductAttributeMediaInfoResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductAttributeMediaTypes
    def catalogProductAttributeMediaTypes(self, request, **kw):
        if isinstance(request, catalogProductAttributeMediaTypesRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductAttributeMediaTypesResponse.typecode.ofwhat, pyclass=catalogProductAttributeMediaTypesResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductAttributeMediaCreate
    def catalogProductAttributeMediaCreate(self, request, **kw):
        if isinstance(request, catalogProductAttributeMediaCreateRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductAttributeMediaCreateResponse.typecode.ofwhat, pyclass=catalogProductAttributeMediaCreateResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductAttributeMediaUpdate
    def catalogProductAttributeMediaUpdate(self, request, **kw):
        if isinstance(request, catalogProductAttributeMediaUpdateRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductAttributeMediaUpdateResponse.typecode.ofwhat, pyclass=catalogProductAttributeMediaUpdateResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductAttributeMediaRemove
    def catalogProductAttributeMediaRemove(self, request, **kw):
        if isinstance(request, catalogProductAttributeMediaRemoveRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductAttributeMediaRemoveResponse.typecode.ofwhat, pyclass=catalogProductAttributeMediaRemoveResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductLinkList
    def catalogProductLinkList(self, request, **kw):
        if isinstance(request, catalogProductLinkListRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductLinkListResponse.typecode.ofwhat, pyclass=catalogProductLinkListResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductLinkAssign
    def catalogProductLinkAssign(self, request, **kw):
        if isinstance(request, catalogProductLinkAssignRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductLinkAssignResponse.typecode.ofwhat, pyclass=catalogProductLinkAssignResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductLinkUpdate
    def catalogProductLinkUpdate(self, request, **kw):
        if isinstance(request, catalogProductLinkUpdateRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductLinkUpdateResponse.typecode.ofwhat, pyclass=catalogProductLinkUpdateResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductLinkRemove
    def catalogProductLinkRemove(self, request, **kw):
        if isinstance(request, catalogProductLinkRemoveRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductLinkRemoveResponse.typecode.ofwhat, pyclass=catalogProductLinkRemoveResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductLinkTypes
    def catalogProductLinkTypes(self, request, **kw):
        if isinstance(request, catalogProductLinkTypesRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductLinkTypesResponse.typecode.ofwhat, pyclass=catalogProductLinkTypesResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductLinkAttributes
    def catalogProductLinkAttributes(self, request, **kw):
        if isinstance(request, catalogProductLinkAttributesRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductLinkAttributesResponse.typecode.ofwhat, pyclass=catalogProductLinkAttributesResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductCustomOptionAdd
    def catalogProductCustomOptionAdd(self, request, **kw):
        if isinstance(request, catalogProductCustomOptionAddRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductCustomOptionAddResponse.typecode.ofwhat, pyclass=catalogProductCustomOptionAddResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductCustomOptionUpdate
    def catalogProductCustomOptionUpdate(self, request, **kw):
        if isinstance(request, catalogProductCustomOptionUpdateRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductCustomOptionUpdateResponse.typecode.ofwhat, pyclass=catalogProductCustomOptionUpdateResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductCustomOptionInfo
    def catalogProductCustomOptionInfo(self, request, **kw):
        if isinstance(request, catalogProductCustomOptionInfoRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductCustomOptionInfoResponse.typecode.ofwhat, pyclass=catalogProductCustomOptionInfoResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductCustomOptionTypes
    def catalogProductCustomOptionTypes(self, request, **kw):
        if isinstance(request, catalogProductCustomOptionTypesRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductCustomOptionTypesResponse.typecode.ofwhat, pyclass=catalogProductCustomOptionTypesResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductCustomOptionValueInfo
    def catalogProductCustomOptionValueInfo(self, request, **kw):
        if isinstance(request, catalogProductCustomOptionValueInfoRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductCustomOptionValueInfoResponse.typecode.ofwhat, pyclass=catalogProductCustomOptionValueInfoResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductCustomOptionValueList
    def catalogProductCustomOptionValueList(self, request, **kw):
        if isinstance(request, catalogProductCustomOptionValueListRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductCustomOptionValueListResponse.typecode.ofwhat, pyclass=catalogProductCustomOptionValueListResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductCustomOptionValueAdd
    def catalogProductCustomOptionValueAdd(self, request, **kw):
        if isinstance(request, catalogProductCustomOptionValueAddRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductCustomOptionValueAddResponse.typecode.ofwhat, pyclass=catalogProductCustomOptionValueAddResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductCustomOptionValueUpdate
    def catalogProductCustomOptionValueUpdate(self, request, **kw):
        if isinstance(request, catalogProductCustomOptionValueUpdateRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductCustomOptionValueUpdateResponse.typecode.ofwhat, pyclass=catalogProductCustomOptionValueUpdateResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductCustomOptionValueRemove
    def catalogProductCustomOptionValueRemove(self, request, **kw):
        if isinstance(request, catalogProductCustomOptionValueRemoveRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductCustomOptionValueRemoveResponse.typecode.ofwhat, pyclass=catalogProductCustomOptionValueRemoveResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductCustomOptionList
    def catalogProductCustomOptionList(self, request, **kw):
        if isinstance(request, catalogProductCustomOptionListRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductCustomOptionListResponse.typecode.ofwhat, pyclass=catalogProductCustomOptionListResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductCustomOptionRemove
    def catalogProductCustomOptionRemove(self, request, **kw):
        if isinstance(request, catalogProductCustomOptionRemoveRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductCustomOptionRemoveResponse.typecode.ofwhat, pyclass=catalogProductCustomOptionRemoveResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: salesOrderList
    def salesOrderList(self, request, **kw):
        if isinstance(request, salesOrderListRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=salesOrderListResponse.typecode.ofwhat, pyclass=salesOrderListResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: salesOrderInfo
    def salesOrderInfo(self, request, **kw):
        if isinstance(request, salesOrderInfoRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=salesOrderInfoResponse.typecode.ofwhat, pyclass=salesOrderInfoResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: salesOrderAddComment
    def salesOrderAddComment(self, request, **kw):
        if isinstance(request, salesOrderAddCommentRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=salesOrderAddCommentResponse.typecode.ofwhat, pyclass=salesOrderAddCommentResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: salesOrderHold
    def salesOrderHold(self, request, **kw):
        if isinstance(request, salesOrderHoldRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=salesOrderHoldResponse.typecode.ofwhat, pyclass=salesOrderHoldResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: salesOrderUnhold
    def salesOrderUnhold(self, request, **kw):
        if isinstance(request, salesOrderUnholdRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=salesOrderUnholdResponse.typecode.ofwhat, pyclass=salesOrderUnholdResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: salesOrderCancel
    def salesOrderCancel(self, request, **kw):
        if isinstance(request, salesOrderCancelRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=salesOrderCancelResponse.typecode.ofwhat, pyclass=salesOrderCancelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: salesOrderShipmentList
    def salesOrderShipmentList(self, request, **kw):
        if isinstance(request, salesOrderShipmentListRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=salesOrderShipmentListResponse.typecode.ofwhat, pyclass=salesOrderShipmentListResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: salesOrderShipmentInfo
    def salesOrderShipmentInfo(self, request, **kw):
        if isinstance(request, salesOrderShipmentInfoRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=salesOrderShipmentInfoResponse.typecode.ofwhat, pyclass=salesOrderShipmentInfoResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: salesOrderShipmentCreate
    def salesOrderShipmentCreate(self, request, **kw):
        if isinstance(request, salesOrderShipmentCreateRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=salesOrderShipmentCreateResponse.typecode.ofwhat, pyclass=salesOrderShipmentCreateResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: salesOrderShipmentAddComment
    def salesOrderShipmentAddComment(self, request, **kw):
        if isinstance(request, salesOrderShipmentAddCommentRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=salesOrderShipmentAddCommentResponse.typecode.ofwhat, pyclass=salesOrderShipmentAddCommentResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: salesOrderShipmentAddTrack
    def salesOrderShipmentAddTrack(self, request, **kw):
        if isinstance(request, salesOrderShipmentAddTrackRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=salesOrderShipmentAddTrackResponse.typecode.ofwhat, pyclass=salesOrderShipmentAddTrackResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: salesOrderShipmentSendInfo
    def salesOrderShipmentSendInfo(self, request, **kw):
        if isinstance(request, salesOrderShipmentSendInfoRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=salesOrderShipmentSendInfoResponse.typecode.ofwhat, pyclass=salesOrderShipmentSendInfoResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: salesOrderShipmentRemoveTrack
    def salesOrderShipmentRemoveTrack(self, request, **kw):
        if isinstance(request, salesOrderShipmentRemoveTrackRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=salesOrderShipmentRemoveTrackResponse.typecode.ofwhat, pyclass=salesOrderShipmentRemoveTrackResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: salesOrderShipmentGetCarriers
    def salesOrderShipmentGetCarriers(self, request, **kw):
        if isinstance(request, salesOrderShipmentGetCarriersRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=salesOrderShipmentGetCarriersResponse.typecode.ofwhat, pyclass=salesOrderShipmentGetCarriersResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: salesOrderInvoiceList
    def salesOrderInvoiceList(self, request, **kw):
        if isinstance(request, salesOrderInvoiceListRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=salesOrderInvoiceListResponse.typecode.ofwhat, pyclass=salesOrderInvoiceListResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: salesOrderInvoiceInfo
    def salesOrderInvoiceInfo(self, request, **kw):
        if isinstance(request, salesOrderInvoiceInfoRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=salesOrderInvoiceInfoResponse.typecode.ofwhat, pyclass=salesOrderInvoiceInfoResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: salesOrderInvoiceCreate
    def salesOrderInvoiceCreate(self, request, **kw):
        if isinstance(request, salesOrderInvoiceCreateRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=salesOrderInvoiceCreateResponse.typecode.ofwhat, pyclass=salesOrderInvoiceCreateResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: salesOrderInvoiceAddComment
    def salesOrderInvoiceAddComment(self, request, **kw):
        if isinstance(request, salesOrderInvoiceAddCommentRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=salesOrderInvoiceAddCommentResponse.typecode.ofwhat, pyclass=salesOrderInvoiceAddCommentResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: salesOrderInvoiceCapture
    def salesOrderInvoiceCapture(self, request, **kw):
        if isinstance(request, salesOrderInvoiceCaptureRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=salesOrderInvoiceCaptureResponse.typecode.ofwhat, pyclass=salesOrderInvoiceCaptureResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: salesOrderInvoiceVoid
    def salesOrderInvoiceVoid(self, request, **kw):
        if isinstance(request, salesOrderInvoiceVoidRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=salesOrderInvoiceVoidResponse.typecode.ofwhat, pyclass=salesOrderInvoiceVoidResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: salesOrderInvoiceCancel
    def salesOrderInvoiceCancel(self, request, **kw):
        if isinstance(request, salesOrderInvoiceCancelRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=salesOrderInvoiceCancelResponse.typecode.ofwhat, pyclass=salesOrderInvoiceCancelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: salesOrderCreditmemoList
    def salesOrderCreditmemoList(self, request, **kw):
        if isinstance(request, salesOrderCreditmemoListRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=salesOrderCreditmemoListResponse.typecode.ofwhat, pyclass=salesOrderCreditmemoListResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: salesOrderCreditmemoInfo
    def salesOrderCreditmemoInfo(self, request, **kw):
        if isinstance(request, salesOrderCreditmemoInfoRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=salesOrderCreditmemoInfoResponse.typecode.ofwhat, pyclass=salesOrderCreditmemoInfoResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: salesOrderCreditmemoCreate
    def salesOrderCreditmemoCreate(self, request, **kw):
        if isinstance(request, salesOrderCreditmemoCreateRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=salesOrderCreditmemoCreateResponse.typecode.ofwhat, pyclass=salesOrderCreditmemoCreateResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: salesOrderCreditmemoAddComment
    def salesOrderCreditmemoAddComment(self, request, **kw):
        if isinstance(request, salesOrderCreditmemoAddCommentRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=salesOrderCreditmemoAddCommentResponse.typecode.ofwhat, pyclass=salesOrderCreditmemoAddCommentResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: salesOrderCreditmemoCancel
    def salesOrderCreditmemoCancel(self, request, **kw):
        if isinstance(request, salesOrderCreditmemoCancelRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=salesOrderCreditmemoCancelResponse.typecode.ofwhat, pyclass=salesOrderCreditmemoCancelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogInventoryStockItemList
    def catalogInventoryStockItemList(self, request, **kw):
        if isinstance(request, catalogInventoryStockItemListRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogInventoryStockItemListResponse.typecode.ofwhat, pyclass=catalogInventoryStockItemListResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogInventoryStockItemUpdate
    def catalogInventoryStockItemUpdate(self, request, **kw):
        if isinstance(request, catalogInventoryStockItemUpdateRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogInventoryStockItemUpdateResponse.typecode.ofwhat, pyclass=catalogInventoryStockItemUpdateResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: shoppingCartCreate
    def shoppingCartCreate(self, request, **kw):
        if isinstance(request, shoppingCartCreateRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=shoppingCartCreateResponse.typecode.ofwhat, pyclass=shoppingCartCreateResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: shoppingCartInfo
    def shoppingCartInfo(self, request, **kw):
        if isinstance(request, shoppingCartInfoRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=shoppingCartInfoResponse.typecode.ofwhat, pyclass=shoppingCartInfoResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: shoppingCartTotals
    def shoppingCartTotals(self, request, **kw):
        if isinstance(request, shoppingCartTotalsRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=shoppingCartTotalsResponse.typecode.ofwhat, pyclass=shoppingCartTotalsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: shoppingCartOrder
    def shoppingCartOrder(self, request, **kw):
        if isinstance(request, shoppingCartOrderRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=shoppingCartOrderResponse.typecode.ofwhat, pyclass=shoppingCartOrderResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: shoppingCartLicense
    def shoppingCartLicense(self, request, **kw):
        if isinstance(request, shoppingCartLicenseRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=shoppingCartLicenseResponse.typecode.ofwhat, pyclass=shoppingCartLicenseResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: shoppingCartProductAdd
    def shoppingCartProductAdd(self, request, **kw):
        if isinstance(request, shoppingCartProductAddRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=shoppingCartProductAddResponse.typecode.ofwhat, pyclass=shoppingCartProductAddResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: shoppingCartProductUpdate
    def shoppingCartProductUpdate(self, request, **kw):
        if isinstance(request, shoppingCartProductUpdateRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=shoppingCartProductUpdateResponse.typecode.ofwhat, pyclass=shoppingCartProductUpdateResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: shoppingCartProductRemove
    def shoppingCartProductRemove(self, request, **kw):
        if isinstance(request, shoppingCartProductRemoveRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=shoppingCartProductRemoveResponse.typecode.ofwhat, pyclass=shoppingCartProductRemoveResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: shoppingCartProductList
    def shoppingCartProductList(self, request, **kw):
        if isinstance(request, shoppingCartProductListRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=shoppingCartProductListResponse.typecode.ofwhat, pyclass=shoppingCartProductListResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: shoppingCartProductMoveToCustomerQuote
    def shoppingCartProductMoveToCustomerQuote(self, request, **kw):
        if isinstance(request, shoppingCartProductMoveToCustomerQuoteRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=shoppingCartProductMoveToCustomerQuoteResponse.typecode.ofwhat, pyclass=shoppingCartProductMoveToCustomerQuoteResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: shoppingCartCustomerSet
    def shoppingCartCustomerSet(self, request, **kw):
        if isinstance(request, shoppingCartCustomerSetRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=shoppingCartCustomerSetResponse.typecode.ofwhat, pyclass=shoppingCartCustomerSetResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: shoppingCartCustomerAddresses
    def shoppingCartCustomerAddresses(self, request, **kw):
        if isinstance(request, shoppingCartCustomerAddressesRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=shoppingCartCustomerAddressesResponse.typecode.ofwhat, pyclass=shoppingCartCustomerAddressesResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: shoppingCartShippingMethod
    def shoppingCartShippingMethod(self, request, **kw):
        if isinstance(request, shoppingCartShippingMethodRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=shoppingCartShippingMethodResponse.typecode.ofwhat, pyclass=shoppingCartShippingMethodResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: shoppingCartShippingList
    def shoppingCartShippingList(self, request, **kw):
        if isinstance(request, shoppingCartShippingListRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=shoppingCartShippingListResponse.typecode.ofwhat, pyclass=shoppingCartShippingListResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: shoppingCartPaymentMethod
    def shoppingCartPaymentMethod(self, request, **kw):
        if isinstance(request, shoppingCartPaymentMethodRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=shoppingCartPaymentMethodResponse.typecode.ofwhat, pyclass=shoppingCartPaymentMethodResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: shoppingCartPaymentList
    def shoppingCartPaymentList(self, request, **kw):
        if isinstance(request, shoppingCartPaymentListRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=shoppingCartPaymentListResponse.typecode.ofwhat, pyclass=shoppingCartPaymentListResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: shoppingCartCouponAdd
    def shoppingCartCouponAdd(self, request, **kw):
        if isinstance(request, shoppingCartCouponAddRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=shoppingCartCouponAddResponse.typecode.ofwhat, pyclass=shoppingCartCouponAddResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: shoppingCartCouponRemove
    def shoppingCartCouponRemove(self, request, **kw):
        if isinstance(request, shoppingCartCouponRemoveRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=shoppingCartCouponRemoveResponse.typecode.ofwhat, pyclass=shoppingCartCouponRemoveResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductTagList
    def catalogProductTagList(self, request, **kw):
        if isinstance(request, catalogProductTagListRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductTagListResponse.typecode.ofwhat, pyclass=catalogProductTagListResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductTagInfo
    def catalogProductTagInfo(self, request, **kw):
        if isinstance(request, catalogProductTagInfoRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductTagInfoResponse.typecode.ofwhat, pyclass=catalogProductTagInfoResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductTagAdd
    def catalogProductTagAdd(self, request, **kw):
        if isinstance(request, catalogProductTagAddRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductTagAddResponse.typecode.ofwhat, pyclass=catalogProductTagAddResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductTagUpdate
    def catalogProductTagUpdate(self, request, **kw):
        if isinstance(request, catalogProductTagUpdateRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductTagUpdateResponse.typecode.ofwhat, pyclass=catalogProductTagUpdateResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductTagRemove
    def catalogProductTagRemove(self, request, **kw):
        if isinstance(request, catalogProductTagRemoveRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductTagRemoveResponse.typecode.ofwhat, pyclass=catalogProductTagRemoveResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: giftMessageSetForQuote
    def giftMessageSetForQuote(self, request, **kw):
        if isinstance(request, giftMessageForQuoteRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=giftMessageForQuoteResponse.typecode.ofwhat, pyclass=giftMessageForQuoteResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: giftMessageSetForQuoteItem
    def giftMessageSetForQuoteItem(self, request, **kw):
        if isinstance(request, giftMessageForQuoteItemRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=giftMessageForQuoteItemResponse.typecode.ofwhat, pyclass=giftMessageForQuoteItemResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: giftMessageSetForQuoteProduct
    def giftMessageSetForQuoteProduct(self, request, **kw):
        if isinstance(request, giftMessageForQuoteProductRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=giftMessageForQuoteProductResponse.typecode.ofwhat, pyclass=giftMessageForQuoteProductResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductDownloadableLinkAdd
    def catalogProductDownloadableLinkAdd(self, request, **kw):
        if isinstance(request, catalogProductDownloadableLinkAddRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductDownloadableLinkAddResponse.typecode.ofwhat, pyclass=catalogProductDownloadableLinkAddResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductDownloadableLinkList
    def catalogProductDownloadableLinkList(self, request, **kw):
        if isinstance(request, catalogProductDownloadableLinkListRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductDownloadableLinkListResponse.typecode.ofwhat, pyclass=catalogProductDownloadableLinkListResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: catalogProductDownloadableLinkRemove
    def catalogProductDownloadableLinkRemove(self, request, **kw):
        if isinstance(request, catalogProductDownloadableLinkRemoveRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:Mage_Api_Model_Server_V2_HandlerAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=catalogProductDownloadableLinkRemoveResponse.typecode.ofwhat, pyclass=catalogProductDownloadableLinkRemoveResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

class endSession:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        """
        self._sessionId =  kw.get("sessionId")
endSession.typecode = Struct(pname=("urn:Magento","endSession"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=endSession, encoded="urn:Magento")

class endSessionResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        endSessionReturn -- part endSessionReturn
        """
        self._endSessionReturn =  kw.get("endSessionReturn")
endSessionResponse.typecode = Struct(pname=("urn:Magento","endSessionResponse"), ofwhat=[ZSI.TC.Boolean(pname="endSessionReturn", aname="_endSessionReturn", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=endSessionResponse, encoded="urn:Magento")

class login:
    def __init__(self, **kw):
        """Keyword parameters:
        username -- part username
        apiKey -- part apiKey
        """
        self._username =  kw.get("username")
        self._apiKey =  kw.get("apiKey")
login.typecode = Struct(pname=("urn:Magento","login"), ofwhat=[ZSI.TC.String(pname="username", aname="_username", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="apiKey", aname="_apiKey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=login, encoded="urn:Magento")

class loginResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        loginReturn -- part loginReturn
        """
        self._loginReturn =  kw.get("loginReturn")
loginResponse.typecode = Struct(pname=("urn:Magento","loginResponse"), ofwhat=[ZSI.TC.String(pname="loginReturn", aname="_loginReturn", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=loginResponse, encoded="urn:Magento")

class startSession:
    def __init__(self, **kw):
        """Keyword parameters:
        """
startSession.typecode = Struct(pname=("urn:Magento","startSession"), ofwhat=[], pyclass=startSession, encoded="urn:Magento")

class startSessionResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        startSessionReturn -- part startSessionReturn
        """
        self._startSessionReturn =  kw.get("startSessionReturn")
startSessionResponse.typecode = Struct(pname=("urn:Magento","startSessionResponse"), ofwhat=[ZSI.TC.String(pname="startSessionReturn", aname="_startSessionReturn", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=startSessionResponse, encoded="urn:Magento")

class resourcesRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        """
        self._sessionId =  kw.get("sessionId")
resourcesRequest.typecode = Struct(pname=("urn:Magento","resources"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=resourcesRequest, encoded="urn:Magento")

class resourcesResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        resourcesReturn -- part resourcesReturn
        """
        self._resourcesReturn =  kw.get("resourcesReturn")
resourcesResponse.typecode = Struct(pname=("urn:Magento","resourcesResponse"), ofwhat=[ns0.ArrayOfApis_Def(pname="resourcesReturn", aname="_resourcesReturn", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=resourcesResponse, encoded="urn:Magento")

class globalFaults:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        """
        self._sessionId =  kw.get("sessionId")
globalFaults.typecode = Struct(pname=("urn:Magento","globalFaults"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=globalFaults, encoded="urn:Magento")

class globalFaultsResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        globalFaultsReturn -- part globalFaultsReturn
        """
        self._globalFaultsReturn =  kw.get("globalFaultsReturn")
globalFaultsResponse.typecode = Struct(pname=("urn:Magento","globalFaultsResponse"), ofwhat=[ns0.ArrayOfExistsFaltures_Def(pname="globalFaultsReturn", aname="_globalFaultsReturn", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=globalFaultsResponse, encoded="urn:Magento")

class resourceFaults:
    def __init__(self, **kw):
        """Keyword parameters:
        resourceName -- part resourceName
        sessionId -- part sessionId
        """
        self._resourceName =  kw.get("resourceName")
        self._sessionId =  kw.get("sessionId")
resourceFaults.typecode = Struct(pname=("urn:Magento","resourceFaults"), ofwhat=[ZSI.TC.String(pname="resourceName", aname="_resourceName", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=resourceFaults, encoded="urn:Magento")

class resourceFaultsResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        resourceFaultsReturn -- part resourceFaultsReturn
        """
        self._resourceFaultsReturn =  kw.get("resourceFaultsReturn")
resourceFaultsResponse.typecode = Struct(pname=("urn:Magento","resourceFaultsResponse"), ofwhat=[ns0.ArrayOfExistsFaltures_Def(pname="resourceFaultsReturn", aname="_resourceFaultsReturn", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=resourceFaultsResponse, encoded="urn:Magento")

class storeListRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        """
        self._sessionId =  kw.get("sessionId")
storeListRequest.typecode = Struct(pname=("urn:Magento","storeList"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=storeListRequest, encoded="urn:Magento")

class storeListResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        stores -- part stores
        """
        self._stores =  kw.get("stores")
storeListResponse.typecode = Struct(pname=("urn:Magento","storeListResponse"), ofwhat=[ns0.storeEntityArray_Def(pname="stores", aname="_stores", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=storeListResponse, encoded="urn:Magento")

class storeInfoRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        storeId -- part storeId
        """
        self._sessionId =  kw.get("sessionId")
        self._storeId =  kw.get("storeId")
storeInfoRequest.typecode = Struct(pname=("urn:Magento","storeInfo"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeId", aname="_storeId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=storeInfoRequest, encoded="urn:Magento")

class storeInfoResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        info -- part info
        """
        self._info =  kw.get("info")
storeInfoResponse.typecode = Struct(pname=("urn:Magento","storeInfoResponse"), ofwhat=[ns0.storeEntity_Def(pname="info", aname="_info", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=storeInfoResponse, encoded="urn:Magento")

class magentoInfoRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        """
        self._sessionId =  kw.get("sessionId")
magentoInfoRequest.typecode = Struct(pname=("urn:Magento","magentoInfo"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=magentoInfoRequest, encoded="urn:Magento")

class magentoInfoResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        info -- part info
        """
        self._info =  kw.get("info")
magentoInfoResponse.typecode = Struct(pname=("urn:Magento","magentoInfoResponse"), ofwhat=[ns0.magentoInfoEntity_Def(pname="info", aname="_info", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=magentoInfoResponse, encoded="urn:Magento")

class directoryCountryListRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        """
        self._sessionId =  kw.get("sessionId")
directoryCountryListRequest.typecode = Struct(pname=("urn:Magento","directoryCountryList"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=directoryCountryListRequest, encoded="urn:Magento")

class directoryCountryListResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        countries -- part countries
        """
        self._countries =  kw.get("countries")
directoryCountryListResponse.typecode = Struct(pname=("urn:Magento","directoryCountryListResponse"), ofwhat=[ns0.directoryCountryEntityArray_Def(pname="countries", aname="_countries", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=directoryCountryListResponse, encoded="urn:Magento")

class directoryRegionListRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        country -- part country
        """
        self._sessionId =  kw.get("sessionId")
        self._country =  kw.get("country")
directoryRegionListRequest.typecode = Struct(pname=("urn:Magento","directoryRegionList"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="country", aname="_country", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=directoryRegionListRequest, encoded="urn:Magento")

class directoryRegionListResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        countries -- part countries
        """
        self._countries =  kw.get("countries")
directoryRegionListResponse.typecode = Struct(pname=("urn:Magento","directoryRegionListResponse"), ofwhat=[ns0.directoryRegionEntityArray_Def(pname="countries", aname="_countries", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=directoryRegionListResponse, encoded="urn:Magento")

class customerCustomerListRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        filters -- part filters
        """
        self._sessionId =  kw.get("sessionId")
        self._filters =  kw.get("filters")
customerCustomerListRequest.typecode = Struct(pname=("urn:Magento","customerCustomerList"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.filters_Def(pname="filters", aname="_filters", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=customerCustomerListRequest, encoded="urn:Magento")

class customerCustomerListResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        storeView -- part storeView
        """
        self._storeView =  kw.get("storeView")
customerCustomerListResponse.typecode = Struct(pname=("urn:Magento","customerCustomerListResponse"), ofwhat=[ns0.customerCustomerEntityArray_Def(pname="storeView", aname="_storeView", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=customerCustomerListResponse, encoded="urn:Magento")

class customerCustomerCreateRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        customerData -- part customerData
        """
        self._sessionId =  kw.get("sessionId")
        self._customerData =  kw.get("customerData")
customerCustomerCreateRequest.typecode = Struct(pname=("urn:Magento","customerCustomerCreate"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.customerCustomerEntityToCreate_Def(pname="customerData", aname="_customerData", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=customerCustomerCreateRequest, encoded="urn:Magento")

class customerCustomerCreateResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
customerCustomerCreateResponse.typecode = Struct(pname=("urn:Magento","customerCustomerCreateResponse"), ofwhat=[ZSI.TCnumbers.Iint(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=customerCustomerCreateResponse, encoded="urn:Magento")

class customerCustomerInfoRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        customerId -- part customerId
        attributes -- part attributes
        """
        self._sessionId =  kw.get("sessionId")
        self._customerId =  kw.get("customerId")
        self._attributes =  kw.get("attributes")
customerCustomerInfoRequest.typecode = Struct(pname=("urn:Magento","customerCustomerInfo"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="customerId", aname="_customerId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.ArrayOfString_Def(pname="attributes", aname="_attributes", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=customerCustomerInfoRequest, encoded="urn:Magento")

class customerCustomerInfoResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        customerInfo -- part customerInfo
        """
        self._customerInfo =  kw.get("customerInfo")
customerCustomerInfoResponse.typecode = Struct(pname=("urn:Magento","customerCustomerInfoResponse"), ofwhat=[ns0.customerCustomerEntity_Def(pname="customerInfo", aname="_customerInfo", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=customerCustomerInfoResponse, encoded="urn:Magento")

class customerCustomerUpdateRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        customerId -- part customerId
        customerData -- part customerData
        """
        self._sessionId =  kw.get("sessionId")
        self._customerId =  kw.get("customerId")
        self._customerData =  kw.get("customerData")
customerCustomerUpdateRequest.typecode = Struct(pname=("urn:Magento","customerCustomerUpdate"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="customerId", aname="_customerId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.customerCustomerEntityToCreate_Def(pname="customerData", aname="_customerData", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=customerCustomerUpdateRequest, encoded="urn:Magento")

class customerCustomerUpdateResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
customerCustomerUpdateResponse.typecode = Struct(pname=("urn:Magento","customerCustomerUpdateResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=customerCustomerUpdateResponse, encoded="urn:Magento")

class customerCustomerDeleteRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        customerId -- part customerId
        """
        self._sessionId =  kw.get("sessionId")
        self._customerId =  kw.get("customerId")
customerCustomerDeleteRequest.typecode = Struct(pname=("urn:Magento","customerCustomerDelete"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="customerId", aname="_customerId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=customerCustomerDeleteRequest, encoded="urn:Magento")

class customerCustomerDeleteResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
customerCustomerDeleteResponse.typecode = Struct(pname=("urn:Magento","customerCustomerDeleteResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=customerCustomerDeleteResponse, encoded="urn:Magento")

class customerGroupListRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        """
        self._sessionId =  kw.get("sessionId")
customerGroupListRequest.typecode = Struct(pname=("urn:Magento","customerGroupList"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=customerGroupListRequest, encoded="urn:Magento")

class customerGroupListResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
customerGroupListResponse.typecode = Struct(pname=("urn:Magento","customerGroupListResponse"), ofwhat=[ns0.customerGroupEntityArray_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=customerGroupListResponse, encoded="urn:Magento")

class customerAddressListRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        customerId -- part customerId
        """
        self._sessionId =  kw.get("sessionId")
        self._customerId =  kw.get("customerId")
customerAddressListRequest.typecode = Struct(pname=("urn:Magento","customerAddressList"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="customerId", aname="_customerId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=customerAddressListRequest, encoded="urn:Magento")

class customerAddressListResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
customerAddressListResponse.typecode = Struct(pname=("urn:Magento","customerAddressListResponse"), ofwhat=[ns0.customerAddressEntityArray_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=customerAddressListResponse, encoded="urn:Magento")

class customerAddressCreateRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        customerId -- part customerId
        addressData -- part addressData
        """
        self._sessionId =  kw.get("sessionId")
        self._customerId =  kw.get("customerId")
        self._addressData =  kw.get("addressData")
customerAddressCreateRequest.typecode = Struct(pname=("urn:Magento","customerAddressCreate"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="customerId", aname="_customerId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.customerAddressEntityCreate_Def(pname="addressData", aname="_addressData", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=customerAddressCreateRequest, encoded="urn:Magento")

class customerAddressCreateResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
customerAddressCreateResponse.typecode = Struct(pname=("urn:Magento","customerAddressCreateResponse"), ofwhat=[ZSI.TCnumbers.Iint(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=customerAddressCreateResponse, encoded="urn:Magento")

class customerAddressInfoRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        addressId -- part addressId
        """
        self._sessionId =  kw.get("sessionId")
        self._addressId =  kw.get("addressId")
customerAddressInfoRequest.typecode = Struct(pname=("urn:Magento","customerAddressInfo"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="addressId", aname="_addressId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=customerAddressInfoRequest, encoded="urn:Magento")

class customerAddressInfoResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        info -- part info
        """
        self._info =  kw.get("info")
customerAddressInfoResponse.typecode = Struct(pname=("urn:Magento","customerAddressInfoResponse"), ofwhat=[ns0.customerAddressEntityItem_Def(pname="info", aname="_info", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=customerAddressInfoResponse, encoded="urn:Magento")

class customerAddressUpdateRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        addressId -- part addressId
        addressData -- part addressData
        """
        self._sessionId =  kw.get("sessionId")
        self._addressId =  kw.get("addressId")
        self._addressData =  kw.get("addressData")
customerAddressUpdateRequest.typecode = Struct(pname=("urn:Magento","customerAddressUpdate"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="addressId", aname="_addressId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.customerAddressEntityCreate_Def(pname="addressData", aname="_addressData", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=customerAddressUpdateRequest, encoded="urn:Magento")

class customerAddressUpdateResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        info -- part info
        """
        self._info =  kw.get("info")
customerAddressUpdateResponse.typecode = Struct(pname=("urn:Magento","customerAddressUpdateResponse"), ofwhat=[ZSI.TC.Boolean(pname="info", aname="_info", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=customerAddressUpdateResponse, encoded="urn:Magento")

class customerAddressDeleteRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        addressId -- part addressId
        """
        self._sessionId =  kw.get("sessionId")
        self._addressId =  kw.get("addressId")
customerAddressDeleteRequest.typecode = Struct(pname=("urn:Magento","customerAddressDelete"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="addressId", aname="_addressId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=customerAddressDeleteRequest, encoded="urn:Magento")

class customerAddressDeleteResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        info -- part info
        """
        self._info =  kw.get("info")
customerAddressDeleteResponse.typecode = Struct(pname=("urn:Magento","customerAddressDeleteResponse"), ofwhat=[ZSI.TC.Boolean(pname="info", aname="_info", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=customerAddressDeleteResponse, encoded="urn:Magento")

class catalogCategoryCurrentStoreRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        storeView -- part storeView
        """
        self._sessionId =  kw.get("sessionId")
        self._storeView =  kw.get("storeView")
catalogCategoryCurrentStoreRequest.typecode = Struct(pname=("urn:Magento","catalogCategoryCurrentStore"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeView", aname="_storeView", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogCategoryCurrentStoreRequest, encoded="urn:Magento")

class catalogCategoryCurrentStoreResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        storeView -- part storeView
        """
        self._storeView =  kw.get("storeView")
catalogCategoryCurrentStoreResponse.typecode = Struct(pname=("urn:Magento","catalogCategoryCurrentStoreResponse"), ofwhat=[ZSI.TCnumbers.Iint(pname="storeView", aname="_storeView", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogCategoryCurrentStoreResponse, encoded="urn:Magento")

class catalogCategoryTreeRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        parentId -- part parentId
        storeView -- part storeView
        """
        self._sessionId =  kw.get("sessionId")
        self._parentId =  kw.get("parentId")
        self._storeView =  kw.get("storeView")
catalogCategoryTreeRequest.typecode = Struct(pname=("urn:Magento","catalogCategoryTree"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="parentId", aname="_parentId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeView", aname="_storeView", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogCategoryTreeRequest, encoded="urn:Magento")

class catalogCategoryTreeResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        tree -- part tree
        """
        self._tree =  kw.get("tree")
catalogCategoryTreeResponse.typecode = Struct(pname=("urn:Magento","catalogCategoryTreeResponse"), ofwhat=[ns0.catalogCategoryTree_Def(pname="tree", aname="_tree", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogCategoryTreeResponse, encoded="urn:Magento")

class catalogCategoryLevelRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        website -- part website
        storeView -- part storeView
        parentCategory -- part parentCategory
        """
        self._sessionId =  kw.get("sessionId")
        self._website =  kw.get("website")
        self._storeView =  kw.get("storeView")
        self._parentCategory =  kw.get("parentCategory")
catalogCategoryLevelRequest.typecode = Struct(pname=("urn:Magento","catalogCategoryLevel"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="website", aname="_website", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeView", aname="_storeView", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="parentCategory", aname="_parentCategory", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogCategoryLevelRequest, encoded="urn:Magento")

class catalogCategoryLevelResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        tree -- part tree
        """
        self._tree =  kw.get("tree")
catalogCategoryLevelResponse.typecode = Struct(pname=("urn:Magento","catalogCategoryLevelResponse"), ofwhat=[ns0.ArrayOfCatalogCategoryEntitiesNoChildren_Def(pname="tree", aname="_tree", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogCategoryLevelResponse, encoded="urn:Magento")

class catalogCategoryInfoRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        categoryId -- part categoryId
        storeView -- part storeView
        attributes -- part attributes
        """
        self._sessionId =  kw.get("sessionId")
        self._categoryId =  kw.get("categoryId")
        self._storeView =  kw.get("storeView")
        self._attributes =  kw.get("attributes")
catalogCategoryInfoRequest.typecode = Struct(pname=("urn:Magento","catalogCategoryInfo"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="categoryId", aname="_categoryId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeView", aname="_storeView", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.ArrayOfString_Def(pname="attributes", aname="_attributes", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogCategoryInfoRequest, encoded="urn:Magento")

class catalogCategoryInfoResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        info -- part info
        """
        self._info =  kw.get("info")
catalogCategoryInfoResponse.typecode = Struct(pname=("urn:Magento","catalogCategoryInfoResponse"), ofwhat=[ns0.catalogCategoryInfo_Def(pname="info", aname="_info", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogCategoryInfoResponse, encoded="urn:Magento")

class catalogCategoryCreateRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        parentId -- part parentId
        categoryData -- part categoryData
        storeView -- part storeView
        """
        self._sessionId =  kw.get("sessionId")
        self._parentId =  kw.get("parentId")
        self._categoryData =  kw.get("categoryData")
        self._storeView =  kw.get("storeView")
catalogCategoryCreateRequest.typecode = Struct(pname=("urn:Magento","catalogCategoryCreate"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="parentId", aname="_parentId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.catalogCategoryEntityCreate_Def(pname="categoryData", aname="_categoryData", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeView", aname="_storeView", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogCategoryCreateRequest, encoded="urn:Magento")

class catalogCategoryCreateResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        attribute_id -- part attribute_id
        """
        self._attribute_id =  kw.get("attribute_id")
catalogCategoryCreateResponse.typecode = Struct(pname=("urn:Magento","catalogCategoryCreateResponse"), ofwhat=[ZSI.TCnumbers.Iint(pname="attribute_id", aname="_attribute_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogCategoryCreateResponse, encoded="urn:Magento")

class catalogCategoryUpdateRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        categoryId -- part categoryId
        categoryData -- part categoryData
        storeView -- part storeView
        """
        self._sessionId =  kw.get("sessionId")
        self._categoryId =  kw.get("categoryId")
        self._categoryData =  kw.get("categoryData")
        self._storeView =  kw.get("storeView")
catalogCategoryUpdateRequest.typecode = Struct(pname=("urn:Magento","catalogCategoryUpdate"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="categoryId", aname="_categoryId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.catalogCategoryEntityCreate_Def(pname="categoryData", aname="_categoryData", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeView", aname="_storeView", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogCategoryUpdateRequest, encoded="urn:Magento")

class catalogCategoryUpdateResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        id -- part id
        """
        self._id =  kw.get("id")
catalogCategoryUpdateResponse.typecode = Struct(pname=("urn:Magento","catalogCategoryUpdateResponse"), ofwhat=[ZSI.TC.Boolean(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogCategoryUpdateResponse, encoded="urn:Magento")

class catalogCategoryMoveRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        categoryId -- part categoryId
        parentId -- part parentId
        afterId -- part afterId
        """
        self._sessionId =  kw.get("sessionId")
        self._categoryId =  kw.get("categoryId")
        self._parentId =  kw.get("parentId")
        self._afterId =  kw.get("afterId")
catalogCategoryMoveRequest.typecode = Struct(pname=("urn:Magento","catalogCategoryMove"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="categoryId", aname="_categoryId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="parentId", aname="_parentId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="afterId", aname="_afterId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogCategoryMoveRequest, encoded="urn:Magento")

class catalogCategoryMoveResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        id -- part id
        """
        self._id =  kw.get("id")
catalogCategoryMoveResponse.typecode = Struct(pname=("urn:Magento","catalogCategoryMoveResponse"), ofwhat=[ZSI.TC.Boolean(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogCategoryMoveResponse, encoded="urn:Magento")

class catalogCategoryDeleteRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        categoryId -- part categoryId
        """
        self._sessionId =  kw.get("sessionId")
        self._categoryId =  kw.get("categoryId")
catalogCategoryDeleteRequest.typecode = Struct(pname=("urn:Magento","catalogCategoryDelete"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="categoryId", aname="_categoryId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogCategoryDeleteRequest, encoded="urn:Magento")

class catalogCategoryDeleteResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogCategoryDeleteResponse.typecode = Struct(pname=("urn:Magento","catalogCategoryDeleteResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogCategoryDeleteResponse, encoded="urn:Magento")

class catalogCategoryAssignedProductsRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        categoryId -- part categoryId
        """
        self._sessionId =  kw.get("sessionId")
        self._categoryId =  kw.get("categoryId")
catalogCategoryAssignedProductsRequest.typecode = Struct(pname=("urn:Magento","catalogCategoryAssignedProducts"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="categoryId", aname="_categoryId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogCategoryAssignedProductsRequest, encoded="urn:Magento")

class catalogCategoryAssignedProductsResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogCategoryAssignedProductsResponse.typecode = Struct(pname=("urn:Magento","catalogCategoryAssignedProductsResponse"), ofwhat=[ns0.catalogAssignedProductArray_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogCategoryAssignedProductsResponse, encoded="urn:Magento")

class catalogCategoryAssignProductRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        categoryId -- part categoryId
        product -- part product
        position -- part position
        productIdentifierType -- part productIdentifierType
        """
        self._sessionId =  kw.get("sessionId")
        self._categoryId =  kw.get("categoryId")
        self._product =  kw.get("product")
        self._position =  kw.get("position")
        self._productIdentifierType =  kw.get("productIdentifierType")
catalogCategoryAssignProductRequest.typecode = Struct(pname=("urn:Magento","catalogCategoryAssignProduct"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="categoryId", aname="_categoryId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="product", aname="_product", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="position", aname="_position", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="productIdentifierType", aname="_productIdentifierType", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogCategoryAssignProductRequest, encoded="urn:Magento")

class catalogCategoryAssignProductResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogCategoryAssignProductResponse.typecode = Struct(pname=("urn:Magento","catalogCategoryAssignProductResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogCategoryAssignProductResponse, encoded="urn:Magento")

class catalogCategoryUpdateProductRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        categoryId -- part categoryId
        product -- part product
        position -- part position
        productIdentifierType -- part productIdentifierType
        """
        self._sessionId =  kw.get("sessionId")
        self._categoryId =  kw.get("categoryId")
        self._product =  kw.get("product")
        self._position =  kw.get("position")
        self._productIdentifierType =  kw.get("productIdentifierType")
catalogCategoryUpdateProductRequest.typecode = Struct(pname=("urn:Magento","catalogCategoryUpdateProduct"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="categoryId", aname="_categoryId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="product", aname="_product", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="position", aname="_position", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="productIdentifierType", aname="_productIdentifierType", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogCategoryUpdateProductRequest, encoded="urn:Magento")

class catalogCategoryUpdateProductResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogCategoryUpdateProductResponse.typecode = Struct(pname=("urn:Magento","catalogCategoryUpdateProductResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogCategoryUpdateProductResponse, encoded="urn:Magento")

class catalogCategoryRemoveProductRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        categoryId -- part categoryId
        product -- part product
        productIdentifierType -- part productIdentifierType
        """
        self._sessionId =  kw.get("sessionId")
        self._categoryId =  kw.get("categoryId")
        self._product =  kw.get("product")
        self._productIdentifierType =  kw.get("productIdentifierType")
catalogCategoryRemoveProductRequest.typecode = Struct(pname=("urn:Magento","catalogCategoryRemoveProduct"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="categoryId", aname="_categoryId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="product", aname="_product", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="productIdentifierType", aname="_productIdentifierType", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogCategoryRemoveProductRequest, encoded="urn:Magento")

class catalogCategoryRemoveProductResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogCategoryRemoveProductResponse.typecode = Struct(pname=("urn:Magento","catalogCategoryRemoveProductResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogCategoryRemoveProductResponse, encoded="urn:Magento")

class catalogProductCurrentStoreRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        storeView -- part storeView
        """
        self._sessionId =  kw.get("sessionId")
        self._storeView =  kw.get("storeView")
catalogProductCurrentStoreRequest.typecode = Struct(pname=("urn:Magento","catalogProductCurrentStore"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeView", aname="_storeView", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductCurrentStoreRequest, encoded="urn:Magento")

class catalogProductCurrentStoreResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        storeView -- part storeView
        """
        self._storeView =  kw.get("storeView")
catalogProductCurrentStoreResponse.typecode = Struct(pname=("urn:Magento","catalogProductCurrentStoreResponse"), ofwhat=[ZSI.TCnumbers.Iint(pname="storeView", aname="_storeView", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductCurrentStoreResponse, encoded="urn:Magento")

class catalogProductListOfAdditionalAttributesRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        productType -- part productType
        attributeSetId -- part attributeSetId
        """
        self._sessionId =  kw.get("sessionId")
        self._productType =  kw.get("productType")
        self._attributeSetId =  kw.get("attributeSetId")
catalogProductListOfAdditionalAttributesRequest.typecode = Struct(pname=("urn:Magento","catalogProductListOfAdditionalAttributes"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="productType", aname="_productType", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="attributeSetId", aname="_attributeSetId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductListOfAdditionalAttributesRequest, encoded="urn:Magento")

class catalogProductListOfAdditionalAttributesResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductListOfAdditionalAttributesResponse.typecode = Struct(pname=("urn:Magento","catalogProductListOfAdditionalAttributesResponse"), ofwhat=[ns0.catalogAttributeEntityArray_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductListOfAdditionalAttributesResponse, encoded="urn:Magento")

class catalogProductListRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        filters -- part filters
        storeView -- part storeView
        """
        self._sessionId =  kw.get("sessionId")
        self._filters =  kw.get("filters")
        self._storeView =  kw.get("storeView")
catalogProductListRequest.typecode = Struct(pname=("urn:Magento","catalogProductList"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.filters_Def(pname="filters", aname="_filters", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeView", aname="_storeView", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductListRequest, encoded="urn:Magento")

class catalogProductListResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        storeView -- part storeView
        """
        self._storeView =  kw.get("storeView")
catalogProductListResponse.typecode = Struct(pname=("urn:Magento","catalogProductListResponse"), ofwhat=[ns0.catalogProductEntityArray_Def(pname="storeView", aname="_storeView", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductListResponse, encoded="urn:Magento")

class catalogProductInfoRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        product -- part product
        storeView -- part storeView
        attributes -- part attributes
        productIdentifierType -- part productIdentifierType
        """
        self._sessionId =  kw.get("sessionId")
        self._product =  kw.get("product")
        self._storeView =  kw.get("storeView")
        self._attributes =  kw.get("attributes")
        self._productIdentifierType =  kw.get("productIdentifierType")
catalogProductInfoRequest.typecode = Struct(pname=("urn:Magento","catalogProductInfo"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="product", aname="_product", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeView", aname="_storeView", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.catalogProductRequestAttributes_Def(pname="attributes", aname="_attributes", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="productIdentifierType", aname="_productIdentifierType", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductInfoRequest, encoded="urn:Magento")

class catalogProductInfoResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        info -- part info
        """
        self._info =  kw.get("info")
catalogProductInfoResponse.typecode = Struct(pname=("urn:Magento","catalogProductInfoResponse"), ofwhat=[ns0.catalogProductReturnEntity_Def(pname="info", aname="_info", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductInfoResponse, encoded="urn:Magento")

class catalogProductCreateRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        type -- part type
        set -- part set
        sku -- part sku
        productData -- part productData
        storeView -- part storeView
        """
        self._sessionId =  kw.get("sessionId")
        self._type =  kw.get("type")
        self._set =  kw.get("set")
        self._sku =  kw.get("sku")
        self._productData =  kw.get("productData")
        self._storeView =  kw.get("storeView")
catalogProductCreateRequest.typecode = Struct(pname=("urn:Magento","catalogProductCreate"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="set", aname="_set", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sku", aname="_sku", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.catalogProductCreateEntity_Def(pname="productData", aname="_productData", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeView", aname="_storeView", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductCreateRequest, encoded="urn:Magento")

class catalogProductCreateResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductCreateResponse.typecode = Struct(pname=("urn:Magento","catalogProductCreateResponse"), ofwhat=[ZSI.TCnumbers.Iint(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductCreateResponse, encoded="urn:Magento")

class catalogProductUpdateRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        product -- part product
        productData -- part productData
        storeView -- part storeView
        productIdentifierType -- part productIdentifierType
        """
        self._sessionId =  kw.get("sessionId")
        self._product =  kw.get("product")
        self._productData =  kw.get("productData")
        self._storeView =  kw.get("storeView")
        self._productIdentifierType =  kw.get("productIdentifierType")
catalogProductUpdateRequest.typecode = Struct(pname=("urn:Magento","catalogProductUpdate"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="product", aname="_product", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.catalogProductCreateEntity_Def(pname="productData", aname="_productData", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeView", aname="_storeView", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="productIdentifierType", aname="_productIdentifierType", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductUpdateRequest, encoded="urn:Magento")

class catalogProductUpdateResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductUpdateResponse.typecode = Struct(pname=("urn:Magento","catalogProductUpdateResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductUpdateResponse, encoded="urn:Magento")

class catalogProductSetSpecialPriceRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        product -- part product
        specialPrice -- part specialPrice
        fromDate -- part fromDate
        toDate -- part toDate
        storeView -- part storeView
        productIdentifierType -- part productIdentifierType
        """
        self._sessionId =  kw.get("sessionId")
        self._product =  kw.get("product")
        self._specialPrice =  kw.get("specialPrice")
        self._fromDate =  kw.get("fromDate")
        self._toDate =  kw.get("toDate")
        self._storeView =  kw.get("storeView")
        self._productIdentifierType =  kw.get("productIdentifierType")
catalogProductSetSpecialPriceRequest.typecode = Struct(pname=("urn:Magento","catalogProductSetSpecialPrice"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="product", aname="_product", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="specialPrice", aname="_specialPrice", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="fromDate", aname="_fromDate", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="toDate", aname="_toDate", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeView", aname="_storeView", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="productIdentifierType", aname="_productIdentifierType", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductSetSpecialPriceRequest, encoded="urn:Magento")

class catalogProductSetSpecialPriceResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductSetSpecialPriceResponse.typecode = Struct(pname=("urn:Magento","catalogProductSetSpecialPriceResponse"), ofwhat=[ZSI.TCnumbers.Iint(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductSetSpecialPriceResponse, encoded="urn:Magento")

class catalogProductGetSpecialPriceRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        product -- part product
        storeView -- part storeView
        productIdentifierType -- part productIdentifierType
        """
        self._sessionId =  kw.get("sessionId")
        self._product =  kw.get("product")
        self._storeView =  kw.get("storeView")
        self._productIdentifierType =  kw.get("productIdentifierType")
catalogProductGetSpecialPriceRequest.typecode = Struct(pname=("urn:Magento","catalogProductGetSpecialPrice"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="product", aname="_product", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeView", aname="_storeView", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="productIdentifierType", aname="_productIdentifierType", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductGetSpecialPriceRequest, encoded="urn:Magento")

class catalogProductGetSpecialPriceResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductGetSpecialPriceResponse.typecode = Struct(pname=("urn:Magento","catalogProductGetSpecialPriceResponse"), ofwhat=[ns0.catalogProductReturnEntity_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductGetSpecialPriceResponse, encoded="urn:Magento")

class catalogProductDeleteRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        product -- part product
        productIdentifierType -- part productIdentifierType
        """
        self._sessionId =  kw.get("sessionId")
        self._product =  kw.get("product")
        self._productIdentifierType =  kw.get("productIdentifierType")
catalogProductDeleteRequest.typecode = Struct(pname=("urn:Magento","catalogProductDelete"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="product", aname="_product", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="productIdentifierType", aname="_productIdentifierType", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductDeleteRequest, encoded="urn:Magento")

class catalogProductDeleteResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductDeleteResponse.typecode = Struct(pname=("urn:Magento","catalogProductDeleteResponse"), ofwhat=[ZSI.TCnumbers.Iint(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductDeleteResponse, encoded="urn:Magento")

class catalogProductAttributeCurrentStoreRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        storeView -- part storeView
        """
        self._sessionId =  kw.get("sessionId")
        self._storeView =  kw.get("storeView")
catalogProductAttributeCurrentStoreRequest.typecode = Struct(pname=("urn:Magento","catalogProductAttributeCurrentStore"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeView", aname="_storeView", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeCurrentStoreRequest, encoded="urn:Magento")

class catalogProductAttributeCurrentStoreResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        storeView -- part storeView
        """
        self._storeView =  kw.get("storeView")
catalogProductAttributeCurrentStoreResponse.typecode = Struct(pname=("urn:Magento","catalogProductAttributeCurrentStoreResponse"), ofwhat=[ZSI.TCnumbers.Iint(pname="storeView", aname="_storeView", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeCurrentStoreResponse, encoded="urn:Magento")

class catalogProductAttributeSetCreateRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        attributeSetName -- part attributeSetName
        skeletonSetId -- part skeletonSetId
        """
        self._sessionId =  kw.get("sessionId")
        self._attributeSetName =  kw.get("attributeSetName")
        self._skeletonSetId =  kw.get("skeletonSetId")
catalogProductAttributeSetCreateRequest.typecode = Struct(pname=("urn:Magento","catalogProductAttributeSetCreate"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="attributeSetName", aname="_attributeSetName", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="skeletonSetId", aname="_skeletonSetId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeSetCreateRequest, encoded="urn:Magento")

class catalogProductAttributeSetCreateResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        setId -- part setId
        """
        self._setId =  kw.get("setId")
catalogProductAttributeSetCreateResponse.typecode = Struct(pname=("urn:Magento","catalogProductAttributeSetCreateResponse"), ofwhat=[ZSI.TCnumbers.Iint(pname="setId", aname="_setId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeSetCreateResponse, encoded="urn:Magento")

class catalogProductAttributeListRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        setId -- part setId
        """
        self._sessionId =  kw.get("sessionId")
        self._setId =  kw.get("setId")
catalogProductAttributeListRequest.typecode = Struct(pname=("urn:Magento","catalogProductAttributeList"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="setId", aname="_setId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeListRequest, encoded="urn:Magento")

class catalogProductAttributeListResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductAttributeListResponse.typecode = Struct(pname=("urn:Magento","catalogProductAttributeListResponse"), ofwhat=[ns0.catalogAttributeEntityArray_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeListResponse, encoded="urn:Magento")

class catalogProductAttributeOptionsRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        attributeId -- part attributeId
        storeView -- part storeView
        """
        self._sessionId =  kw.get("sessionId")
        self._attributeId =  kw.get("attributeId")
        self._storeView =  kw.get("storeView")
catalogProductAttributeOptionsRequest.typecode = Struct(pname=("urn:Magento","catalogProductAttributeOptions"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="attributeId", aname="_attributeId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeView", aname="_storeView", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeOptionsRequest, encoded="urn:Magento")

class catalogProductAttributeOptionsResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductAttributeOptionsResponse.typecode = Struct(pname=("urn:Magento","catalogProductAttributeOptionsResponse"), ofwhat=[ns0.catalogAttributeOptionEntityArray_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeOptionsResponse, encoded="urn:Magento")

class catalogProductAttributeSetRemoveRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        attributeSetId -- part attributeSetId
        forceProductsRemove -- part forceProductsRemove
        """
        self._sessionId =  kw.get("sessionId")
        self._attributeSetId =  kw.get("attributeSetId")
        self._forceProductsRemove =  kw.get("forceProductsRemove")
catalogProductAttributeSetRemoveRequest.typecode = Struct(pname=("urn:Magento","catalogProductAttributeSetRemove"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="attributeSetId", aname="_attributeSetId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="forceProductsRemove", aname="_forceProductsRemove", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeSetRemoveRequest, encoded="urn:Magento")

class catalogProductAttributeSetRemoveResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        isRemoved -- part isRemoved
        """
        self._isRemoved =  kw.get("isRemoved")
catalogProductAttributeSetRemoveResponse.typecode = Struct(pname=("urn:Magento","catalogProductAttributeSetRemoveResponse"), ofwhat=[ZSI.TC.Boolean(pname="isRemoved", aname="_isRemoved", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeSetRemoveResponse, encoded="urn:Magento")

class catalogProductAttributeSetListRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        """
        self._sessionId =  kw.get("sessionId")
catalogProductAttributeSetListRequest.typecode = Struct(pname=("urn:Magento","catalogProductAttributeSetList"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeSetListRequest, encoded="urn:Magento")

class catalogProductAttributeSetListResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductAttributeSetListResponse.typecode = Struct(pname=("urn:Magento","catalogProductAttributeSetListResponse"), ofwhat=[ns0.catalogProductAttributeSetEntityArray_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeSetListResponse, encoded="urn:Magento")

class catalogProductAttributeSetAttributeAddRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        attributeId -- part attributeId
        attributeSetId -- part attributeSetId
        attributeGroupId -- part attributeGroupId
        sortOrder -- part sortOrder
        """
        self._sessionId =  kw.get("sessionId")
        self._attributeId =  kw.get("attributeId")
        self._attributeSetId =  kw.get("attributeSetId")
        self._attributeGroupId =  kw.get("attributeGroupId")
        self._sortOrder =  kw.get("sortOrder")
catalogProductAttributeSetAttributeAddRequest.typecode = Struct(pname=("urn:Magento","catalogProductAttributeSetAttributeAdd"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="attributeId", aname="_attributeId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="attributeSetId", aname="_attributeSetId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="attributeGroupId", aname="_attributeGroupId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sortOrder", aname="_sortOrder", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeSetAttributeAddRequest, encoded="urn:Magento")

class catalogProductAttributeSetAttributeAddResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        isAdded -- part isAdded
        """
        self._isAdded =  kw.get("isAdded")
catalogProductAttributeSetAttributeAddResponse.typecode = Struct(pname=("urn:Magento","catalogProductAttributeSetAttributeAddResponse"), ofwhat=[ZSI.TC.Boolean(pname="isAdded", aname="_isAdded", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeSetAttributeAddResponse, encoded="urn:Magento")

class catalogProductAttributeSetAttributeRemoveRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        attributeId -- part attributeId
        attributeSetId -- part attributeSetId
        """
        self._sessionId =  kw.get("sessionId")
        self._attributeId =  kw.get("attributeId")
        self._attributeSetId =  kw.get("attributeSetId")
catalogProductAttributeSetAttributeRemoveRequest.typecode = Struct(pname=("urn:Magento","catalogProductAttributeSetAttributeRemove"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="attributeId", aname="_attributeId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="attributeSetId", aname="_attributeSetId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeSetAttributeRemoveRequest, encoded="urn:Magento")

class catalogProductAttributeSetAttributeRemoveResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        isRemoved -- part isRemoved
        """
        self._isRemoved =  kw.get("isRemoved")
catalogProductAttributeSetAttributeRemoveResponse.typecode = Struct(pname=("urn:Magento","catalogProductAttributeSetAttributeRemoveResponse"), ofwhat=[ZSI.TC.Boolean(pname="isRemoved", aname="_isRemoved", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeSetAttributeRemoveResponse, encoded="urn:Magento")

class catalogProductAttributeSetGroupAddRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        attributeSetId -- part attributeSetId
        groupName -- part groupName
        """
        self._sessionId =  kw.get("sessionId")
        self._attributeSetId =  kw.get("attributeSetId")
        self._groupName =  kw.get("groupName")
catalogProductAttributeSetGroupAddRequest.typecode = Struct(pname=("urn:Magento","catalogProductAttributeSetGroupAdd"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="attributeSetId", aname="_attributeSetId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="groupName", aname="_groupName", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeSetGroupAddRequest, encoded="urn:Magento")

class catalogProductAttributeSetGroupAddResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductAttributeSetGroupAddResponse.typecode = Struct(pname=("urn:Magento","catalogProductAttributeSetGroupAddResponse"), ofwhat=[ZSI.TCnumbers.Iint(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeSetGroupAddResponse, encoded="urn:Magento")

class catalogProductAttributeSetGroupRenameRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        groupId -- part groupId
        groupName -- part groupName
        """
        self._sessionId =  kw.get("sessionId")
        self._groupId =  kw.get("groupId")
        self._groupName =  kw.get("groupName")
catalogProductAttributeSetGroupRenameRequest.typecode = Struct(pname=("urn:Magento","catalogProductAttributeSetGroupRename"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="groupId", aname="_groupId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="groupName", aname="_groupName", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeSetGroupRenameRequest, encoded="urn:Magento")

class catalogProductAttributeSetGroupRenameResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductAttributeSetGroupRenameResponse.typecode = Struct(pname=("urn:Magento","catalogProductAttributeSetGroupRenameResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeSetGroupRenameResponse, encoded="urn:Magento")

class catalogProductAttributeSetGroupRemoveRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        attributeGroupId -- part attributeGroupId
        """
        self._sessionId =  kw.get("sessionId")
        self._attributeGroupId =  kw.get("attributeGroupId")
catalogProductAttributeSetGroupRemoveRequest.typecode = Struct(pname=("urn:Magento","catalogProductAttributeSetGroupRemove"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="attributeGroupId", aname="_attributeGroupId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeSetGroupRemoveRequest, encoded="urn:Magento")

class catalogProductAttributeSetGroupRemoveResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductAttributeSetGroupRemoveResponse.typecode = Struct(pname=("urn:Magento","catalogProductAttributeSetGroupRemoveResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeSetGroupRemoveResponse, encoded="urn:Magento")

class catalogProductAttributeTypesRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        """
        self._sessionId =  kw.get("sessionId")
catalogProductAttributeTypesRequest.typecode = Struct(pname=("urn:Magento","catalogProductAttributeTypes"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeTypesRequest, encoded="urn:Magento")

class catalogProductAttributeTypesResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductAttributeTypesResponse.typecode = Struct(pname=("urn:Magento","catalogProductAttributeTypesResponse"), ofwhat=[ns0.catalogAttributeOptionEntityArray_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeTypesResponse, encoded="urn:Magento")

class catalogProductAttributeCreateRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        data -- part data
        """
        self._sessionId =  kw.get("sessionId")
        self._data =  kw.get("data")
catalogProductAttributeCreateRequest.typecode = Struct(pname=("urn:Magento","catalogProductAttributeCreate"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.catalogProductAttributeEntityToCreate_Def(pname="data", aname="_data", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeCreateRequest, encoded="urn:Magento")

class catalogProductAttributeCreateResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductAttributeCreateResponse.typecode = Struct(pname=("urn:Magento","catalogProductAttributeCreateResponse"), ofwhat=[ZSI.TCnumbers.Iint(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeCreateResponse, encoded="urn:Magento")

class catalogCategoryAttributeCurrentStoreRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        storeView -- part storeView
        """
        self._sessionId =  kw.get("sessionId")
        self._storeView =  kw.get("storeView")
catalogCategoryAttributeCurrentStoreRequest.typecode = Struct(pname=("urn:Magento","catalogCategoryAttributeCurrentStore"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeView", aname="_storeView", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogCategoryAttributeCurrentStoreRequest, encoded="urn:Magento")

class catalogCategoryAttributeCurrentStoreResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        storeView -- part storeView
        """
        self._storeView =  kw.get("storeView")
catalogCategoryAttributeCurrentStoreResponse.typecode = Struct(pname=("urn:Magento","catalogCategoryAttributeCurrentStoreResponse"), ofwhat=[ZSI.TCnumbers.Iint(pname="storeView", aname="_storeView", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogCategoryAttributeCurrentStoreResponse, encoded="urn:Magento")

class catalogProductAttributeMediaCurrentStoreRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        storeView -- part storeView
        """
        self._sessionId =  kw.get("sessionId")
        self._storeView =  kw.get("storeView")
catalogProductAttributeMediaCurrentStoreRequest.typecode = Struct(pname=("urn:Magento","catalogProductAttributeMediaCurrentStore"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeView", aname="_storeView", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeMediaCurrentStoreRequest, encoded="urn:Magento")

class catalogProductAttributeMediaCurrentStoreResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        storeView -- part storeView
        """
        self._storeView =  kw.get("storeView")
catalogProductAttributeMediaCurrentStoreResponse.typecode = Struct(pname=("urn:Magento","catalogProductAttributeMediaCurrentStoreResponse"), ofwhat=[ZSI.TCnumbers.Iint(pname="storeView", aname="_storeView", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeMediaCurrentStoreResponse, encoded="urn:Magento")

class catalogProductAttributeRemoveRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        attribute -- part attribute
        """
        self._sessionId =  kw.get("sessionId")
        self._attribute =  kw.get("attribute")
catalogProductAttributeRemoveRequest.typecode = Struct(pname=("urn:Magento","catalogProductAttributeRemove"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="attribute", aname="_attribute", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeRemoveRequest, encoded="urn:Magento")

class catalogProductAttributeRemoveResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductAttributeRemoveResponse.typecode = Struct(pname=("urn:Magento","catalogProductAttributeRemoveResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeRemoveResponse, encoded="urn:Magento")

class catalogProductAttributeInfoRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        attribute -- part attribute
        """
        self._sessionId =  kw.get("sessionId")
        self._attribute =  kw.get("attribute")
catalogProductAttributeInfoRequest.typecode = Struct(pname=("urn:Magento","catalogProductAttributeInfo"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="attribute", aname="_attribute", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeInfoRequest, encoded="urn:Magento")

class catalogProductAttributeInfoResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductAttributeInfoResponse.typecode = Struct(pname=("urn:Magento","catalogProductAttributeInfoResponse"), ofwhat=[ns0.catalogProductAttributeEntity_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeInfoResponse, encoded="urn:Magento")

class catalogProductAttributeUpdateRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        attribute -- part attribute
        data -- part data
        """
        self._sessionId =  kw.get("sessionId")
        self._attribute =  kw.get("attribute")
        self._data =  kw.get("data")
catalogProductAttributeUpdateRequest.typecode = Struct(pname=("urn:Magento","catalogProductAttributeUpdate"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="attribute", aname="_attribute", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.catalogProductAttributeEntityToUpdate_Def(pname="data", aname="_data", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeUpdateRequest, encoded="urn:Magento")

class catalogProductAttributeUpdateResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductAttributeUpdateResponse.typecode = Struct(pname=("urn:Magento","catalogProductAttributeUpdateResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeUpdateResponse, encoded="urn:Magento")

class catalogProductAttributeAddOptionRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        attribute -- part attribute
        data -- part data
        """
        self._sessionId =  kw.get("sessionId")
        self._attribute =  kw.get("attribute")
        self._data =  kw.get("data")
catalogProductAttributeAddOptionRequest.typecode = Struct(pname=("urn:Magento","catalogProductAttributeAddOption"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="attribute", aname="_attribute", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.catalogProductAttributeOptionEntityToAdd_Def(pname="data", aname="_data", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeAddOptionRequest, encoded="urn:Magento")

class catalogProductAttributeAddOptionResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductAttributeAddOptionResponse.typecode = Struct(pname=("urn:Magento","catalogProductAttributeAddOptionResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeAddOptionResponse, encoded="urn:Magento")

class catalogProductAttributeRemoveOptionRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        attribute -- part attribute
        optionId -- part optionId
        """
        self._sessionId =  kw.get("sessionId")
        self._attribute =  kw.get("attribute")
        self._optionId =  kw.get("optionId")
catalogProductAttributeRemoveOptionRequest.typecode = Struct(pname=("urn:Magento","catalogProductAttributeRemoveOption"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="attribute", aname="_attribute", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="optionId", aname="_optionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeRemoveOptionRequest, encoded="urn:Magento")

class catalogProductAttributeRemoveOptionResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductAttributeRemoveOptionResponse.typecode = Struct(pname=("urn:Magento","catalogProductAttributeRemoveOptionResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeRemoveOptionResponse, encoded="urn:Magento")

class catalogProductTypeListRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        """
        self._sessionId =  kw.get("sessionId")
catalogProductTypeListRequest.typecode = Struct(pname=("urn:Magento","catalogProductTypeList"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductTypeListRequest, encoded="urn:Magento")

class catalogProductTypeListResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductTypeListResponse.typecode = Struct(pname=("urn:Magento","catalogProductTypeListResponse"), ofwhat=[ns0.catalogProductTypeEntityArray_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductTypeListResponse, encoded="urn:Magento")

class catalogProductAttributeTierPriceInfoRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        product -- part product
        productIdentifierType -- part productIdentifierType
        """
        self._sessionId =  kw.get("sessionId")
        self._product =  kw.get("product")
        self._productIdentifierType =  kw.get("productIdentifierType")
catalogProductAttributeTierPriceInfoRequest.typecode = Struct(pname=("urn:Magento","catalogProductAttributeTierPriceInfo"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="product", aname="_product", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="productIdentifierType", aname="_productIdentifierType", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeTierPriceInfoRequest, encoded="urn:Magento")

class catalogProductAttributeTierPriceInfoResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductAttributeTierPriceInfoResponse.typecode = Struct(pname=("urn:Magento","catalogProductAttributeTierPriceInfoResponse"), ofwhat=[ns0.catalogProductTierPriceEntityArray_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeTierPriceInfoResponse, encoded="urn:Magento")

class catalogProductAttributeTierPriceUpdateRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        product -- part product
        tier_price -- part tier_price
        productIdentifierType -- part productIdentifierType
        """
        self._sessionId =  kw.get("sessionId")
        self._product =  kw.get("product")
        self._tier_price =  kw.get("tier_price")
        self._productIdentifierType =  kw.get("productIdentifierType")
catalogProductAttributeTierPriceUpdateRequest.typecode = Struct(pname=("urn:Magento","catalogProductAttributeTierPriceUpdate"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="product", aname="_product", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.catalogProductTierPriceEntityArray_Def(pname="tier_price", aname="_tier_price", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="productIdentifierType", aname="_productIdentifierType", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeTierPriceUpdateRequest, encoded="urn:Magento")

class catalogProductAttributeTierPriceUpdateResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductAttributeTierPriceUpdateResponse.typecode = Struct(pname=("urn:Magento","catalogProductAttributeTierPriceUpdateResponse"), ofwhat=[ZSI.TCnumbers.Iint(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeTierPriceUpdateResponse, encoded="urn:Magento")

class catalogCategoryAttributeListRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        """
        self._sessionId =  kw.get("sessionId")
catalogCategoryAttributeListRequest.typecode = Struct(pname=("urn:Magento","catalogCategoryAttributeList"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogCategoryAttributeListRequest, encoded="urn:Magento")

class catalogCategoryAttributeListResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogCategoryAttributeListResponse.typecode = Struct(pname=("urn:Magento","catalogCategoryAttributeListResponse"), ofwhat=[ns0.catalogAttributeEntityArray_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogCategoryAttributeListResponse, encoded="urn:Magento")

class catalogCategoryAttributeOptionsRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        attributeId -- part attributeId
        storeView -- part storeView
        """
        self._sessionId =  kw.get("sessionId")
        self._attributeId =  kw.get("attributeId")
        self._storeView =  kw.get("storeView")
catalogCategoryAttributeOptionsRequest.typecode = Struct(pname=("urn:Magento","catalogCategoryAttributeOptions"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="attributeId", aname="_attributeId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeView", aname="_storeView", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogCategoryAttributeOptionsRequest, encoded="urn:Magento")

class catalogCategoryAttributeOptionsResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogCategoryAttributeOptionsResponse.typecode = Struct(pname=("urn:Magento","catalogCategoryAttributeOptionsResponse"), ofwhat=[ns0.catalogAttributeOptionEntityArray_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogCategoryAttributeOptionsResponse, encoded="urn:Magento")

class catalogProductAttributeMediaListRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        product -- part product
        storeView -- part storeView
        productIdentifierType -- part productIdentifierType
        """
        self._sessionId =  kw.get("sessionId")
        self._product =  kw.get("product")
        self._storeView =  kw.get("storeView")
        self._productIdentifierType =  kw.get("productIdentifierType")
catalogProductAttributeMediaListRequest.typecode = Struct(pname=("urn:Magento","catalogProductAttributeMediaList"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="product", aname="_product", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeView", aname="_storeView", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="productIdentifierType", aname="_productIdentifierType", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeMediaListRequest, encoded="urn:Magento")

class catalogProductAttributeMediaListResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductAttributeMediaListResponse.typecode = Struct(pname=("urn:Magento","catalogProductAttributeMediaListResponse"), ofwhat=[ns0.catalogProductImageEntityArray_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeMediaListResponse, encoded="urn:Magento")

class catalogProductAttributeMediaInfoRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        product -- part product
        file -- part file
        storeView -- part storeView
        productIdentifierType -- part productIdentifierType
        """
        self._sessionId =  kw.get("sessionId")
        self._product =  kw.get("product")
        self._file =  kw.get("file")
        self._storeView =  kw.get("storeView")
        self._productIdentifierType =  kw.get("productIdentifierType")
catalogProductAttributeMediaInfoRequest.typecode = Struct(pname=("urn:Magento","catalogProductAttributeMediaInfo"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="product", aname="_product", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="file", aname="_file", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeView", aname="_storeView", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="productIdentifierType", aname="_productIdentifierType", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeMediaInfoRequest, encoded="urn:Magento")

class catalogProductAttributeMediaInfoResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductAttributeMediaInfoResponse.typecode = Struct(pname=("urn:Magento","catalogProductAttributeMediaInfoResponse"), ofwhat=[ns0.catalogProductImageEntity_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeMediaInfoResponse, encoded="urn:Magento")

class catalogProductAttributeMediaTypesRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        setId -- part setId
        """
        self._sessionId =  kw.get("sessionId")
        self._setId =  kw.get("setId")
catalogProductAttributeMediaTypesRequest.typecode = Struct(pname=("urn:Magento","catalogProductAttributeMediaTypes"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="setId", aname="_setId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeMediaTypesRequest, encoded="urn:Magento")

class catalogProductAttributeMediaTypesResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductAttributeMediaTypesResponse.typecode = Struct(pname=("urn:Magento","catalogProductAttributeMediaTypesResponse"), ofwhat=[ns0.catalogProductAttributeMediaTypeEntityArray_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeMediaTypesResponse, encoded="urn:Magento")

class catalogProductAttributeMediaCreateRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        product -- part product
        data -- part data
        storeView -- part storeView
        productIdentifierType -- part productIdentifierType
        """
        self._sessionId =  kw.get("sessionId")
        self._product =  kw.get("product")
        self._data =  kw.get("data")
        self._storeView =  kw.get("storeView")
        self._productIdentifierType =  kw.get("productIdentifierType")
catalogProductAttributeMediaCreateRequest.typecode = Struct(pname=("urn:Magento","catalogProductAttributeMediaCreate"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="product", aname="_product", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.catalogProductAttributeMediaCreateEntity_Def(pname="data", aname="_data", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeView", aname="_storeView", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="productIdentifierType", aname="_productIdentifierType", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeMediaCreateRequest, encoded="urn:Magento")

class catalogProductAttributeMediaCreateResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductAttributeMediaCreateResponse.typecode = Struct(pname=("urn:Magento","catalogProductAttributeMediaCreateResponse"), ofwhat=[ZSI.TC.String(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeMediaCreateResponse, encoded="urn:Magento")

class catalogProductAttributeMediaUpdateRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        product -- part product
        file -- part file
        data -- part data
        storeView -- part storeView
        productIdentifierType -- part productIdentifierType
        """
        self._sessionId =  kw.get("sessionId")
        self._product =  kw.get("product")
        self._file =  kw.get("file")
        self._data =  kw.get("data")
        self._storeView =  kw.get("storeView")
        self._productIdentifierType =  kw.get("productIdentifierType")
catalogProductAttributeMediaUpdateRequest.typecode = Struct(pname=("urn:Magento","catalogProductAttributeMediaUpdate"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="product", aname="_product", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="file", aname="_file", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.catalogProductAttributeMediaCreateEntity_Def(pname="data", aname="_data", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeView", aname="_storeView", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="productIdentifierType", aname="_productIdentifierType", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeMediaUpdateRequest, encoded="urn:Magento")

class catalogProductAttributeMediaUpdateResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductAttributeMediaUpdateResponse.typecode = Struct(pname=("urn:Magento","catalogProductAttributeMediaUpdateResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeMediaUpdateResponse, encoded="urn:Magento")

class catalogProductAttributeMediaRemoveRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        product -- part product
        file -- part file
        productIdentifierType -- part productIdentifierType
        """
        self._sessionId =  kw.get("sessionId")
        self._product =  kw.get("product")
        self._file =  kw.get("file")
        self._productIdentifierType =  kw.get("productIdentifierType")
catalogProductAttributeMediaRemoveRequest.typecode = Struct(pname=("urn:Magento","catalogProductAttributeMediaRemove"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="product", aname="_product", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="file", aname="_file", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="productIdentifierType", aname="_productIdentifierType", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeMediaRemoveRequest, encoded="urn:Magento")

class catalogProductAttributeMediaRemoveResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductAttributeMediaRemoveResponse.typecode = Struct(pname=("urn:Magento","catalogProductAttributeMediaRemoveResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductAttributeMediaRemoveResponse, encoded="urn:Magento")

class catalogProductLinkListRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        type -- part type
        product -- part product
        productIdentifierType -- part productIdentifierType
        """
        self._sessionId =  kw.get("sessionId")
        self._type =  kw.get("type")
        self._product =  kw.get("product")
        self._productIdentifierType =  kw.get("productIdentifierType")
catalogProductLinkListRequest.typecode = Struct(pname=("urn:Magento","catalogProductLinkList"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="product", aname="_product", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="productIdentifierType", aname="_productIdentifierType", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductLinkListRequest, encoded="urn:Magento")

class catalogProductLinkListResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductLinkListResponse.typecode = Struct(pname=("urn:Magento","catalogProductLinkListResponse"), ofwhat=[ns0.catalogProductLinkEntityArray_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductLinkListResponse, encoded="urn:Magento")

class catalogProductLinkAssignRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        type -- part type
        product -- part product
        linkedProduct -- part linkedProduct
        data -- part data
        productIdentifierType -- part productIdentifierType
        """
        self._sessionId =  kw.get("sessionId")
        self._type =  kw.get("type")
        self._product =  kw.get("product")
        self._linkedProduct =  kw.get("linkedProduct")
        self._data =  kw.get("data")
        self._productIdentifierType =  kw.get("productIdentifierType")
catalogProductLinkAssignRequest.typecode = Struct(pname=("urn:Magento","catalogProductLinkAssign"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="product", aname="_product", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="linkedProduct", aname="_linkedProduct", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.catalogProductLinkEntity_Def(pname="data", aname="_data", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="productIdentifierType", aname="_productIdentifierType", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductLinkAssignRequest, encoded="urn:Magento")

class catalogProductLinkAssignResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductLinkAssignResponse.typecode = Struct(pname=("urn:Magento","catalogProductLinkAssignResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductLinkAssignResponse, encoded="urn:Magento")

class catalogProductLinkUpdateRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        type -- part type
        product -- part product
        linkedProduct -- part linkedProduct
        data -- part data
        productIdentifierType -- part productIdentifierType
        """
        self._sessionId =  kw.get("sessionId")
        self._type =  kw.get("type")
        self._product =  kw.get("product")
        self._linkedProduct =  kw.get("linkedProduct")
        self._data =  kw.get("data")
        self._productIdentifierType =  kw.get("productIdentifierType")
catalogProductLinkUpdateRequest.typecode = Struct(pname=("urn:Magento","catalogProductLinkUpdate"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="product", aname="_product", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="linkedProduct", aname="_linkedProduct", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.catalogProductLinkEntity_Def(pname="data", aname="_data", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="productIdentifierType", aname="_productIdentifierType", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductLinkUpdateRequest, encoded="urn:Magento")

class catalogProductLinkUpdateResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductLinkUpdateResponse.typecode = Struct(pname=("urn:Magento","catalogProductLinkUpdateResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductLinkUpdateResponse, encoded="urn:Magento")

class catalogProductLinkRemoveRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        type -- part type
        product -- part product
        linkedProduct -- part linkedProduct
        productIdentifierType -- part productIdentifierType
        """
        self._sessionId =  kw.get("sessionId")
        self._type =  kw.get("type")
        self._product =  kw.get("product")
        self._linkedProduct =  kw.get("linkedProduct")
        self._productIdentifierType =  kw.get("productIdentifierType")
catalogProductLinkRemoveRequest.typecode = Struct(pname=("urn:Magento","catalogProductLinkRemove"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="product", aname="_product", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="linkedProduct", aname="_linkedProduct", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="productIdentifierType", aname="_productIdentifierType", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductLinkRemoveRequest, encoded="urn:Magento")

class catalogProductLinkRemoveResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductLinkRemoveResponse.typecode = Struct(pname=("urn:Magento","catalogProductLinkRemoveResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductLinkRemoveResponse, encoded="urn:Magento")

class catalogProductLinkTypesRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        """
        self._sessionId =  kw.get("sessionId")
catalogProductLinkTypesRequest.typecode = Struct(pname=("urn:Magento","catalogProductLinkTypes"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductLinkTypesRequest, encoded="urn:Magento")

class catalogProductLinkTypesResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductLinkTypesResponse.typecode = Struct(pname=("urn:Magento","catalogProductLinkTypesResponse"), ofwhat=[ns0.ArrayOfString_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductLinkTypesResponse, encoded="urn:Magento")

class catalogProductLinkAttributesRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        type -- part type
        """
        self._sessionId =  kw.get("sessionId")
        self._type =  kw.get("type")
catalogProductLinkAttributesRequest.typecode = Struct(pname=("urn:Magento","catalogProductLinkAttributes"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductLinkAttributesRequest, encoded="urn:Magento")

class catalogProductLinkAttributesResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductLinkAttributesResponse.typecode = Struct(pname=("urn:Magento","catalogProductLinkAttributesResponse"), ofwhat=[ns0.catalogProductLinkAttributeEntityArray_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductLinkAttributesResponse, encoded="urn:Magento")

class catalogProductCustomOptionAddRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        productId -- part productId
        data -- part data
        store -- part store
        """
        self._sessionId =  kw.get("sessionId")
        self._productId =  kw.get("productId")
        self._data =  kw.get("data")
        self._store =  kw.get("store")
catalogProductCustomOptionAddRequest.typecode = Struct(pname=("urn:Magento","catalogProductCustomOptionAdd"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="productId", aname="_productId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.catalogProductCustomOptionToAdd_Def(pname="data", aname="_data", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="store", aname="_store", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductCustomOptionAddRequest, encoded="urn:Magento")

class catalogProductCustomOptionAddResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductCustomOptionAddResponse.typecode = Struct(pname=("urn:Magento","catalogProductCustomOptionAddResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductCustomOptionAddResponse, encoded="urn:Magento")

class catalogProductCustomOptionUpdateRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        optionId -- part optionId
        data -- part data
        store -- part store
        """
        self._sessionId =  kw.get("sessionId")
        self._optionId =  kw.get("optionId")
        self._data =  kw.get("data")
        self._store =  kw.get("store")
catalogProductCustomOptionUpdateRequest.typecode = Struct(pname=("urn:Magento","catalogProductCustomOptionUpdate"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="optionId", aname="_optionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.catalogProductCustomOptionToUpdate_Def(pname="data", aname="_data", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="store", aname="_store", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductCustomOptionUpdateRequest, encoded="urn:Magento")

class catalogProductCustomOptionUpdateResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductCustomOptionUpdateResponse.typecode = Struct(pname=("urn:Magento","catalogProductCustomOptionUpdateResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductCustomOptionUpdateResponse, encoded="urn:Magento")

class catalogProductCustomOptionInfoRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        optionId -- part optionId
        store -- part store
        """
        self._sessionId =  kw.get("sessionId")
        self._optionId =  kw.get("optionId")
        self._store =  kw.get("store")
catalogProductCustomOptionInfoRequest.typecode = Struct(pname=("urn:Magento","catalogProductCustomOptionInfo"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="optionId", aname="_optionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="store", aname="_store", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductCustomOptionInfoRequest, encoded="urn:Magento")

class catalogProductCustomOptionInfoResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductCustomOptionInfoResponse.typecode = Struct(pname=("urn:Magento","catalogProductCustomOptionInfoResponse"), ofwhat=[ns0.catalogProductCustomOptionInfoEntity_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductCustomOptionInfoResponse, encoded="urn:Magento")

class catalogProductCustomOptionTypesRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        """
        self._sessionId =  kw.get("sessionId")
catalogProductCustomOptionTypesRequest.typecode = Struct(pname=("urn:Magento","catalogProductCustomOptionTypes"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductCustomOptionTypesRequest, encoded="urn:Magento")

class catalogProductCustomOptionTypesResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductCustomOptionTypesResponse.typecode = Struct(pname=("urn:Magento","catalogProductCustomOptionTypesResponse"), ofwhat=[ns0.catalogProductCustomOptionTypesArray_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductCustomOptionTypesResponse, encoded="urn:Magento")

class catalogProductCustomOptionValueInfoRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        valueId -- part valueId
        store -- part store
        """
        self._sessionId =  kw.get("sessionId")
        self._valueId =  kw.get("valueId")
        self._store =  kw.get("store")
catalogProductCustomOptionValueInfoRequest.typecode = Struct(pname=("urn:Magento","catalogProductCustomOptionValueInfo"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="valueId", aname="_valueId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="store", aname="_store", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductCustomOptionValueInfoRequest, encoded="urn:Magento")

class catalogProductCustomOptionValueInfoResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductCustomOptionValueInfoResponse.typecode = Struct(pname=("urn:Magento","catalogProductCustomOptionValueInfoResponse"), ofwhat=[ns0.catalogProductCustomOptionValueInfoEntity_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductCustomOptionValueInfoResponse, encoded="urn:Magento")

class catalogProductCustomOptionValueListRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        optionId -- part optionId
        store -- part store
        """
        self._sessionId =  kw.get("sessionId")
        self._optionId =  kw.get("optionId")
        self._store =  kw.get("store")
catalogProductCustomOptionValueListRequest.typecode = Struct(pname=("urn:Magento","catalogProductCustomOptionValueList"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="optionId", aname="_optionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="store", aname="_store", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductCustomOptionValueListRequest, encoded="urn:Magento")

class catalogProductCustomOptionValueListResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductCustomOptionValueListResponse.typecode = Struct(pname=("urn:Magento","catalogProductCustomOptionValueListResponse"), ofwhat=[ns0.catalogProductCustomOptionValueListArray_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductCustomOptionValueListResponse, encoded="urn:Magento")

class catalogProductCustomOptionValueAddRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        optionId -- part optionId
        data -- part data
        store -- part store
        """
        self._sessionId =  kw.get("sessionId")
        self._optionId =  kw.get("optionId")
        self._data =  kw.get("data")
        self._store =  kw.get("store")
catalogProductCustomOptionValueAddRequest.typecode = Struct(pname=("urn:Magento","catalogProductCustomOptionValueAdd"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="optionId", aname="_optionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.catalogProductCustomOptionValueAddArray_Def(pname="data", aname="_data", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="store", aname="_store", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductCustomOptionValueAddRequest, encoded="urn:Magento")

class catalogProductCustomOptionValueAddResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductCustomOptionValueAddResponse.typecode = Struct(pname=("urn:Magento","catalogProductCustomOptionValueAddResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductCustomOptionValueAddResponse, encoded="urn:Magento")

class catalogProductCustomOptionValueUpdateRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        valueId -- part valueId
        data -- part data
        storeId -- part storeId
        """
        self._sessionId =  kw.get("sessionId")
        self._valueId =  kw.get("valueId")
        self._data =  kw.get("data")
        self._storeId =  kw.get("storeId")
catalogProductCustomOptionValueUpdateRequest.typecode = Struct(pname=("urn:Magento","catalogProductCustomOptionValueUpdate"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="valueId", aname="_valueId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.catalogProductCustomOptionValueUpdateEntity_Def(pname="data", aname="_data", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeId", aname="_storeId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductCustomOptionValueUpdateRequest, encoded="urn:Magento")

class catalogProductCustomOptionValueUpdateResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductCustomOptionValueUpdateResponse.typecode = Struct(pname=("urn:Magento","catalogProductCustomOptionValueUpdateResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductCustomOptionValueUpdateResponse, encoded="urn:Magento")

class catalogProductCustomOptionValueRemoveRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        valueId -- part valueId
        """
        self._sessionId =  kw.get("sessionId")
        self._valueId =  kw.get("valueId")
catalogProductCustomOptionValueRemoveRequest.typecode = Struct(pname=("urn:Magento","catalogProductCustomOptionValueRemove"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="valueId", aname="_valueId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductCustomOptionValueRemoveRequest, encoded="urn:Magento")

class catalogProductCustomOptionValueRemoveResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductCustomOptionValueRemoveResponse.typecode = Struct(pname=("urn:Magento","catalogProductCustomOptionValueRemoveResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductCustomOptionValueRemoveResponse, encoded="urn:Magento")

class catalogProductCustomOptionListRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        productId -- part productId
        store -- part store
        """
        self._sessionId =  kw.get("sessionId")
        self._productId =  kw.get("productId")
        self._store =  kw.get("store")
catalogProductCustomOptionListRequest.typecode = Struct(pname=("urn:Magento","catalogProductCustomOptionList"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="productId", aname="_productId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="store", aname="_store", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductCustomOptionListRequest, encoded="urn:Magento")

class catalogProductCustomOptionListResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductCustomOptionListResponse.typecode = Struct(pname=("urn:Magento","catalogProductCustomOptionListResponse"), ofwhat=[ns0.catalogProductCustomOptionListArray_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductCustomOptionListResponse, encoded="urn:Magento")

class catalogProductCustomOptionRemoveRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        optionId -- part optionId
        """
        self._sessionId =  kw.get("sessionId")
        self._optionId =  kw.get("optionId")
catalogProductCustomOptionRemoveRequest.typecode = Struct(pname=("urn:Magento","catalogProductCustomOptionRemove"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="optionId", aname="_optionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductCustomOptionRemoveRequest, encoded="urn:Magento")

class catalogProductCustomOptionRemoveResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductCustomOptionRemoveResponse.typecode = Struct(pname=("urn:Magento","catalogProductCustomOptionRemoveResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductCustomOptionRemoveResponse, encoded="urn:Magento")

class salesOrderListRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        filters -- part filters
        """
        self._sessionId =  kw.get("sessionId")
        self._filters =  kw.get("filters")
salesOrderListRequest.typecode = Struct(pname=("urn:Magento","salesOrderList"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.filters_Def(pname="filters", aname="_filters", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderListRequest, encoded="urn:Magento")

class salesOrderListResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
salesOrderListResponse.typecode = Struct(pname=("urn:Magento","salesOrderListResponse"), ofwhat=[ns0.salesOrderListEntityArray_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderListResponse, encoded="urn:Magento")

class salesOrderInfoRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        orderIncrementId -- part orderIncrementId
        """
        self._sessionId =  kw.get("sessionId")
        self._orderIncrementId =  kw.get("orderIncrementId")
salesOrderInfoRequest.typecode = Struct(pname=("urn:Magento","salesOrderInfo"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="orderIncrementId", aname="_orderIncrementId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderInfoRequest, encoded="urn:Magento")

class salesOrderInfoResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
salesOrderInfoResponse.typecode = Struct(pname=("urn:Magento","salesOrderInfoResponse"), ofwhat=[ns0.salesOrderEntity_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderInfoResponse, encoded="urn:Magento")

class salesOrderAddCommentRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        orderIncrementId -- part orderIncrementId
        status -- part status
        comment -- part comment
        notify -- part notify
        """
        self._sessionId =  kw.get("sessionId")
        self._orderIncrementId =  kw.get("orderIncrementId")
        self._status =  kw.get("status")
        self._comment =  kw.get("comment")
        self._notify =  kw.get("notify")
salesOrderAddCommentRequest.typecode = Struct(pname=("urn:Magento","salesOrderAddComment"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="orderIncrementId", aname="_orderIncrementId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="status", aname="_status", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="comment", aname="_comment", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="notify", aname="_notify", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderAddCommentRequest, encoded="urn:Magento")

class salesOrderAddCommentResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
salesOrderAddCommentResponse.typecode = Struct(pname=("urn:Magento","salesOrderAddCommentResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderAddCommentResponse, encoded="urn:Magento")

class salesOrderHoldRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        orderIncrementId -- part orderIncrementId
        """
        self._sessionId =  kw.get("sessionId")
        self._orderIncrementId =  kw.get("orderIncrementId")
salesOrderHoldRequest.typecode = Struct(pname=("urn:Magento","salesOrderHold"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="orderIncrementId", aname="_orderIncrementId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderHoldRequest, encoded="urn:Magento")

class salesOrderHoldResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
salesOrderHoldResponse.typecode = Struct(pname=("urn:Magento","salesOrderHoldResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderHoldResponse, encoded="urn:Magento")

class salesOrderUnholdRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        orderIncrementId -- part orderIncrementId
        """
        self._sessionId =  kw.get("sessionId")
        self._orderIncrementId =  kw.get("orderIncrementId")
salesOrderUnholdRequest.typecode = Struct(pname=("urn:Magento","salesOrderUnhold"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="orderIncrementId", aname="_orderIncrementId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderUnholdRequest, encoded="urn:Magento")

class salesOrderUnholdResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
salesOrderUnholdResponse.typecode = Struct(pname=("urn:Magento","salesOrderUnholdResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderUnholdResponse, encoded="urn:Magento")

class salesOrderCancelRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        orderIncrementId -- part orderIncrementId
        """
        self._sessionId =  kw.get("sessionId")
        self._orderIncrementId =  kw.get("orderIncrementId")
salesOrderCancelRequest.typecode = Struct(pname=("urn:Magento","salesOrderCancel"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="orderIncrementId", aname="_orderIncrementId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderCancelRequest, encoded="urn:Magento")

class salesOrderCancelResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
salesOrderCancelResponse.typecode = Struct(pname=("urn:Magento","salesOrderCancelResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderCancelResponse, encoded="urn:Magento")

class salesOrderShipmentListRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        filters -- part filters
        """
        self._sessionId =  kw.get("sessionId")
        self._filters =  kw.get("filters")
salesOrderShipmentListRequest.typecode = Struct(pname=("urn:Magento","salesOrderShipmentList"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.filters_Def(pname="filters", aname="_filters", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderShipmentListRequest, encoded="urn:Magento")

class salesOrderShipmentListResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
salesOrderShipmentListResponse.typecode = Struct(pname=("urn:Magento","salesOrderShipmentListResponse"), ofwhat=[ns0.salesOrderShipmentEntityArray_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderShipmentListResponse, encoded="urn:Magento")

class salesOrderShipmentInfoRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        shipmentIncrementId -- part shipmentIncrementId
        """
        self._sessionId =  kw.get("sessionId")
        self._shipmentIncrementId =  kw.get("shipmentIncrementId")
salesOrderShipmentInfoRequest.typecode = Struct(pname=("urn:Magento","salesOrderShipmentInfo"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="shipmentIncrementId", aname="_shipmentIncrementId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderShipmentInfoRequest, encoded="urn:Magento")

class salesOrderShipmentInfoResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
salesOrderShipmentInfoResponse.typecode = Struct(pname=("urn:Magento","salesOrderShipmentInfoResponse"), ofwhat=[ns0.salesOrderShipmentEntity_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderShipmentInfoResponse, encoded="urn:Magento")

class salesOrderShipmentCreateRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        orderIncrementId -- part orderIncrementId
        itemsQty -- part itemsQty
        comment -- part comment
        email -- part email
        includeComment -- part includeComment
        """
        self._sessionId =  kw.get("sessionId")
        self._orderIncrementId =  kw.get("orderIncrementId")
        self._itemsQty =  kw.get("itemsQty")
        self._comment =  kw.get("comment")
        self._email =  kw.get("email")
        self._includeComment =  kw.get("includeComment")
salesOrderShipmentCreateRequest.typecode = Struct(pname=("urn:Magento","salesOrderShipmentCreate"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="orderIncrementId", aname="_orderIncrementId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.orderItemIdQtyArray_Def(pname="itemsQty", aname="_itemsQty", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="comment", aname="_comment", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="email", aname="_email", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="includeComment", aname="_includeComment", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderShipmentCreateRequest, encoded="urn:Magento")

class salesOrderShipmentCreateResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        shipmentIncrementId -- part shipmentIncrementId
        """
        self._shipmentIncrementId =  kw.get("shipmentIncrementId")
salesOrderShipmentCreateResponse.typecode = Struct(pname=("urn:Magento","salesOrderShipmentCreateResponse"), ofwhat=[ZSI.TC.String(pname="shipmentIncrementId", aname="_shipmentIncrementId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderShipmentCreateResponse, encoded="urn:Magento")

class salesOrderShipmentAddCommentRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        shipmentIncrementId -- part shipmentIncrementId
        comment -- part comment
        email -- part email
        includeInEmail -- part includeInEmail
        """
        self._sessionId =  kw.get("sessionId")
        self._shipmentIncrementId =  kw.get("shipmentIncrementId")
        self._comment =  kw.get("comment")
        self._email =  kw.get("email")
        self._includeInEmail =  kw.get("includeInEmail")
salesOrderShipmentAddCommentRequest.typecode = Struct(pname=("urn:Magento","salesOrderShipmentAddComment"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="shipmentIncrementId", aname="_shipmentIncrementId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="comment", aname="_comment", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="email", aname="_email", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="includeInEmail", aname="_includeInEmail", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderShipmentAddCommentRequest, encoded="urn:Magento")

class salesOrderShipmentAddCommentResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        shipmentIncrementId -- part shipmentIncrementId
        """
        self._shipmentIncrementId =  kw.get("shipmentIncrementId")
salesOrderShipmentAddCommentResponse.typecode = Struct(pname=("urn:Magento","salesOrderShipmentAddCommentResponse"), ofwhat=[ZSI.TC.Boolean(pname="shipmentIncrementId", aname="_shipmentIncrementId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderShipmentAddCommentResponse, encoded="urn:Magento")

class salesOrderShipmentAddTrackRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        shipmentIncrementId -- part shipmentIncrementId
        carrier -- part carrier
        title -- part title
        trackNumber -- part trackNumber
        """
        self._sessionId =  kw.get("sessionId")
        self._shipmentIncrementId =  kw.get("shipmentIncrementId")
        self._carrier =  kw.get("carrier")
        self._title =  kw.get("title")
        self._trackNumber =  kw.get("trackNumber")
salesOrderShipmentAddTrackRequest.typecode = Struct(pname=("urn:Magento","salesOrderShipmentAddTrack"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="shipmentIncrementId", aname="_shipmentIncrementId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="carrier", aname="_carrier", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="title", aname="_title", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="trackNumber", aname="_trackNumber", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderShipmentAddTrackRequest, encoded="urn:Magento")

class salesOrderShipmentAddTrackResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
salesOrderShipmentAddTrackResponse.typecode = Struct(pname=("urn:Magento","salesOrderShipmentAddTrackResponse"), ofwhat=[ZSI.TCnumbers.Iint(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderShipmentAddTrackResponse, encoded="urn:Magento")

class salesOrderShipmentSendInfoRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        shipmentIncrementId -- part shipmentIncrementId
        comment -- part comment
        """
        self._sessionId =  kw.get("sessionId")
        self._shipmentIncrementId =  kw.get("shipmentIncrementId")
        self._comment =  kw.get("comment")
salesOrderShipmentSendInfoRequest.typecode = Struct(pname=("urn:Magento","salesOrderShipmentSendInfo"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="shipmentIncrementId", aname="_shipmentIncrementId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="comment", aname="_comment", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderShipmentSendInfoRequest, encoded="urn:Magento")

class salesOrderShipmentSendInfoResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
salesOrderShipmentSendInfoResponse.typecode = Struct(pname=("urn:Magento","salesOrderShipmentSendInfoResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderShipmentSendInfoResponse, encoded="urn:Magento")

class salesOrderShipmentRemoveTrackRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        shipmentIncrementId -- part shipmentIncrementId
        trackId -- part trackId
        """
        self._sessionId =  kw.get("sessionId")
        self._shipmentIncrementId =  kw.get("shipmentIncrementId")
        self._trackId =  kw.get("trackId")
salesOrderShipmentRemoveTrackRequest.typecode = Struct(pname=("urn:Magento","salesOrderShipmentRemoveTrack"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="shipmentIncrementId", aname="_shipmentIncrementId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="trackId", aname="_trackId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderShipmentRemoveTrackRequest, encoded="urn:Magento")

class salesOrderShipmentRemoveTrackResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
salesOrderShipmentRemoveTrackResponse.typecode = Struct(pname=("urn:Magento","salesOrderShipmentRemoveTrackResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderShipmentRemoveTrackResponse, encoded="urn:Magento")

class salesOrderShipmentGetCarriersRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        orderIncrementId -- part orderIncrementId
        """
        self._sessionId =  kw.get("sessionId")
        self._orderIncrementId =  kw.get("orderIncrementId")
salesOrderShipmentGetCarriersRequest.typecode = Struct(pname=("urn:Magento","salesOrderShipmentGetCarriers"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="orderIncrementId", aname="_orderIncrementId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderShipmentGetCarriersRequest, encoded="urn:Magento")

class salesOrderShipmentGetCarriersResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
salesOrderShipmentGetCarriersResponse.typecode = Struct(pname=("urn:Magento","salesOrderShipmentGetCarriersResponse"), ofwhat=[ns0.associativeArray_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderShipmentGetCarriersResponse, encoded="urn:Magento")

class salesOrderInvoiceListRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        filters -- part filters
        """
        self._sessionId =  kw.get("sessionId")
        self._filters =  kw.get("filters")
salesOrderInvoiceListRequest.typecode = Struct(pname=("urn:Magento","salesOrderInvoiceList"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.filters_Def(pname="filters", aname="_filters", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderInvoiceListRequest, encoded="urn:Magento")

class salesOrderInvoiceListResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
salesOrderInvoiceListResponse.typecode = Struct(pname=("urn:Magento","salesOrderInvoiceListResponse"), ofwhat=[ns0.salesOrderInvoiceEntityArray_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderInvoiceListResponse, encoded="urn:Magento")

class salesOrderInvoiceInfoRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        invoiceIncrementId -- part invoiceIncrementId
        """
        self._sessionId =  kw.get("sessionId")
        self._invoiceIncrementId =  kw.get("invoiceIncrementId")
salesOrderInvoiceInfoRequest.typecode = Struct(pname=("urn:Magento","salesOrderInvoiceInfo"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="invoiceIncrementId", aname="_invoiceIncrementId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderInvoiceInfoRequest, encoded="urn:Magento")

class salesOrderInvoiceInfoResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
salesOrderInvoiceInfoResponse.typecode = Struct(pname=("urn:Magento","salesOrderInvoiceInfoResponse"), ofwhat=[ns0.salesOrderInvoiceEntity_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderInvoiceInfoResponse, encoded="urn:Magento")

class salesOrderInvoiceCreateRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        invoiceIncrementId -- part invoiceIncrementId
        itemsQty -- part itemsQty
        comment -- part comment
        email -- part email
        includeComment -- part includeComment
        """
        self._sessionId =  kw.get("sessionId")
        self._invoiceIncrementId =  kw.get("invoiceIncrementId")
        self._itemsQty =  kw.get("itemsQty")
        self._comment =  kw.get("comment")
        self._email =  kw.get("email")
        self._includeComment =  kw.get("includeComment")
salesOrderInvoiceCreateRequest.typecode = Struct(pname=("urn:Magento","salesOrderInvoiceCreate"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="invoiceIncrementId", aname="_invoiceIncrementId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.orderItemIdQtyArray_Def(pname="itemsQty", aname="_itemsQty", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="comment", aname="_comment", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="email", aname="_email", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="includeComment", aname="_includeComment", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderInvoiceCreateRequest, encoded="urn:Magento")

class salesOrderInvoiceCreateResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
salesOrderInvoiceCreateResponse.typecode = Struct(pname=("urn:Magento","salesOrderInvoiceCreateResponse"), ofwhat=[ZSI.TC.String(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderInvoiceCreateResponse, encoded="urn:Magento")

class salesOrderInvoiceAddCommentRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        invoiceIncrementId -- part invoiceIncrementId
        comment -- part comment
        email -- part email
        includeComment -- part includeComment
        """
        self._sessionId =  kw.get("sessionId")
        self._invoiceIncrementId =  kw.get("invoiceIncrementId")
        self._comment =  kw.get("comment")
        self._email =  kw.get("email")
        self._includeComment =  kw.get("includeComment")
salesOrderInvoiceAddCommentRequest.typecode = Struct(pname=("urn:Magento","salesOrderInvoiceAddComment"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="invoiceIncrementId", aname="_invoiceIncrementId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="comment", aname="_comment", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="email", aname="_email", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="includeComment", aname="_includeComment", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderInvoiceAddCommentRequest, encoded="urn:Magento")

class salesOrderInvoiceAddCommentResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
salesOrderInvoiceAddCommentResponse.typecode = Struct(pname=("urn:Magento","salesOrderInvoiceAddCommentResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderInvoiceAddCommentResponse, encoded="urn:Magento")

class salesOrderInvoiceCaptureRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        invoiceIncrementId -- part invoiceIncrementId
        """
        self._sessionId =  kw.get("sessionId")
        self._invoiceIncrementId =  kw.get("invoiceIncrementId")
salesOrderInvoiceCaptureRequest.typecode = Struct(pname=("urn:Magento","salesOrderInvoiceCapture"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="invoiceIncrementId", aname="_invoiceIncrementId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderInvoiceCaptureRequest, encoded="urn:Magento")

class salesOrderInvoiceCaptureResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
salesOrderInvoiceCaptureResponse.typecode = Struct(pname=("urn:Magento","salesOrderInvoiceCaptureResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderInvoiceCaptureResponse, encoded="urn:Magento")

class salesOrderInvoiceVoidRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        invoiceIncrementId -- part invoiceIncrementId
        """
        self._sessionId =  kw.get("sessionId")
        self._invoiceIncrementId =  kw.get("invoiceIncrementId")
salesOrderInvoiceVoidRequest.typecode = Struct(pname=("urn:Magento","salesOrderInvoiceVoid"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="invoiceIncrementId", aname="_invoiceIncrementId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderInvoiceVoidRequest, encoded="urn:Magento")

class salesOrderInvoiceVoidResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
salesOrderInvoiceVoidResponse.typecode = Struct(pname=("urn:Magento","salesOrderInvoiceVoidResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderInvoiceVoidResponse, encoded="urn:Magento")

class salesOrderInvoiceCancelRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        invoiceIncrementId -- part invoiceIncrementId
        """
        self._sessionId =  kw.get("sessionId")
        self._invoiceIncrementId =  kw.get("invoiceIncrementId")
salesOrderInvoiceCancelRequest.typecode = Struct(pname=("urn:Magento","salesOrderInvoiceCancel"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="invoiceIncrementId", aname="_invoiceIncrementId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderInvoiceCancelRequest, encoded="urn:Magento")

class salesOrderInvoiceCancelResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
salesOrderInvoiceCancelResponse.typecode = Struct(pname=("urn:Magento","salesOrderInvoiceCancelResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderInvoiceCancelResponse, encoded="urn:Magento")

class salesOrderCreditmemoListRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        filters -- part filters
        """
        self._sessionId =  kw.get("sessionId")
        self._filters =  kw.get("filters")
salesOrderCreditmemoListRequest.typecode = Struct(pname=("urn:Magento","salesOrderCreditmemoList"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.filters_Def(pname="filters", aname="_filters", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderCreditmemoListRequest, encoded="urn:Magento")

class salesOrderCreditmemoListResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
salesOrderCreditmemoListResponse.typecode = Struct(pname=("urn:Magento","salesOrderCreditmemoListResponse"), ofwhat=[ns0.salesOrderCreditmemoEntityArray_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderCreditmemoListResponse, encoded="urn:Magento")

class salesOrderCreditmemoInfoRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        creditmemoIncrementId -- part creditmemoIncrementId
        """
        self._sessionId =  kw.get("sessionId")
        self._creditmemoIncrementId =  kw.get("creditmemoIncrementId")
salesOrderCreditmemoInfoRequest.typecode = Struct(pname=("urn:Magento","salesOrderCreditmemoInfo"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="creditmemoIncrementId", aname="_creditmemoIncrementId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderCreditmemoInfoRequest, encoded="urn:Magento")

class salesOrderCreditmemoInfoResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
salesOrderCreditmemoInfoResponse.typecode = Struct(pname=("urn:Magento","salesOrderCreditmemoInfoResponse"), ofwhat=[ns0.salesOrderCreditmemoEntity_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderCreditmemoInfoResponse, encoded="urn:Magento")

class salesOrderCreditmemoCreateRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        creditmemoIncrementId -- part creditmemoIncrementId
        creditmemoData -- part creditmemoData
        comment -- part comment
        notifyCustomer -- part notifyCustomer
        includeComment -- part includeComment
        refundToStoreCreditAmount -- part refundToStoreCreditAmount
        """
        self._sessionId =  kw.get("sessionId")
        self._creditmemoIncrementId =  kw.get("creditmemoIncrementId")
        self._creditmemoData =  kw.get("creditmemoData")
        self._comment =  kw.get("comment")
        self._notifyCustomer =  kw.get("notifyCustomer")
        self._includeComment =  kw.get("includeComment")
        self._refundToStoreCreditAmount =  kw.get("refundToStoreCreditAmount")
salesOrderCreditmemoCreateRequest.typecode = Struct(pname=("urn:Magento","salesOrderCreditmemoCreate"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="creditmemoIncrementId", aname="_creditmemoIncrementId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.salesOrderCreditmemoData_Def(pname="creditmemoData", aname="_creditmemoData", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="comment", aname="_comment", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="notifyCustomer", aname="_notifyCustomer", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="includeComment", aname="_includeComment", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="refundToStoreCreditAmount", aname="_refundToStoreCreditAmount", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderCreditmemoCreateRequest, encoded="urn:Magento")

class salesOrderCreditmemoCreateResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
salesOrderCreditmemoCreateResponse.typecode = Struct(pname=("urn:Magento","salesOrderCreditmemoCreateResponse"), ofwhat=[ZSI.TC.String(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderCreditmemoCreateResponse, encoded="urn:Magento")

class salesOrderCreditmemoAddCommentRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        creditmemoIncrementId -- part creditmemoIncrementId
        comment -- part comment
        notifyCustomer -- part notifyCustomer
        includeComment -- part includeComment
        """
        self._sessionId =  kw.get("sessionId")
        self._creditmemoIncrementId =  kw.get("creditmemoIncrementId")
        self._comment =  kw.get("comment")
        self._notifyCustomer =  kw.get("notifyCustomer")
        self._includeComment =  kw.get("includeComment")
salesOrderCreditmemoAddCommentRequest.typecode = Struct(pname=("urn:Magento","salesOrderCreditmemoAddComment"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="creditmemoIncrementId", aname="_creditmemoIncrementId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="comment", aname="_comment", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="notifyCustomer", aname="_notifyCustomer", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="includeComment", aname="_includeComment", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderCreditmemoAddCommentRequest, encoded="urn:Magento")

class salesOrderCreditmemoAddCommentResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
salesOrderCreditmemoAddCommentResponse.typecode = Struct(pname=("urn:Magento","salesOrderCreditmemoAddCommentResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderCreditmemoAddCommentResponse, encoded="urn:Magento")

class salesOrderCreditmemoCancelRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        creditmemoIncrementId -- part creditmemoIncrementId
        """
        self._sessionId =  kw.get("sessionId")
        self._creditmemoIncrementId =  kw.get("creditmemoIncrementId")
salesOrderCreditmemoCancelRequest.typecode = Struct(pname=("urn:Magento","salesOrderCreditmemoCancel"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="creditmemoIncrementId", aname="_creditmemoIncrementId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderCreditmemoCancelRequest, encoded="urn:Magento")

class salesOrderCreditmemoCancelResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
salesOrderCreditmemoCancelResponse.typecode = Struct(pname=("urn:Magento","salesOrderCreditmemoCancelResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=salesOrderCreditmemoCancelResponse, encoded="urn:Magento")

class catalogInventoryStockItemListRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        products -- part products
        """
        self._sessionId =  kw.get("sessionId")
        self._products =  kw.get("products")
catalogInventoryStockItemListRequest.typecode = Struct(pname=("urn:Magento","catalogInventoryStockItemList"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.ArrayOfString_Def(pname="products", aname="_products", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogInventoryStockItemListRequest, encoded="urn:Magento")

class catalogInventoryStockItemListResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogInventoryStockItemListResponse.typecode = Struct(pname=("urn:Magento","catalogInventoryStockItemListResponse"), ofwhat=[ns0.catalogInventoryStockItemEntityArray_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogInventoryStockItemListResponse, encoded="urn:Magento")

class catalogInventoryStockItemUpdateRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        product -- part product
        data -- part data
        """
        self._sessionId =  kw.get("sessionId")
        self._product =  kw.get("product")
        self._data =  kw.get("data")
catalogInventoryStockItemUpdateRequest.typecode = Struct(pname=("urn:Magento","catalogInventoryStockItemUpdate"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="product", aname="_product", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.catalogInventoryStockItemUpdateEntity_Def(pname="data", aname="_data", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogInventoryStockItemUpdateRequest, encoded="urn:Magento")

class catalogInventoryStockItemUpdateResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogInventoryStockItemUpdateResponse.typecode = Struct(pname=("urn:Magento","catalogInventoryStockItemUpdateResponse"), ofwhat=[ZSI.TCnumbers.Iint(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogInventoryStockItemUpdateResponse, encoded="urn:Magento")

class shoppingCartCreateRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        storeId -- part storeId
        """
        self._sessionId =  kw.get("sessionId")
        self._storeId =  kw.get("storeId")
shoppingCartCreateRequest.typecode = Struct(pname=("urn:Magento","shoppingCartCreate"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeId", aname="_storeId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartCreateRequest, encoded="urn:Magento")

class shoppingCartCreateResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        quoteId -- part quoteId
        """
        self._quoteId =  kw.get("quoteId")
shoppingCartCreateResponse.typecode = Struct(pname=("urn:Magento","shoppingCartCreateResponse"), ofwhat=[ZSI.TCnumbers.Iint(pname="quoteId", aname="_quoteId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartCreateResponse, encoded="urn:Magento")

class shoppingCartInfoRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        quoteId -- part quoteId
        storeId -- part storeId
        """
        self._sessionId =  kw.get("sessionId")
        self._quoteId =  kw.get("quoteId")
        self._storeId =  kw.get("storeId")
shoppingCartInfoRequest.typecode = Struct(pname=("urn:Magento","shoppingCartInfo"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="quoteId", aname="_quoteId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeId", aname="_storeId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartInfoRequest, encoded="urn:Magento")

class shoppingCartInfoResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
shoppingCartInfoResponse.typecode = Struct(pname=("urn:Magento","shoppingCartInfoResponse"), ofwhat=[ns0.shoppingCartInfoEntity_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartInfoResponse, encoded="urn:Magento")

class shoppingCartTotalsRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        quoteId -- part quoteId
        storeId -- part storeId
        """
        self._sessionId =  kw.get("sessionId")
        self._quoteId =  kw.get("quoteId")
        self._storeId =  kw.get("storeId")
shoppingCartTotalsRequest.typecode = Struct(pname=("urn:Magento","shoppingCartTotals"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="quoteId", aname="_quoteId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeId", aname="_storeId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartTotalsRequest, encoded="urn:Magento")

class shoppingCartTotalsResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
shoppingCartTotalsResponse.typecode = Struct(pname=("urn:Magento","shoppingCartTotalsResponse"), ofwhat=[ns0.shoppingCartTotalsEntityArray_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartTotalsResponse, encoded="urn:Magento")

class shoppingCartOrderRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        quoteId -- part quoteId
        storeId -- part storeId
        licenses -- part licenses
        """
        self._sessionId =  kw.get("sessionId")
        self._quoteId =  kw.get("quoteId")
        self._storeId =  kw.get("storeId")
        self._licenses =  kw.get("licenses")
shoppingCartOrderRequest.typecode = Struct(pname=("urn:Magento","shoppingCartOrder"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="quoteId", aname="_quoteId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeId", aname="_storeId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.ArrayOfString_Def(pname="licenses", aname="_licenses", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartOrderRequest, encoded="urn:Magento")

class shoppingCartOrderResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
shoppingCartOrderResponse.typecode = Struct(pname=("urn:Magento","shoppingCartOrderResponse"), ofwhat=[ZSI.TC.String(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartOrderResponse, encoded="urn:Magento")

class shoppingCartLicenseRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        quoteId -- part quoteId
        storeId -- part storeId
        """
        self._sessionId =  kw.get("sessionId")
        self._quoteId =  kw.get("quoteId")
        self._storeId =  kw.get("storeId")
shoppingCartLicenseRequest.typecode = Struct(pname=("urn:Magento","shoppingCartLicense"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="quoteId", aname="_quoteId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeId", aname="_storeId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartLicenseRequest, encoded="urn:Magento")

class shoppingCartLicenseResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
shoppingCartLicenseResponse.typecode = Struct(pname=("urn:Magento","shoppingCartLicenseResponse"), ofwhat=[ns0.shoppingCartLicenseEntityArray_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartLicenseResponse, encoded="urn:Magento")

class shoppingCartProductAddRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        quoteId -- part quoteId
        products -- part products
        storeId -- part storeId
        """
        self._sessionId =  kw.get("sessionId")
        self._quoteId =  kw.get("quoteId")
        self._products =  kw.get("products")
        self._storeId =  kw.get("storeId")
shoppingCartProductAddRequest.typecode = Struct(pname=("urn:Magento","shoppingCartProductAdd"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="quoteId", aname="_quoteId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.shoppingCartProductEntityArray_Def(pname="products", aname="_products", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeId", aname="_storeId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartProductAddRequest, encoded="urn:Magento")

class shoppingCartProductAddResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
shoppingCartProductAddResponse.typecode = Struct(pname=("urn:Magento","shoppingCartProductAddResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartProductAddResponse, encoded="urn:Magento")

class shoppingCartProductUpdateRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        quoteId -- part quoteId
        products -- part products
        storeId -- part storeId
        """
        self._sessionId =  kw.get("sessionId")
        self._quoteId =  kw.get("quoteId")
        self._products =  kw.get("products")
        self._storeId =  kw.get("storeId")
shoppingCartProductUpdateRequest.typecode = Struct(pname=("urn:Magento","shoppingCartProductUpdate"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="quoteId", aname="_quoteId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.shoppingCartProductEntityArray_Def(pname="products", aname="_products", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeId", aname="_storeId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartProductUpdateRequest, encoded="urn:Magento")

class shoppingCartProductUpdateResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
shoppingCartProductUpdateResponse.typecode = Struct(pname=("urn:Magento","shoppingCartProductUpdateResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartProductUpdateResponse, encoded="urn:Magento")

class shoppingCartProductRemoveRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        quoteId -- part quoteId
        products -- part products
        storeId -- part storeId
        """
        self._sessionId =  kw.get("sessionId")
        self._quoteId =  kw.get("quoteId")
        self._products =  kw.get("products")
        self._storeId =  kw.get("storeId")
shoppingCartProductRemoveRequest.typecode = Struct(pname=("urn:Magento","shoppingCartProductRemove"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="quoteId", aname="_quoteId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.shoppingCartProductEntityArray_Def(pname="products", aname="_products", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeId", aname="_storeId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartProductRemoveRequest, encoded="urn:Magento")

class shoppingCartProductRemoveResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
shoppingCartProductRemoveResponse.typecode = Struct(pname=("urn:Magento","shoppingCartProductRemoveResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartProductRemoveResponse, encoded="urn:Magento")

class shoppingCartProductListRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        quoteId -- part quoteId
        storeId -- part storeId
        """
        self._sessionId =  kw.get("sessionId")
        self._quoteId =  kw.get("quoteId")
        self._storeId =  kw.get("storeId")
shoppingCartProductListRequest.typecode = Struct(pname=("urn:Magento","shoppingCartProductList"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="quoteId", aname="_quoteId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeId", aname="_storeId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartProductListRequest, encoded="urn:Magento")

class shoppingCartProductListResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
shoppingCartProductListResponse.typecode = Struct(pname=("urn:Magento","shoppingCartProductListResponse"), ofwhat=[ns0.shoppingCartProductResponseEntityArray_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartProductListResponse, encoded="urn:Magento")

class shoppingCartProductMoveToCustomerQuoteRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        quoteId -- part quoteId
        products -- part products
        storeId -- part storeId
        """
        self._sessionId =  kw.get("sessionId")
        self._quoteId =  kw.get("quoteId")
        self._products =  kw.get("products")
        self._storeId =  kw.get("storeId")
shoppingCartProductMoveToCustomerQuoteRequest.typecode = Struct(pname=("urn:Magento","shoppingCartProductMoveToCustomerQuote"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="quoteId", aname="_quoteId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.shoppingCartProductEntityArray_Def(pname="products", aname="_products", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeId", aname="_storeId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartProductMoveToCustomerQuoteRequest, encoded="urn:Magento")

class shoppingCartProductMoveToCustomerQuoteResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
shoppingCartProductMoveToCustomerQuoteResponse.typecode = Struct(pname=("urn:Magento","shoppingCartProductMoveToCustomerQuoteResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartProductMoveToCustomerQuoteResponse, encoded="urn:Magento")

class shoppingCartCustomerSetRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        quoteId -- part quoteId
        customer -- part customer
        storeId -- part storeId
        """
        self._sessionId =  kw.get("sessionId")
        self._quoteId =  kw.get("quoteId")
        self._customer =  kw.get("customer")
        self._storeId =  kw.get("storeId")
shoppingCartCustomerSetRequest.typecode = Struct(pname=("urn:Magento","shoppingCartCustomerSet"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="quoteId", aname="_quoteId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.shoppingCartCustomerEntity_Def(pname="customer", aname="_customer", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeId", aname="_storeId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartCustomerSetRequest, encoded="urn:Magento")

class shoppingCartCustomerSetResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
shoppingCartCustomerSetResponse.typecode = Struct(pname=("urn:Magento","shoppingCartCustomerSetResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartCustomerSetResponse, encoded="urn:Magento")

class shoppingCartCustomerAddressesRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        quoteId -- part quoteId
        customer -- part customer
        storeId -- part storeId
        """
        self._sessionId =  kw.get("sessionId")
        self._quoteId =  kw.get("quoteId")
        self._customer =  kw.get("customer")
        self._storeId =  kw.get("storeId")
shoppingCartCustomerAddressesRequest.typecode = Struct(pname=("urn:Magento","shoppingCartCustomerAddresses"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="quoteId", aname="_quoteId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.shoppingCartCustomerAddressEntityArray_Def(pname="customer", aname="_customer", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeId", aname="_storeId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartCustomerAddressesRequest, encoded="urn:Magento")

class shoppingCartCustomerAddressesResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
shoppingCartCustomerAddressesResponse.typecode = Struct(pname=("urn:Magento","shoppingCartCustomerAddressesResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartCustomerAddressesResponse, encoded="urn:Magento")

class shoppingCartShippingMethodRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        quoteId -- part quoteId
        method -- part method
        storeId -- part storeId
        """
        self._sessionId =  kw.get("sessionId")
        self._quoteId =  kw.get("quoteId")
        self._method =  kw.get("method")
        self._storeId =  kw.get("storeId")
shoppingCartShippingMethodRequest.typecode = Struct(pname=("urn:Magento","shoppingCartShippingMethod"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="quoteId", aname="_quoteId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="method", aname="_method", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeId", aname="_storeId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartShippingMethodRequest, encoded="urn:Magento")

class shoppingCartShippingMethodResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
shoppingCartShippingMethodResponse.typecode = Struct(pname=("urn:Magento","shoppingCartShippingMethodResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartShippingMethodResponse, encoded="urn:Magento")

class shoppingCartShippingListRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        quoteId -- part quoteId
        storeId -- part storeId
        """
        self._sessionId =  kw.get("sessionId")
        self._quoteId =  kw.get("quoteId")
        self._storeId =  kw.get("storeId")
shoppingCartShippingListRequest.typecode = Struct(pname=("urn:Magento","shoppingCartShippingList"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="quoteId", aname="_quoteId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeId", aname="_storeId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartShippingListRequest, encoded="urn:Magento")

class shoppingCartShippingListResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
shoppingCartShippingListResponse.typecode = Struct(pname=("urn:Magento","shoppingCartShippingListResponse"), ofwhat=[ns0.shoppingCartShippingMethodEntityArray_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartShippingListResponse, encoded="urn:Magento")

class shoppingCartPaymentMethodRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        quoteId -- part quoteId
        method -- part method
        storeId -- part storeId
        """
        self._sessionId =  kw.get("sessionId")
        self._quoteId =  kw.get("quoteId")
        self._method =  kw.get("method")
        self._storeId =  kw.get("storeId")
shoppingCartPaymentMethodRequest.typecode = Struct(pname=("urn:Magento","shoppingCartPaymentMethod"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="quoteId", aname="_quoteId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.shoppingCartPaymentMethodEntity_Def(pname="method", aname="_method", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeId", aname="_storeId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartPaymentMethodRequest, encoded="urn:Magento")

class shoppingCartPaymentMethodResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
shoppingCartPaymentMethodResponse.typecode = Struct(pname=("urn:Magento","shoppingCartPaymentMethodResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartPaymentMethodResponse, encoded="urn:Magento")

class shoppingCartPaymentListRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        quoteId -- part quoteId
        storeId -- part storeId
        """
        self._sessionId =  kw.get("sessionId")
        self._quoteId =  kw.get("quoteId")
        self._storeId =  kw.get("storeId")
shoppingCartPaymentListRequest.typecode = Struct(pname=("urn:Magento","shoppingCartPaymentList"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="quoteId", aname="_quoteId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeId", aname="_storeId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartPaymentListRequest, encoded="urn:Magento")

class shoppingCartPaymentListResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
shoppingCartPaymentListResponse.typecode = Struct(pname=("urn:Magento","shoppingCartPaymentListResponse"), ofwhat=[ns0.shoppingCartPaymentMethodResponseEntityArray_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartPaymentListResponse, encoded="urn:Magento")

class shoppingCartCouponAddRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        quoteId -- part quoteId
        couponCode -- part couponCode
        storeId -- part storeId
        """
        self._sessionId =  kw.get("sessionId")
        self._quoteId =  kw.get("quoteId")
        self._couponCode =  kw.get("couponCode")
        self._storeId =  kw.get("storeId")
shoppingCartCouponAddRequest.typecode = Struct(pname=("urn:Magento","shoppingCartCouponAdd"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="quoteId", aname="_quoteId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="couponCode", aname="_couponCode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeId", aname="_storeId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartCouponAddRequest, encoded="urn:Magento")

class shoppingCartCouponAddResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
shoppingCartCouponAddResponse.typecode = Struct(pname=("urn:Magento","shoppingCartCouponAddResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartCouponAddResponse, encoded="urn:Magento")

class shoppingCartCouponRemoveRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        quoteId -- part quoteId
        storeId -- part storeId
        """
        self._sessionId =  kw.get("sessionId")
        self._quoteId =  kw.get("quoteId")
        self._storeId =  kw.get("storeId")
shoppingCartCouponRemoveRequest.typecode = Struct(pname=("urn:Magento","shoppingCartCouponRemove"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="quoteId", aname="_quoteId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeId", aname="_storeId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartCouponRemoveRequest, encoded="urn:Magento")

class shoppingCartCouponRemoveResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
shoppingCartCouponRemoveResponse.typecode = Struct(pname=("urn:Magento","shoppingCartCouponRemoveResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=shoppingCartCouponRemoveResponse, encoded="urn:Magento")

class catalogProductTagListRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        productId -- part productId
        store -- part store
        """
        self._sessionId =  kw.get("sessionId")
        self._productId =  kw.get("productId")
        self._store =  kw.get("store")
catalogProductTagListRequest.typecode = Struct(pname=("urn:Magento","catalogProductTagList"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="productId", aname="_productId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="store", aname="_store", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductTagListRequest, encoded="urn:Magento")

class catalogProductTagListResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductTagListResponse.typecode = Struct(pname=("urn:Magento","catalogProductTagListResponse"), ofwhat=[ns0.catalogProductTagListEntityArray_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductTagListResponse, encoded="urn:Magento")

class catalogProductTagInfoRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        tagId -- part tagId
        store -- part store
        """
        self._sessionId =  kw.get("sessionId")
        self._tagId =  kw.get("tagId")
        self._store =  kw.get("store")
catalogProductTagInfoRequest.typecode = Struct(pname=("urn:Magento","catalogProductTagInfo"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="tagId", aname="_tagId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="store", aname="_store", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductTagInfoRequest, encoded="urn:Magento")

class catalogProductTagInfoResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductTagInfoResponse.typecode = Struct(pname=("urn:Magento","catalogProductTagInfoResponse"), ofwhat=[ns0.catalogProductTagInfoEntity_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductTagInfoResponse, encoded="urn:Magento")

class catalogProductTagAddRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        data -- part data
        """
        self._sessionId =  kw.get("sessionId")
        self._data =  kw.get("data")
catalogProductTagAddRequest.typecode = Struct(pname=("urn:Magento","catalogProductTagAdd"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.catalogProductTagAddEntity_Def(pname="data", aname="_data", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductTagAddRequest, encoded="urn:Magento")

class catalogProductTagAddResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductTagAddResponse.typecode = Struct(pname=("urn:Magento","catalogProductTagAddResponse"), ofwhat=[ns0.associativeArray_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductTagAddResponse, encoded="urn:Magento")

class catalogProductTagUpdateRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        tagId -- part tagId
        data -- part data
        store -- part store
        """
        self._sessionId =  kw.get("sessionId")
        self._tagId =  kw.get("tagId")
        self._data =  kw.get("data")
        self._store =  kw.get("store")
catalogProductTagUpdateRequest.typecode = Struct(pname=("urn:Magento","catalogProductTagUpdate"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="tagId", aname="_tagId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.catalogProductTagUpdateEntity_Def(pname="data", aname="_data", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="store", aname="_store", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductTagUpdateRequest, encoded="urn:Magento")

class catalogProductTagUpdateResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductTagUpdateResponse.typecode = Struct(pname=("urn:Magento","catalogProductTagUpdateResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductTagUpdateResponse, encoded="urn:Magento")

class catalogProductTagRemoveRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        tagId -- part tagId
        """
        self._sessionId =  kw.get("sessionId")
        self._tagId =  kw.get("tagId")
catalogProductTagRemoveRequest.typecode = Struct(pname=("urn:Magento","catalogProductTagRemove"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="tagId", aname="_tagId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductTagRemoveRequest, encoded="urn:Magento")

class catalogProductTagRemoveResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
catalogProductTagRemoveResponse.typecode = Struct(pname=("urn:Magento","catalogProductTagRemoveResponse"), ofwhat=[ZSI.TC.Boolean(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductTagRemoveResponse, encoded="urn:Magento")

class giftMessageForQuoteRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        quoteId -- part quoteId
        giftMessage -- part giftMessage
        storeId -- part storeId
        """
        self._sessionId =  kw.get("sessionId")
        self._quoteId =  kw.get("quoteId")
        self._giftMessage =  kw.get("giftMessage")
        self._storeId =  kw.get("storeId")
giftMessageForQuoteRequest.typecode = Struct(pname=("urn:Magento","giftMessageSetForQuote"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="quoteId", aname="_quoteId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.giftMessageEntity_Def(pname="giftMessage", aname="_giftMessage", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeId", aname="_storeId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=giftMessageForQuoteRequest, encoded="urn:Magento")

class giftMessageForQuoteResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
giftMessageForQuoteResponse.typecode = Struct(pname=("urn:Magento","giftMessageSetForQuoteResponse"), ofwhat=[ns0.giftMessageResponse_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=giftMessageForQuoteResponse, encoded="urn:Magento")

class giftMessageForQuoteItemRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        quoteItemId -- part quoteItemId
        giftMessage -- part giftMessage
        storeId -- part storeId
        """
        self._sessionId =  kw.get("sessionId")
        self._quoteItemId =  kw.get("quoteItemId")
        self._giftMessage =  kw.get("giftMessage")
        self._storeId =  kw.get("storeId")
giftMessageForQuoteItemRequest.typecode = Struct(pname=("urn:Magento","giftMessageSetForQuoteItem"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="quoteItemId", aname="_quoteItemId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.giftMessageEntity_Def(pname="giftMessage", aname="_giftMessage", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeId", aname="_storeId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=giftMessageForQuoteItemRequest, encoded="urn:Magento")

class giftMessageForQuoteItemResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
giftMessageForQuoteItemResponse.typecode = Struct(pname=("urn:Magento","giftMessageSetForQuoteItemResponse"), ofwhat=[ns0.giftMessageResponse_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=giftMessageForQuoteItemResponse, encoded="urn:Magento")

class giftMessageForQuoteProductRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        quoteId -- part quoteId
        productsAndMessages -- part productsAndMessages
        storeId -- part storeId
        """
        self._sessionId =  kw.get("sessionId")
        self._quoteId =  kw.get("quoteId")
        self._productsAndMessages =  kw.get("productsAndMessages")
        self._storeId =  kw.get("storeId")
giftMessageForQuoteProductRequest.typecode = Struct(pname=("urn:Magento","giftMessageSetForQuoteProduct"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="quoteId", aname="_quoteId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.giftMessageAssociativeProductsEntityArray_Def(pname="productsAndMessages", aname="_productsAndMessages", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeId", aname="_storeId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=giftMessageForQuoteProductRequest, encoded="urn:Magento")

class giftMessageForQuoteProductResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        result -- part result
        """
        self._result =  kw.get("result")
giftMessageForQuoteProductResponse.typecode = Struct(pname=("urn:Magento","giftMessageSetForQuoteProductResponse"), ofwhat=[ns0.giftMessageResponseArray_Def(pname="result", aname="_result", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=giftMessageForQuoteProductResponse, encoded="urn:Magento")

class catalogProductDownloadableLinkAddRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        productId -- part productId
        resource -- part resource
        resourceType -- part resourceType
        store -- part store
        identifierType -- part identifierType
        """
        self._sessionId =  kw.get("sessionId")
        self._productId =  kw.get("productId")
        self._resource =  kw.get("resource")
        self._resourceType =  kw.get("resourceType")
        self._store =  kw.get("store")
        self._identifierType =  kw.get("identifierType")
catalogProductDownloadableLinkAddRequest.typecode = Struct(pname=("urn:Magento","catalogProductDownloadableLinkAdd"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="productId", aname="_productId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.catalogProductDownloadableLinkAddEntity_Def(pname="resource", aname="_resource", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="resourceType", aname="_resourceType", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="store", aname="_store", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="identifierType", aname="_identifierType", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductDownloadableLinkAddRequest, encoded="urn:Magento")

class catalogProductDownloadableLinkAddResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        respons -- part respons
        """
        self._respons =  kw.get("respons")
catalogProductDownloadableLinkAddResponse.typecode = Struct(pname=("urn:Magento","catalogProductDownloadableLinkAddResponse"), ofwhat=[ZSI.TCnumbers.Iint(pname="respons", aname="_respons", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductDownloadableLinkAddResponse, encoded="urn:Magento")

class catalogProductDownloadableLinkListRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        productId -- part productId
        store -- part store
        identifierType -- part identifierType
        """
        self._sessionId =  kw.get("sessionId")
        self._productId =  kw.get("productId")
        self._store =  kw.get("store")
        self._identifierType =  kw.get("identifierType")
catalogProductDownloadableLinkListRequest.typecode = Struct(pname=("urn:Magento","catalogProductDownloadableLinkList"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="productId", aname="_productId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="store", aname="_store", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="identifierType", aname="_identifierType", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductDownloadableLinkListRequest, encoded="urn:Magento")

class catalogProductDownloadableLinkListResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        respons -- part respons
        """
        self._respons =  kw.get("respons")
catalogProductDownloadableLinkListResponse.typecode = Struct(pname=("urn:Magento","catalogProductDownloadableLinkListResponse"), ofwhat=[ns0.catalogProductDownloadableLinkInfoEntity_Def(pname="respons", aname="_respons", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductDownloadableLinkListResponse, encoded="urn:Magento")

class catalogProductDownloadableLinkRemoveRequest:
    def __init__(self, **kw):
        """Keyword parameters:
        sessionId -- part sessionId
        linkId -- part linkId
        resourceType -- part resourceType
        """
        self._sessionId =  kw.get("sessionId")
        self._linkId =  kw.get("linkId")
        self._resourceType =  kw.get("resourceType")
catalogProductDownloadableLinkRemoveRequest.typecode = Struct(pname=("urn:Magento","catalogProductDownloadableLinkRemove"), ofwhat=[ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="linkId", aname="_linkId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="resourceType", aname="_resourceType", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductDownloadableLinkRemoveRequest, encoded="urn:Magento")

class catalogProductDownloadableLinkRemoveResponse:
    def __init__(self, **kw):
        """Keyword parameters:
        respons -- part respons
        """
        self._respons =  kw.get("respons")
catalogProductDownloadableLinkRemoveResponse.typecode = Struct(pname=("urn:Magento","catalogProductDownloadableLinkRemoveResponse"), ofwhat=[ZSI.TC.Boolean(pname="respons", aname="_respons", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=catalogProductDownloadableLinkRemoveResponse, encoded="urn:Magento")
