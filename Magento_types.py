##################################################
# file: Magento_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/local/bin/wsdl2py http://127.0.0.1/magento/api/v2_soap?wsdl=1
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://schemas.xmlsoap.org/soap/encoding/
##############################

class ns1:
    targetNamespace = "http://schemas.xmlsoap.org/soap/encoding/"

    class arrayCoordinate_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "arrayCoordinate")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Array_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "Array")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Array_Def.schema
            TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","offset")] = ns1.arrayCoordinate_Def(None)
                self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
                self.attribute_typecode_dict["href"] = ZSI.TC.URI()
                self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._any = []
                    return
            Holder.__name__ = "Array_Holder"
            self.pyclass = Holder

    class Struct_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "Struct")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Struct_Def.schema
            TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
                self.attribute_typecode_dict["href"] = ZSI.TC.URI()
                self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._any = []
                    return
            Holder.__name__ = "Struct_Holder"
            self.pyclass = Holder

    class base64_Def(ZSI.TC.Base64String, TypeDefinition):
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "base64")
        def __init__(self, pname, **kw):
            ZSI.TC.Base64String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class duration_Def(ZSI.TCtimes.Duration, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "duration")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCtimes.Duration.__init__(self, pname, **kw)
            class Holder(tuple):
                typecode = self
            self.pyclass = Holder

    class dateTime_Def(ZSI.TCtimes.gDateTime, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "dateTime")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCtimes.gDateTime.__init__(self, pname, **kw)
            class Holder(tuple):
                typecode = self
            self.pyclass = Holder

    class NOTATION_Def(ZSI.TC.QName, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "NOTATION")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.QName.__init__(self, pname, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class time_Def(ZSI.TCtimes.gTime, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "time")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCtimes.gTime.__init__(self, pname, **kw)
            class Holder(tuple):
                typecode = self
            self.pyclass = Holder

    class date_Def(ZSI.TCtimes.gDate, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "date")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCtimes.gDate.__init__(self, pname, **kw)
            class Holder(tuple):
                typecode = self
            self.pyclass = Holder

    class gYearMonth_Def(ZSI.TCtimes.gYearMonth, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "gYearMonth")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCtimes.gYearMonth.__init__(self, pname, **kw)
            class Holder(tuple):
                typecode = self
            self.pyclass = Holder

    class gYear_Def(ZSI.TCtimes.gYear, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "gYear")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCtimes.gYear.__init__(self, pname, **kw)
            class Holder(tuple):
                typecode = self
            self.pyclass = Holder

    class gMonthDay_Def(ZSI.TCtimes.gMonthDay, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "gMonthDay")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCtimes.gMonthDay.__init__(self, pname, **kw)
            class Holder(tuple):
                typecode = self
            self.pyclass = Holder

    class gDay_Def(ZSI.TCtimes.gDay, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "gDay")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCtimes.gDay.__init__(self, pname, **kw)
            class Holder(tuple):
                typecode = self
            self.pyclass = Holder

    class gMonth_Def(ZSI.TCtimes.gMonth, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "gMonth")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCtimes.gMonth.__init__(self, pname, **kw)
            class Holder(tuple):
                typecode = self
            self.pyclass = Holder

    class boolean_Def(ZSI.TC.Boolean, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "boolean")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.Boolean.__init__(self, pname, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class base64Binary_Def(ZSI.TC.Base64String, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "base64Binary")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.Base64String.__init__(self, pname, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class hexBinary_Def(ZSI.TC.HexBinaryString, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "hexBinary")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.HexBinaryString.__init__(self, pname, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class float_Def(ZSI.TCnumbers.FPfloat, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "float")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCnumbers.FPfloat.__init__(self, pname, **kw)
            class Holder(float):
                typecode = self
            self.pyclass = Holder

    class double_Def(ZSI.TCnumbers.FPdouble, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "double")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCnumbers.FPdouble.__init__(self, pname, **kw)
            class Holder(float):
                typecode = self
            self.pyclass = Holder

    class anyURI_Def(ZSI.TC.URI, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "anyURI")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.URI.__init__(self, pname, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class QName_Def(ZSI.TC.QName, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "QName")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.QName.__init__(self, pname, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class string_Def(ZSI.TC.String, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "string")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.String.__init__(self, pname, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class normalizedString_Def(ZSI.TC.AnyType, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "normalizedString")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.AnyType.__init__(self, pname, **kw)

    class token_Def(ZSI.TC.Token, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "token")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.Token.__init__(self, pname, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class language_Def(ZSI.TC.AnyType, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "language")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.AnyType.__init__(self, pname, **kw)

    class Name_Def(ZSI.TC.AnyType, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "Name")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.AnyType.__init__(self, pname, **kw)

    class NMTOKEN_Def(ZSI.TC.AnyType, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "NMTOKEN")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.AnyType.__init__(self, pname, **kw)

    class NCName_Def(ZSI.TC.AnyType, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "NCName")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.AnyType.__init__(self, pname, **kw)

    class NMTOKENS_Def(ZSI.TC.AnyType, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "NMTOKENS")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.AnyType.__init__(self, pname, **kw)

    class ID_Def(ZSI.TC.AnyType, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "ID")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.AnyType.__init__(self, pname, **kw)

    class IDREF_Def(ZSI.TC.AnyType, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "IDREF")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.AnyType.__init__(self, pname, **kw)

    class ENTITY_Def(ZSI.TC.AnyType, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "ENTITY")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.AnyType.__init__(self, pname, **kw)

    class IDREFS_Def(ZSI.TC.AnyType, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "IDREFS")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.AnyType.__init__(self, pname, **kw)

    class ENTITIES_Def(ZSI.TC.AnyType, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "ENTITIES")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.AnyType.__init__(self, pname, **kw)

    class decimal_Def(ZSI.TC.Decimal, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "decimal")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.Decimal.__init__(self, pname, **kw)
            class Holder(float):
                typecode = self
            self.pyclass = Holder

    class integer_Def(ZSI.TCnumbers.Iinteger, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "integer")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCnumbers.Iinteger.__init__(self, pname, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class nonPositiveInteger_Def(ZSI.TCnumbers.InonPositiveInteger, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "nonPositiveInteger")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCnumbers.InonPositiveInteger.__init__(self, pname, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class negativeInteger_Def(ZSI.TCnumbers.InegativeInteger, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "negativeInteger")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCnumbers.InegativeInteger.__init__(self, pname, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class long_Def(ZSI.TCnumbers.Ilong, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "long")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCnumbers.Ilong.__init__(self, pname, **kw)
            class Holder(long):
                typecode = self
            self.pyclass = Holder

    class int_Def(ZSI.TCnumbers.Iint, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "int")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCnumbers.Iint.__init__(self, pname, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class short_Def(ZSI.TCnumbers.Ishort, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "short")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCnumbers.Ishort.__init__(self, pname, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class byte_Def(ZSI.TCnumbers.Ibyte, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "byte")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCnumbers.Ibyte.__init__(self, pname, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class nonNegativeInteger_Def(ZSI.TCnumbers.InonNegativeInteger, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "nonNegativeInteger")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCnumbers.InonNegativeInteger.__init__(self, pname, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class unsignedLong_Def(ZSI.TCnumbers.IunsignedLong, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "unsignedLong")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCnumbers.IunsignedLong.__init__(self, pname, **kw)
            class Holder(long):
                typecode = self
            self.pyclass = Holder

    class unsignedInt_Def(ZSI.TCnumbers.IunsignedInt, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "unsignedInt")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCnumbers.IunsignedInt.__init__(self, pname, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class unsignedShort_Def(ZSI.TCnumbers.IunsignedShort, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "unsignedShort")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCnumbers.IunsignedShort.__init__(self, pname, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class unsignedByte_Def(ZSI.TCnumbers.IunsignedByte, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "unsignedByte")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCnumbers.IunsignedByte.__init__(self, pname, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class positiveInteger_Def(ZSI.TCnumbers.IpositiveInteger, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "positiveInteger")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCnumbers.IpositiveInteger.__init__(self, pname, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class Array_Dec(ElementDeclaration):
        literal = "Array"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","Array")
            kw["aname"] = "_Array"
            if ns1.Array_Def not in ns1.Array_Dec.__bases__:
                bases = list(ns1.Array_Dec.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns1.Array_Dec.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "Array_Dec_Holder"

    class Struct_Dec(ElementDeclaration):
        literal = "Struct"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","Struct")
            kw["aname"] = "_Struct"
            if ns1.Struct_Def not in ns1.Struct_Dec.__bases__:
                bases = list(ns1.Struct_Dec.__bases__)
                bases.insert(0, ns1.Struct_Def)
                ns1.Struct_Dec.__bases__ = tuple(bases)

            ns1.Struct_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "Struct_Dec_Holder"

    class duration_Dec(ElementDeclaration):
        literal = "duration"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","duration")
            kw["aname"] = "_duration"
            if ns1.duration_Def not in ns1.duration_Dec.__bases__:
                bases = list(ns1.duration_Dec.__bases__)
                bases.insert(0, ns1.duration_Def)
                ns1.duration_Dec.__bases__ = tuple(bases)

            ns1.duration_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "duration_Dec_Holder"

    class dateTime_Dec(ElementDeclaration):
        literal = "dateTime"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","dateTime")
            kw["aname"] = "_dateTime"
            if ns1.dateTime_Def not in ns1.dateTime_Dec.__bases__:
                bases = list(ns1.dateTime_Dec.__bases__)
                bases.insert(0, ns1.dateTime_Def)
                ns1.dateTime_Dec.__bases__ = tuple(bases)

            ns1.dateTime_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "dateTime_Dec_Holder"

    class NOTATION_Dec(ElementDeclaration):
        literal = "NOTATION"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","NOTATION")
            kw["aname"] = "_NOTATION"
            if ns1.NOTATION_Def not in ns1.NOTATION_Dec.__bases__:
                bases = list(ns1.NOTATION_Dec.__bases__)
                bases.insert(0, ns1.NOTATION_Def)
                ns1.NOTATION_Dec.__bases__ = tuple(bases)

            ns1.NOTATION_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "NOTATION_Dec_Holder"

    class time_Dec(ElementDeclaration):
        literal = "time"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","time")
            kw["aname"] = "_time"
            if ns1.time_Def not in ns1.time_Dec.__bases__:
                bases = list(ns1.time_Dec.__bases__)
                bases.insert(0, ns1.time_Def)
                ns1.time_Dec.__bases__ = tuple(bases)

            ns1.time_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "time_Dec_Holder"

    class date_Dec(ElementDeclaration):
        literal = "date"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","date")
            kw["aname"] = "_date"
            if ns1.date_Def not in ns1.date_Dec.__bases__:
                bases = list(ns1.date_Dec.__bases__)
                bases.insert(0, ns1.date_Def)
                ns1.date_Dec.__bases__ = tuple(bases)

            ns1.date_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "date_Dec_Holder"

    class gYearMonth_Dec(ElementDeclaration):
        literal = "gYearMonth"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","gYearMonth")
            kw["aname"] = "_gYearMonth"
            if ns1.gYearMonth_Def not in ns1.gYearMonth_Dec.__bases__:
                bases = list(ns1.gYearMonth_Dec.__bases__)
                bases.insert(0, ns1.gYearMonth_Def)
                ns1.gYearMonth_Dec.__bases__ = tuple(bases)

            ns1.gYearMonth_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "gYearMonth_Dec_Holder"

    class gYear_Dec(ElementDeclaration):
        literal = "gYear"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","gYear")
            kw["aname"] = "_gYear"
            if ns1.gYear_Def not in ns1.gYear_Dec.__bases__:
                bases = list(ns1.gYear_Dec.__bases__)
                bases.insert(0, ns1.gYear_Def)
                ns1.gYear_Dec.__bases__ = tuple(bases)

            ns1.gYear_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "gYear_Dec_Holder"

    class gMonthDay_Dec(ElementDeclaration):
        literal = "gMonthDay"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","gMonthDay")
            kw["aname"] = "_gMonthDay"
            if ns1.gMonthDay_Def not in ns1.gMonthDay_Dec.__bases__:
                bases = list(ns1.gMonthDay_Dec.__bases__)
                bases.insert(0, ns1.gMonthDay_Def)
                ns1.gMonthDay_Dec.__bases__ = tuple(bases)

            ns1.gMonthDay_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "gMonthDay_Dec_Holder"

    class gDay_Dec(ElementDeclaration):
        literal = "gDay"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","gDay")
            kw["aname"] = "_gDay"
            if ns1.gDay_Def not in ns1.gDay_Dec.__bases__:
                bases = list(ns1.gDay_Dec.__bases__)
                bases.insert(0, ns1.gDay_Def)
                ns1.gDay_Dec.__bases__ = tuple(bases)

            ns1.gDay_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "gDay_Dec_Holder"

    class gMonth_Dec(ElementDeclaration):
        literal = "gMonth"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","gMonth")
            kw["aname"] = "_gMonth"
            if ns1.gMonth_Def not in ns1.gMonth_Dec.__bases__:
                bases = list(ns1.gMonth_Dec.__bases__)
                bases.insert(0, ns1.gMonth_Def)
                ns1.gMonth_Dec.__bases__ = tuple(bases)

            ns1.gMonth_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "gMonth_Dec_Holder"

    class boolean_Dec(ElementDeclaration):
        literal = "boolean"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","boolean")
            kw["aname"] = "_boolean"
            if ns1.boolean_Def not in ns1.boolean_Dec.__bases__:
                bases = list(ns1.boolean_Dec.__bases__)
                bases.insert(0, ns1.boolean_Def)
                ns1.boolean_Dec.__bases__ = tuple(bases)

            ns1.boolean_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "boolean_Dec_Holder"

    class base64Binary_Dec(ElementDeclaration):
        literal = "base64Binary"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","base64Binary")
            kw["aname"] = "_base64Binary"
            if ns1.base64Binary_Def not in ns1.base64Binary_Dec.__bases__:
                bases = list(ns1.base64Binary_Dec.__bases__)
                bases.insert(0, ns1.base64Binary_Def)
                ns1.base64Binary_Dec.__bases__ = tuple(bases)

            ns1.base64Binary_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "base64Binary_Dec_Holder"

    class hexBinary_Dec(ElementDeclaration):
        literal = "hexBinary"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","hexBinary")
            kw["aname"] = "_hexBinary"
            if ns1.hexBinary_Def not in ns1.hexBinary_Dec.__bases__:
                bases = list(ns1.hexBinary_Dec.__bases__)
                bases.insert(0, ns1.hexBinary_Def)
                ns1.hexBinary_Dec.__bases__ = tuple(bases)

            ns1.hexBinary_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "hexBinary_Dec_Holder"

    class float_Dec(ElementDeclaration):
        literal = "float"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","float")
            kw["aname"] = "_float"
            if ns1.float_Def not in ns1.float_Dec.__bases__:
                bases = list(ns1.float_Dec.__bases__)
                bases.insert(0, ns1.float_Def)
                ns1.float_Dec.__bases__ = tuple(bases)

            ns1.float_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "float_Dec_Holder"

    class double_Dec(ElementDeclaration):
        literal = "double"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","double")
            kw["aname"] = "_double"
            if ns1.double_Def not in ns1.double_Dec.__bases__:
                bases = list(ns1.double_Dec.__bases__)
                bases.insert(0, ns1.double_Def)
                ns1.double_Dec.__bases__ = tuple(bases)

            ns1.double_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "double_Dec_Holder"

    class anyURI_Dec(ElementDeclaration):
        literal = "anyURI"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","anyURI")
            kw["aname"] = "_anyURI"
            if ns1.anyURI_Def not in ns1.anyURI_Dec.__bases__:
                bases = list(ns1.anyURI_Dec.__bases__)
                bases.insert(0, ns1.anyURI_Def)
                ns1.anyURI_Dec.__bases__ = tuple(bases)

            ns1.anyURI_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "anyURI_Dec_Holder"

    class QName_Dec(ElementDeclaration):
        literal = "QName"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","QName")
            kw["aname"] = "_QName"
            if ns1.QName_Def not in ns1.QName_Dec.__bases__:
                bases = list(ns1.QName_Dec.__bases__)
                bases.insert(0, ns1.QName_Def)
                ns1.QName_Dec.__bases__ = tuple(bases)

            ns1.QName_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "QName_Dec_Holder"

    class string_Dec(ElementDeclaration):
        literal = "string"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","string")
            kw["aname"] = "_string"
            if ns1.string_Def not in ns1.string_Dec.__bases__:
                bases = list(ns1.string_Dec.__bases__)
                bases.insert(0, ns1.string_Def)
                ns1.string_Dec.__bases__ = tuple(bases)

            ns1.string_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "string_Dec_Holder"

    class normalizedString_Dec(ElementDeclaration):
        literal = "normalizedString"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","normalizedString")
            kw["aname"] = "_normalizedString"
            if ns1.normalizedString_Def not in ns1.normalizedString_Dec.__bases__:
                bases = list(ns1.normalizedString_Dec.__bases__)
                bases.insert(0, ns1.normalizedString_Def)
                ns1.normalizedString_Dec.__bases__ = tuple(bases)

            ns1.normalizedString_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "normalizedString_Dec_Holder"

    class token_Dec(ElementDeclaration):
        literal = "token"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","token")
            kw["aname"] = "_token"
            if ns1.token_Def not in ns1.token_Dec.__bases__:
                bases = list(ns1.token_Dec.__bases__)
                bases.insert(0, ns1.token_Def)
                ns1.token_Dec.__bases__ = tuple(bases)

            ns1.token_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "token_Dec_Holder"

    class language_Dec(ElementDeclaration):
        literal = "language"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","language")
            kw["aname"] = "_language"
            if ns1.language_Def not in ns1.language_Dec.__bases__:
                bases = list(ns1.language_Dec.__bases__)
                bases.insert(0, ns1.language_Def)
                ns1.language_Dec.__bases__ = tuple(bases)

            ns1.language_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "language_Dec_Holder"

    class Name_Dec(ElementDeclaration):
        literal = "Name"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","Name")
            kw["aname"] = "_Name"
            if ns1.Name_Def not in ns1.Name_Dec.__bases__:
                bases = list(ns1.Name_Dec.__bases__)
                bases.insert(0, ns1.Name_Def)
                ns1.Name_Dec.__bases__ = tuple(bases)

            ns1.Name_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "Name_Dec_Holder"

    class NMTOKEN_Dec(ElementDeclaration):
        literal = "NMTOKEN"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","NMTOKEN")
            kw["aname"] = "_NMTOKEN"
            if ns1.NMTOKEN_Def not in ns1.NMTOKEN_Dec.__bases__:
                bases = list(ns1.NMTOKEN_Dec.__bases__)
                bases.insert(0, ns1.NMTOKEN_Def)
                ns1.NMTOKEN_Dec.__bases__ = tuple(bases)

            ns1.NMTOKEN_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "NMTOKEN_Dec_Holder"

    class NCName_Dec(ElementDeclaration):
        literal = "NCName"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","NCName")
            kw["aname"] = "_NCName"
            if ns1.NCName_Def not in ns1.NCName_Dec.__bases__:
                bases = list(ns1.NCName_Dec.__bases__)
                bases.insert(0, ns1.NCName_Def)
                ns1.NCName_Dec.__bases__ = tuple(bases)

            ns1.NCName_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "NCName_Dec_Holder"

    class NMTOKENS_Dec(ElementDeclaration):
        literal = "NMTOKENS"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","NMTOKENS")
            kw["aname"] = "_NMTOKENS"
            if ns1.NMTOKENS_Def not in ns1.NMTOKENS_Dec.__bases__:
                bases = list(ns1.NMTOKENS_Dec.__bases__)
                bases.insert(0, ns1.NMTOKENS_Def)
                ns1.NMTOKENS_Dec.__bases__ = tuple(bases)

            ns1.NMTOKENS_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "NMTOKENS_Dec_Holder"

    class ID_Dec(ElementDeclaration):
        literal = "ID"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","ID")
            kw["aname"] = "_ID"
            if ns1.ID_Def not in ns1.ID_Dec.__bases__:
                bases = list(ns1.ID_Dec.__bases__)
                bases.insert(0, ns1.ID_Def)
                ns1.ID_Dec.__bases__ = tuple(bases)

            ns1.ID_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ID_Dec_Holder"

    class IDREF_Dec(ElementDeclaration):
        literal = "IDREF"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","IDREF")
            kw["aname"] = "_IDREF"
            if ns1.IDREF_Def not in ns1.IDREF_Dec.__bases__:
                bases = list(ns1.IDREF_Dec.__bases__)
                bases.insert(0, ns1.IDREF_Def)
                ns1.IDREF_Dec.__bases__ = tuple(bases)

            ns1.IDREF_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "IDREF_Dec_Holder"

    class ENTITY_Dec(ElementDeclaration):
        literal = "ENTITY"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","ENTITY")
            kw["aname"] = "_ENTITY"
            if ns1.ENTITY_Def not in ns1.ENTITY_Dec.__bases__:
                bases = list(ns1.ENTITY_Dec.__bases__)
                bases.insert(0, ns1.ENTITY_Def)
                ns1.ENTITY_Dec.__bases__ = tuple(bases)

            ns1.ENTITY_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ENTITY_Dec_Holder"

    class IDREFS_Dec(ElementDeclaration):
        literal = "IDREFS"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","IDREFS")
            kw["aname"] = "_IDREFS"
            if ns1.IDREFS_Def not in ns1.IDREFS_Dec.__bases__:
                bases = list(ns1.IDREFS_Dec.__bases__)
                bases.insert(0, ns1.IDREFS_Def)
                ns1.IDREFS_Dec.__bases__ = tuple(bases)

            ns1.IDREFS_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "IDREFS_Dec_Holder"

    class ENTITIES_Dec(ElementDeclaration):
        literal = "ENTITIES"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","ENTITIES")
            kw["aname"] = "_ENTITIES"
            if ns1.ENTITIES_Def not in ns1.ENTITIES_Dec.__bases__:
                bases = list(ns1.ENTITIES_Dec.__bases__)
                bases.insert(0, ns1.ENTITIES_Def)
                ns1.ENTITIES_Dec.__bases__ = tuple(bases)

            ns1.ENTITIES_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ENTITIES_Dec_Holder"

    class decimal_Dec(ElementDeclaration):
        literal = "decimal"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","decimal")
            kw["aname"] = "_decimal"
            if ns1.decimal_Def not in ns1.decimal_Dec.__bases__:
                bases = list(ns1.decimal_Dec.__bases__)
                bases.insert(0, ns1.decimal_Def)
                ns1.decimal_Dec.__bases__ = tuple(bases)

            ns1.decimal_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "decimal_Dec_Holder"

    class integer_Dec(ElementDeclaration):
        literal = "integer"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","integer")
            kw["aname"] = "_integer"
            if ns1.integer_Def not in ns1.integer_Dec.__bases__:
                bases = list(ns1.integer_Dec.__bases__)
                bases.insert(0, ns1.integer_Def)
                ns1.integer_Dec.__bases__ = tuple(bases)

            ns1.integer_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "integer_Dec_Holder"

    class nonPositiveInteger_Dec(ElementDeclaration):
        literal = "nonPositiveInteger"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","nonPositiveInteger")
            kw["aname"] = "_nonPositiveInteger"
            if ns1.nonPositiveInteger_Def not in ns1.nonPositiveInteger_Dec.__bases__:
                bases = list(ns1.nonPositiveInteger_Dec.__bases__)
                bases.insert(0, ns1.nonPositiveInteger_Def)
                ns1.nonPositiveInteger_Dec.__bases__ = tuple(bases)

            ns1.nonPositiveInteger_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "nonPositiveInteger_Dec_Holder"

    class negativeInteger_Dec(ElementDeclaration):
        literal = "negativeInteger"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","negativeInteger")
            kw["aname"] = "_negativeInteger"
            if ns1.negativeInteger_Def not in ns1.negativeInteger_Dec.__bases__:
                bases = list(ns1.negativeInteger_Dec.__bases__)
                bases.insert(0, ns1.negativeInteger_Def)
                ns1.negativeInteger_Dec.__bases__ = tuple(bases)

            ns1.negativeInteger_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "negativeInteger_Dec_Holder"

    class long_Dec(ElementDeclaration):
        literal = "long"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","long")
            kw["aname"] = "_long"
            if ns1.long_Def not in ns1.long_Dec.__bases__:
                bases = list(ns1.long_Dec.__bases__)
                bases.insert(0, ns1.long_Def)
                ns1.long_Dec.__bases__ = tuple(bases)

            ns1.long_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "long_Dec_Holder"

    class int_Dec(ElementDeclaration):
        literal = "int"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","int")
            kw["aname"] = "_int"
            if ns1.int_Def not in ns1.int_Dec.__bases__:
                bases = list(ns1.int_Dec.__bases__)
                bases.insert(0, ns1.int_Def)
                ns1.int_Dec.__bases__ = tuple(bases)

            ns1.int_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "int_Dec_Holder"

    class short_Dec(ElementDeclaration):
        literal = "short"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","short")
            kw["aname"] = "_short"
            if ns1.short_Def not in ns1.short_Dec.__bases__:
                bases = list(ns1.short_Dec.__bases__)
                bases.insert(0, ns1.short_Def)
                ns1.short_Dec.__bases__ = tuple(bases)

            ns1.short_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "short_Dec_Holder"

    class byte_Dec(ElementDeclaration):
        literal = "byte"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","byte")
            kw["aname"] = "_byte"
            if ns1.byte_Def not in ns1.byte_Dec.__bases__:
                bases = list(ns1.byte_Dec.__bases__)
                bases.insert(0, ns1.byte_Def)
                ns1.byte_Dec.__bases__ = tuple(bases)

            ns1.byte_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "byte_Dec_Holder"

    class nonNegativeInteger_Dec(ElementDeclaration):
        literal = "nonNegativeInteger"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","nonNegativeInteger")
            kw["aname"] = "_nonNegativeInteger"
            if ns1.nonNegativeInteger_Def not in ns1.nonNegativeInteger_Dec.__bases__:
                bases = list(ns1.nonNegativeInteger_Dec.__bases__)
                bases.insert(0, ns1.nonNegativeInteger_Def)
                ns1.nonNegativeInteger_Dec.__bases__ = tuple(bases)

            ns1.nonNegativeInteger_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "nonNegativeInteger_Dec_Holder"

    class unsignedLong_Dec(ElementDeclaration):
        literal = "unsignedLong"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","unsignedLong")
            kw["aname"] = "_unsignedLong"
            if ns1.unsignedLong_Def not in ns1.unsignedLong_Dec.__bases__:
                bases = list(ns1.unsignedLong_Dec.__bases__)
                bases.insert(0, ns1.unsignedLong_Def)
                ns1.unsignedLong_Dec.__bases__ = tuple(bases)

            ns1.unsignedLong_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "unsignedLong_Dec_Holder"

    class unsignedInt_Dec(ElementDeclaration):
        literal = "unsignedInt"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","unsignedInt")
            kw["aname"] = "_unsignedInt"
            if ns1.unsignedInt_Def not in ns1.unsignedInt_Dec.__bases__:
                bases = list(ns1.unsignedInt_Dec.__bases__)
                bases.insert(0, ns1.unsignedInt_Def)
                ns1.unsignedInt_Dec.__bases__ = tuple(bases)

            ns1.unsignedInt_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "unsignedInt_Dec_Holder"

    class unsignedShort_Dec(ElementDeclaration):
        literal = "unsignedShort"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","unsignedShort")
            kw["aname"] = "_unsignedShort"
            if ns1.unsignedShort_Def not in ns1.unsignedShort_Dec.__bases__:
                bases = list(ns1.unsignedShort_Dec.__bases__)
                bases.insert(0, ns1.unsignedShort_Def)
                ns1.unsignedShort_Dec.__bases__ = tuple(bases)

            ns1.unsignedShort_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "unsignedShort_Dec_Holder"

    class unsignedByte_Dec(ElementDeclaration):
        literal = "unsignedByte"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","unsignedByte")
            kw["aname"] = "_unsignedByte"
            if ns1.unsignedByte_Def not in ns1.unsignedByte_Dec.__bases__:
                bases = list(ns1.unsignedByte_Dec.__bases__)
                bases.insert(0, ns1.unsignedByte_Def)
                ns1.unsignedByte_Dec.__bases__ = tuple(bases)

            ns1.unsignedByte_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "unsignedByte_Dec_Holder"

    class positiveInteger_Dec(ElementDeclaration):
        literal = "positiveInteger"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","positiveInteger")
            kw["aname"] = "_positiveInteger"
            if ns1.positiveInteger_Def not in ns1.positiveInteger_Dec.__bases__:
                bases = list(ns1.positiveInteger_Dec.__bases__)
                bases.insert(0, ns1.positiveInteger_Def)
                ns1.positiveInteger_Dec.__bases__ = tuple(bases)

            ns1.positiveInteger_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "positiveInteger_Dec_Holder"

    class anyType_Dec(ZSI.TC.AnyType, ElementDeclaration):
        literal = "anyType"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","anyType")
            kw["aname"] = "_anyType"
            ZSI.TC.AnyType.__init__(self, **kw)

# end class ns1 (tns: http://schemas.xmlsoap.org/soap/encoding/)

##############################
# targetNamespace
# urn:Magento
##############################

class ns0:
    targetNamespace = "urn:Magento"

    class associativeEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "associativeEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.associativeEntity_Def.schema
            TClist = [ZSI.TC.String(pname="key", aname="_key", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._key = None
                    self._value = None
                    return
            Holder.__name__ = "associativeEntity_Holder"
            self.pyclass = Holder

    class associativeArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "associativeArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.associativeArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.associativeArray_Def.__bases__:
                bases = list(ns0.associativeArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.associativeArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class associativeMultiEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "associativeMultiEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.associativeMultiEntity_Def.schema
            TClist = [ZSI.TC.String(pname="key", aname="_key", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","ArrayOfString",lazy=False)(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._key = None
                    self._value = None
                    return
            Holder.__name__ = "associativeMultiEntity_Holder"
            self.pyclass = Holder

    class associativeMultiArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "associativeMultiArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.associativeMultiArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.associativeMultiArray_Def.__bases__:
                bases = list(ns0.associativeMultiArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.associativeMultiArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class filters_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "filters")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.filters_Def.schema
            TClist = [GTD("urn:Magento","associativeArray",lazy=False)(pname="filter", aname="_filter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","complexFilterArray",lazy=False)(pname="complex_filter", aname="_complex_filter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._filter = None
                    self._complex_filter = None
                    return
            Holder.__name__ = "filters_Holder"
            self.pyclass = Holder

    class complexFilterArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "complexFilterArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.complexFilterArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.complexFilterArray_Def.__bases__:
                bases = list(ns0.complexFilterArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.complexFilterArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class complexFilter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "complexFilter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.complexFilter_Def.schema
            TClist = [ZSI.TC.String(pname="key", aname="_key", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","associativeEntity",lazy=False)(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._key = None
                    self._value = None
                    return
            Holder.__name__ = "complexFilter_Holder"
            self.pyclass = Holder

    class ArrayOfString_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "ArrayOfString")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ArrayOfString_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.ArrayOfString_Def.__bases__:
                bases = list(ns0.ArrayOfString_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.ArrayOfString_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class ArrayOfInt_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "ArrayOfInt")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ArrayOfInt_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.ArrayOfInt_Def.__bases__:
                bases = list(ns0.ArrayOfInt_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.ArrayOfInt_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class apiMethodEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "apiMethodEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.apiMethodEntity_Def.schema
            TClist = [ZSI.TC.String(pname="title", aname="_title", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="path", aname="_path", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","ArrayOfString",lazy=False)(pname="aliases", aname="_aliases", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._title = None
                    self._path = None
                    self._name = None
                    self._aliases = None
                    return
            Holder.__name__ = "apiMethodEntity_Holder"
            self.pyclass = Holder

    class ArrayOfApiMethods_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "ArrayOfApiMethods")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ArrayOfApiMethods_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.ArrayOfApiMethods_Def.__bases__:
                bases = list(ns0.ArrayOfApiMethods_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.ArrayOfApiMethods_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class apiEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "apiEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.apiEntity_Def.schema
            TClist = [ZSI.TC.String(pname="title", aname="_title", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","ArrayOfString",lazy=False)(pname="aliases", aname="_aliases", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","ArrayOfApiMethods",lazy=False)(pname="methods", aname="_methods", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._title = None
                    self._name = None
                    self._aliases = None
                    self._methods = None
                    return
            Holder.__name__ = "apiEntity_Holder"
            self.pyclass = Holder

    class ArrayOfApis_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "ArrayOfApis")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ArrayOfApis_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.ArrayOfApis_Def.__bases__:
                bases = list(ns0.ArrayOfApis_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.ArrayOfApis_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class existsFaltureEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "existsFaltureEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.existsFaltureEntity_Def.schema
            TClist = [ZSI.TC.String(pname="code", aname="_code", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._code = None
                    self._message = None
                    return
            Holder.__name__ = "existsFaltureEntity_Holder"
            self.pyclass = Holder

    class ArrayOfExistsFaltures_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "ArrayOfExistsFaltures")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ArrayOfExistsFaltures_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.ArrayOfExistsFaltures_Def.__bases__:
                bases = list(ns0.ArrayOfExistsFaltures_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.ArrayOfExistsFaltures_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class storeEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "storeEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.storeEntity_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="store_id", aname="_store_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="code", aname="_code", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="website_id", aname="_website_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="group_id", aname="_group_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="sort_order", aname="_sort_order", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_active", aname="_is_active", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._store_id = None
                    self._code = None
                    self._website_id = None
                    self._group_id = None
                    self._name = None
                    self._sort_order = None
                    self._is_active = None
                    return
            Holder.__name__ = "storeEntity_Holder"
            self.pyclass = Holder

    class storeEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "storeEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.storeEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.storeEntityArray_Def.__bases__:
                bases = list(ns0.storeEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.storeEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class magentoInfoEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "magentoInfoEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.magentoInfoEntity_Def.schema
            TClist = [ZSI.TC.String(pname="magento_version", aname="_magento_version", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="magento_edition", aname="_magento_edition", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._magento_version = None
                    self._magento_edition = None
                    return
            Holder.__name__ = "magentoInfoEntity_Holder"
            self.pyclass = Holder

    class directoryCountryEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "directoryCountryEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.directoryCountryEntity_Def.schema
            TClist = [ZSI.TC.String(pname="country_id", aname="_country_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="iso2_code", aname="_iso2_code", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="iso3_code", aname="_iso3_code", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._country_id = None
                    self._iso2_code = None
                    self._iso3_code = None
                    self._name = None
                    return
            Holder.__name__ = "directoryCountryEntity_Holder"
            self.pyclass = Holder

    class directoryCountryEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "directoryCountryEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.directoryCountryEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.directoryCountryEntityArray_Def.__bases__:
                bases = list(ns0.directoryCountryEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.directoryCountryEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class directoryRegionEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "directoryRegionEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.directoryRegionEntity_Def.schema
            TClist = [ZSI.TC.String(pname="region_id", aname="_region_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="code", aname="_code", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._region_id = None
                    self._code = None
                    self._name = None
                    return
            Holder.__name__ = "directoryRegionEntity_Holder"
            self.pyclass = Holder

    class directoryRegionEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "directoryRegionEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.directoryRegionEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.directoryRegionEntityArray_Def.__bases__:
                bases = list(ns0.directoryRegionEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.directoryRegionEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class customerCustomerEntityToCreate_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "customerCustomerEntityToCreate")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.customerCustomerEntityToCreate_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="customer_id", aname="_customer_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="email", aname="_email", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="firstname", aname="_firstname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lastname", aname="_lastname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="website_id", aname="_website_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="store_id", aname="_store_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="group_id", aname="_group_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._customer_id = None
                    self._email = None
                    self._firstname = None
                    self._lastname = None
                    self._password = None
                    self._website_id = None
                    self._store_id = None
                    self._group_id = None
                    return
            Holder.__name__ = "customerCustomerEntityToCreate_Holder"
            self.pyclass = Holder

    class customerCustomerEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "customerCustomerEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.customerCustomerEntity_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="customer_id", aname="_customer_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="created_at", aname="_created_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="updated_at", aname="_updated_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="increment_id", aname="_increment_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="store_id", aname="_store_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="website_id", aname="_website_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="created_in", aname="_created_in", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="email", aname="_email", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="firstname", aname="_firstname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="middlename", aname="_middlename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lastname", aname="_lastname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="group_id", aname="_group_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="prefix", aname="_prefix", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="suffix", aname="_suffix", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dob", aname="_dob", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="taxvat", aname="_taxvat", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="confirmation", aname="_confirmation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password_hash", aname="_password_hash", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._customer_id = None
                    self._created_at = None
                    self._updated_at = None
                    self._increment_id = None
                    self._store_id = None
                    self._website_id = None
                    self._created_in = None
                    self._email = None
                    self._firstname = None
                    self._middlename = None
                    self._lastname = None
                    self._group_id = None
                    self._prefix = None
                    self._suffix = None
                    self._dob = None
                    self._taxvat = None
                    self._confirmation = None
                    self._password_hash = None
                    return
            Holder.__name__ = "customerCustomerEntity_Holder"
            self.pyclass = Holder

    class customerCustomerEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "customerCustomerEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.customerCustomerEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.customerCustomerEntityArray_Def.__bases__:
                bases = list(ns0.customerCustomerEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.customerCustomerEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class customerGroupEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "customerGroupEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.customerGroupEntity_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="customer_group_id", aname="_customer_group_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_group_code", aname="_customer_group_code", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._customer_group_id = None
                    self._customer_group_code = None
                    return
            Holder.__name__ = "customerGroupEntity_Holder"
            self.pyclass = Holder

    class customerGroupEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "customerGroupEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.customerGroupEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.customerGroupEntityArray_Def.__bases__:
                bases = list(ns0.customerGroupEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.customerGroupEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class customerAddressEntityCreate_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "customerAddressEntityCreate")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.customerAddressEntityCreate_Def.schema
            TClist = [ZSI.TC.String(pname="city", aname="_city", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="company", aname="_company", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="country_id", aname="_country_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="fax", aname="_fax", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="firstname", aname="_firstname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lastname", aname="_lastname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="middlename", aname="_middlename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="postcode", aname="_postcode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="prefix", aname="_prefix", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="region_id", aname="_region_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="region", aname="_region", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","ArrayOfString",lazy=False)(pname="street", aname="_street", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="suffix", aname="_suffix", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="telephone", aname="_telephone", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="is_default_billing", aname="_is_default_billing", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="is_default_shipping", aname="_is_default_shipping", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._city = None
                    self._company = None
                    self._country_id = None
                    self._fax = None
                    self._firstname = None
                    self._lastname = None
                    self._middlename = None
                    self._postcode = None
                    self._prefix = None
                    self._region_id = None
                    self._region = None
                    self._street = None
                    self._suffix = None
                    self._telephone = None
                    self._is_default_billing = None
                    self._is_default_shipping = None
                    return
            Holder.__name__ = "customerAddressEntityCreate_Holder"
            self.pyclass = Holder

    class customerAddressEntityItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "customerAddressEntityItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.customerAddressEntityItem_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="customer_address_id", aname="_customer_address_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="created_at", aname="_created_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="updated_at", aname="_updated_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="increment_id", aname="_increment_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="city", aname="_city", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="company", aname="_company", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="country_id", aname="_country_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="fax", aname="_fax", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="firstname", aname="_firstname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lastname", aname="_lastname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="middlename", aname="_middlename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="postcode", aname="_postcode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="prefix", aname="_prefix", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="region", aname="_region", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="region_id", aname="_region_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="street", aname="_street", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="suffix", aname="_suffix", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="telephone", aname="_telephone", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="is_default_billing", aname="_is_default_billing", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="is_default_shipping", aname="_is_default_shipping", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._customer_address_id = None
                    self._created_at = None
                    self._updated_at = None
                    self._increment_id = None
                    self._city = None
                    self._company = None
                    self._country_id = None
                    self._fax = None
                    self._firstname = None
                    self._lastname = None
                    self._middlename = None
                    self._postcode = None
                    self._prefix = None
                    self._region = None
                    self._region_id = None
                    self._street = None
                    self._suffix = None
                    self._telephone = None
                    self._is_default_billing = None
                    self._is_default_shipping = None
                    return
            Holder.__name__ = "customerAddressEntityItem_Holder"
            self.pyclass = Holder

    class customerAddressEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "customerAddressEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.customerAddressEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.customerAddressEntityArray_Def.__bases__:
                bases = list(ns0.customerAddressEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.customerAddressEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class catalogProductEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "catalogProductEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.catalogProductEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.catalogProductEntityArray_Def.__bases__:
                bases = list(ns0.catalogProductEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.catalogProductEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class catalogProductAdditionalAttributesEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductAdditionalAttributesEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductAdditionalAttributesEntity_Def.schema
            TClist = [GTD("urn:Magento","associativeMultiArray",lazy=False)(pname="multi_data", aname="_multi_data", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","associativeArray",lazy=False)(pname="single_data", aname="_single_data", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._multi_data = None
                    self._single_data = None
                    return
            Holder.__name__ = "catalogProductAdditionalAttributesEntity_Holder"
            self.pyclass = Holder

    class catalogProductEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductEntity_Def.schema
            TClist = [ZSI.TC.String(pname="product_id", aname="_product_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sku", aname="_sku", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="set", aname="_set", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","ArrayOfString",lazy=False)(pname="category_ids", aname="_category_ids", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","ArrayOfString",lazy=False)(pname="website_ids", aname="_website_ids", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._product_id = None
                    self._sku = None
                    self._name = None
                    self._set = None
                    self._type = None
                    self._category_ids = None
                    self._website_ids = None
                    return
            Holder.__name__ = "catalogProductEntity_Holder"
            self.pyclass = Holder

    class catalogProductRequestAttributes_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductRequestAttributes")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductRequestAttributes_Def.schema
            TClist = [GTD("urn:Magento","ArrayOfString",lazy=False)(pname="attributes", aname="_attributes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","ArrayOfString",lazy=False)(pname="additional_attributes", aname="_additional_attributes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._attributes = None
                    self._additional_attributes = None
                    return
            Holder.__name__ = "catalogProductRequestAttributes_Holder"
            self.pyclass = Holder

    class catalogProductReturnEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductReturnEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductReturnEntity_Def.schema
            TClist = [ZSI.TC.String(pname="product_id", aname="_product_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sku", aname="_sku", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="set", aname="_set", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","ArrayOfString",lazy=False)(pname="categories", aname="_categories", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","ArrayOfString",lazy=False)(pname="websites", aname="_websites", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="created_at", aname="_created_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="updated_at", aname="_updated_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type_id", aname="_type_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="short_description", aname="_short_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="weight", aname="_weight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="status", aname="_status", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="url_key", aname="_url_key", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="url_path", aname="_url_path", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="visibility", aname="_visibility", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","ArrayOfString",lazy=False)(pname="category_ids", aname="_category_ids", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","ArrayOfString",lazy=False)(pname="website_ids", aname="_website_ids", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="has_options", aname="_has_options", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gift_message_available", aname="_gift_message_available", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="price", aname="_price", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="special_price", aname="_special_price", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="special_from_date", aname="_special_from_date", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="special_to_date", aname="_special_to_date", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tax_class_id", aname="_tax_class_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","catalogProductTierPriceEntityArray",lazy=False)(pname="tier_price", aname="_tier_price", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="meta_title", aname="_meta_title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="meta_keyword", aname="_meta_keyword", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="meta_description", aname="_meta_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="custom_design", aname="_custom_design", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="custom_layout_update", aname="_custom_layout_update", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="options_container", aname="_options_container", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","associativeArray",lazy=False)(pname="additional_attributes", aname="_additional_attributes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="enable_googlecheckout", aname="_enable_googlecheckout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._product_id = None
                    self._sku = None
                    self._set = None
                    self._type = None
                    self._categories = None
                    self._websites = None
                    self._created_at = None
                    self._updated_at = None
                    self._type_id = None
                    self._name = None
                    self._description = None
                    self._short_description = None
                    self._weight = None
                    self._status = None
                    self._url_key = None
                    self._url_path = None
                    self._visibility = None
                    self._category_ids = None
                    self._website_ids = None
                    self._has_options = None
                    self._gift_message_available = None
                    self._price = None
                    self._special_price = None
                    self._special_from_date = None
                    self._special_to_date = None
                    self._tax_class_id = None
                    self._tier_price = None
                    self._meta_title = None
                    self._meta_keyword = None
                    self._meta_description = None
                    self._custom_design = None
                    self._custom_layout_update = None
                    self._options_container = None
                    self._additional_attributes = None
                    self._enable_googlecheckout = None
                    return
            Holder.__name__ = "catalogProductReturnEntity_Holder"
            self.pyclass = Holder

    class catalogProductCreateEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductCreateEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductCreateEntity_Def.schema
            TClist = [GTD("urn:Magento","ArrayOfString",lazy=False)(pname="categories", aname="_categories", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","ArrayOfString",lazy=False)(pname="websites", aname="_websites", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="short_description", aname="_short_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="weight", aname="_weight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="status", aname="_status", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="url_key", aname="_url_key", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="url_path", aname="_url_path", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="visibility", aname="_visibility", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","ArrayOfString",lazy=False)(pname="category_ids", aname="_category_ids", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","ArrayOfString",lazy=False)(pname="website_ids", aname="_website_ids", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="has_options", aname="_has_options", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gift_message_available", aname="_gift_message_available", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="price", aname="_price", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="special_price", aname="_special_price", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="special_from_date", aname="_special_from_date", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="special_to_date", aname="_special_to_date", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tax_class_id", aname="_tax_class_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","catalogProductTierPriceEntityArray",lazy=False)(pname="tier_price", aname="_tier_price", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="meta_title", aname="_meta_title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="meta_keyword", aname="_meta_keyword", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="meta_description", aname="_meta_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="custom_design", aname="_custom_design", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="custom_layout_update", aname="_custom_layout_update", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="options_container", aname="_options_container", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","catalogProductAdditionalAttributesEntity",lazy=False)(pname="additional_attributes", aname="_additional_attributes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","catalogInventoryStockItemUpdateEntity",lazy=False)(pname="stock_data", aname="_stock_data", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._categories = None
                    self._websites = None
                    self._name = None
                    self._description = None
                    self._short_description = None
                    self._weight = None
                    self._status = None
                    self._url_key = None
                    self._url_path = None
                    self._visibility = None
                    self._category_ids = None
                    self._website_ids = None
                    self._has_options = None
                    self._gift_message_available = None
                    self._price = None
                    self._special_price = None
                    self._special_from_date = None
                    self._special_to_date = None
                    self._tax_class_id = None
                    self._tier_price = None
                    self._meta_title = None
                    self._meta_keyword = None
                    self._meta_description = None
                    self._custom_design = None
                    self._custom_layout_update = None
                    self._options_container = None
                    self._additional_attributes = None
                    self._stock_data = None
                    return
            Holder.__name__ = "catalogProductCreateEntity_Holder"
            self.pyclass = Holder

    class catalogProductAttributeSetEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductAttributeSetEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductAttributeSetEntity_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="set_id", aname="_set_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._set_id = None
                    self._name = None
                    return
            Holder.__name__ = "catalogProductAttributeSetEntity_Holder"
            self.pyclass = Holder

    class catalogProductAttributeSetEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "catalogProductAttributeSetEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.catalogProductAttributeSetEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.catalogProductAttributeSetEntityArray_Def.__bases__:
                bases = list(ns0.catalogProductAttributeSetEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.catalogProductAttributeSetEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class catalogProductTypeEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductTypeEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductTypeEntity_Def.schema
            TClist = [ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="label", aname="_label", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._type = None
                    self._label = None
                    return
            Holder.__name__ = "catalogProductTypeEntity_Holder"
            self.pyclass = Holder

    class catalogProductTypeEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "catalogProductTypeEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.catalogProductTypeEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.catalogProductTypeEntityArray_Def.__bases__:
                bases = list(ns0.catalogProductTypeEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.catalogProductTypeEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class catalogProductTierPriceEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductTierPriceEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductTierPriceEntity_Def.schema
            TClist = [ZSI.TC.String(pname="customer_group_id", aname="_customer_group_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="website", aname="_website", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="qty", aname="_qty", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="price", aname="_price", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._customer_group_id = None
                    self._website = None
                    self._qty = None
                    self._price = None
                    return
            Holder.__name__ = "catalogProductTierPriceEntity_Holder"
            self.pyclass = Holder

    class catalogProductTierPriceEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "catalogProductTierPriceEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.catalogProductTierPriceEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.catalogProductTierPriceEntityArray_Def.__bases__:
                bases = list(ns0.catalogProductTierPriceEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.catalogProductTierPriceEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class ArrayOfCatalogCategoryEntities_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "ArrayOfCatalogCategoryEntities")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ArrayOfCatalogCategoryEntities_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.ArrayOfCatalogCategoryEntities_Def.__bases__:
                bases = list(ns0.ArrayOfCatalogCategoryEntities_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.ArrayOfCatalogCategoryEntities_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class catalogCategoryEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogCategoryEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogCategoryEntity_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="category_id", aname="_category_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="parent_id", aname="_parent_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_active", aname="_is_active", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="position", aname="_position", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="level", aname="_level", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","ArrayOfCatalogCategoryEntities",lazy=False)(pname="children", aname="_children", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._category_id = None
                    self._parent_id = None
                    self._name = None
                    self._is_active = None
                    self._position = None
                    self._level = None
                    self._children = None
                    return
            Holder.__name__ = "catalogCategoryEntity_Holder"
            self.pyclass = Holder

    class catalogCategoryEntityNoChildren_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogCategoryEntityNoChildren")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogCategoryEntityNoChildren_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="category_id", aname="_category_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="parent_id", aname="_parent_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_active", aname="_is_active", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="position", aname="_position", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="level", aname="_level", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._category_id = None
                    self._parent_id = None
                    self._name = None
                    self._is_active = None
                    self._position = None
                    self._level = None
                    return
            Holder.__name__ = "catalogCategoryEntityNoChildren_Holder"
            self.pyclass = Holder

    class ArrayOfCatalogCategoryEntitiesNoChildren_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "ArrayOfCatalogCategoryEntitiesNoChildren")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ArrayOfCatalogCategoryEntitiesNoChildren_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.ArrayOfCatalogCategoryEntitiesNoChildren_Def.__bases__:
                bases = list(ns0.ArrayOfCatalogCategoryEntitiesNoChildren_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.ArrayOfCatalogCategoryEntitiesNoChildren_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class catalogCategoryTree_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogCategoryTree")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogCategoryTree_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="category_id", aname="_category_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="parent_id", aname="_parent_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="position", aname="_position", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="level", aname="_level", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","ArrayOfCatalogCategoryEntities",lazy=False)(pname="children", aname="_children", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._category_id = None
                    self._parent_id = None
                    self._name = None
                    self._position = None
                    self._level = None
                    self._children = None
                    return
            Holder.__name__ = "catalogCategoryTree_Holder"
            self.pyclass = Holder

    class catalogCategoryEntityCreate_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogCategoryEntityCreate")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogCategoryEntityCreate_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_active", aname="_is_active", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="position", aname="_position", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","ArrayOfString",lazy=False)(pname="available_sort_by", aname="_available_sort_by", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="custom_design", aname="_custom_design", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="custom_design_apply", aname="_custom_design_apply", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="custom_design_from", aname="_custom_design_from", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="custom_design_to", aname="_custom_design_to", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="custom_layout_update", aname="_custom_layout_update", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="default_sort_by", aname="_default_sort_by", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="display_mode", aname="_display_mode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_anchor", aname="_is_anchor", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="landing_page", aname="_landing_page", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="meta_description", aname="_meta_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="meta_keywords", aname="_meta_keywords", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="meta_title", aname="_meta_title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="page_layout", aname="_page_layout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="url_key", aname="_url_key", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="include_in_menu", aname="_include_in_menu", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._is_active = None
                    self._position = None
                    self._available_sort_by = None
                    self._custom_design = None
                    self._custom_design_apply = None
                    self._custom_design_from = None
                    self._custom_design_to = None
                    self._custom_layout_update = None
                    self._default_sort_by = None
                    self._description = None
                    self._display_mode = None
                    self._is_anchor = None
                    self._landing_page = None
                    self._meta_description = None
                    self._meta_keywords = None
                    self._meta_title = None
                    self._page_layout = None
                    self._url_key = None
                    self._include_in_menu = None
                    return
            Holder.__name__ = "catalogCategoryEntityCreate_Holder"
            self.pyclass = Holder

    class catalogCategoryInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogCategoryInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogCategoryInfo_Def.schema
            TClist = [ZSI.TC.String(pname="category_id", aname="_category_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_active", aname="_is_active", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="position", aname="_position", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="level", aname="_level", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="parent_id", aname="_parent_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="all_children", aname="_all_children", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="children", aname="_children", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="created_at", aname="_created_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="updated_at", aname="_updated_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="url_key", aname="_url_key", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="meta_title", aname="_meta_title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="meta_keywords", aname="_meta_keywords", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="meta_description", aname="_meta_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="path", aname="_path", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="url_path", aname="_url_path", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="children_count", aname="_children_count", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="display_mode", aname="_display_mode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_anchor", aname="_is_anchor", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","ArrayOfString",lazy=False)(pname="available_sort_by", aname="_available_sort_by", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="custom_design", aname="_custom_design", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="custom_design_apply", aname="_custom_design_apply", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="custom_design_from", aname="_custom_design_from", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="custom_design_to", aname="_custom_design_to", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="page_layout", aname="_page_layout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="custom_layout_update", aname="_custom_layout_update", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="default_sort_by", aname="_default_sort_by", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="landing_page", aname="_landing_page", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._category_id = None
                    self._is_active = None
                    self._position = None
                    self._level = None
                    self._parent_id = None
                    self._all_children = None
                    self._children = None
                    self._created_at = None
                    self._updated_at = None
                    self._name = None
                    self._url_key = None
                    self._description = None
                    self._meta_title = None
                    self._meta_keywords = None
                    self._meta_description = None
                    self._path = None
                    self._url_path = None
                    self._children_count = None
                    self._display_mode = None
                    self._is_anchor = None
                    self._available_sort_by = None
                    self._custom_design = None
                    self._custom_design_apply = None
                    self._custom_design_from = None
                    self._custom_design_to = None
                    self._page_layout = None
                    self._custom_layout_update = None
                    self._default_sort_by = None
                    self._landing_page = None
                    return
            Holder.__name__ = "catalogCategoryInfo_Holder"
            self.pyclass = Holder

    class catalogAssignedProduct_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogAssignedProduct")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogAssignedProduct_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="product_id", aname="_product_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="set", aname="_set", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sku", aname="_sku", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="position", aname="_position", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._product_id = None
                    self._type = None
                    self._set = None
                    self._sku = None
                    self._position = None
                    return
            Holder.__name__ = "catalogAssignedProduct_Holder"
            self.pyclass = Holder

    class catalogAssignedProductArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "catalogAssignedProductArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.catalogAssignedProductArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.catalogAssignedProductArray_Def.__bases__:
                bases = list(ns0.catalogAssignedProductArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.catalogAssignedProductArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class catalogAttributeEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogAttributeEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogAttributeEntity_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="attribute_id", aname="_attribute_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="code", aname="_code", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="required", aname="_required", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="scope", aname="_scope", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._attribute_id = None
                    self._code = None
                    self._type = None
                    self._required = None
                    self._scope = None
                    return
            Holder.__name__ = "catalogAttributeEntity_Holder"
            self.pyclass = Holder

    class catalogAttributeEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "catalogAttributeEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.catalogAttributeEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.catalogAttributeEntityArray_Def.__bases__:
                bases = list(ns0.catalogAttributeEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.catalogAttributeEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class catalogAttributeOptionEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogAttributeOptionEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogAttributeOptionEntity_Def.schema
            TClist = [ZSI.TC.String(pname="label", aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._label = None
                    self._value = None
                    return
            Holder.__name__ = "catalogAttributeOptionEntity_Holder"
            self.pyclass = Holder

    class catalogAttributeOptionEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "catalogAttributeOptionEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.catalogAttributeOptionEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.catalogAttributeOptionEntityArray_Def.__bases__:
                bases = list(ns0.catalogAttributeOptionEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.catalogAttributeOptionEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class catalogProductImageEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductImageEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductImageEntity_Def.schema
            TClist = [ZSI.TC.String(pname="file", aname="_file", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="label", aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="position", aname="_position", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="exclude", aname="_exclude", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="url", aname="_url", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","ArrayOfString",lazy=False)(pname="types", aname="_types", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._file = None
                    self._label = None
                    self._position = None
                    self._exclude = None
                    self._url = None
                    self._types = None
                    return
            Holder.__name__ = "catalogProductImageEntity_Holder"
            self.pyclass = Holder

    class catalogProductImageEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "catalogProductImageEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.catalogProductImageEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.catalogProductImageEntityArray_Def.__bases__:
                bases = list(ns0.catalogProductImageEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.catalogProductImageEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class catalogProductAttributeMediaTypeEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductAttributeMediaTypeEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductAttributeMediaTypeEntity_Def.schema
            TClist = [ZSI.TC.String(pname="code", aname="_code", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="scope", aname="_scope", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._code = None
                    self._scope = None
                    return
            Holder.__name__ = "catalogProductAttributeMediaTypeEntity_Holder"
            self.pyclass = Holder

    class catalogProductAttributeMediaTypeEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "catalogProductAttributeMediaTypeEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.catalogProductAttributeMediaTypeEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.catalogProductAttributeMediaTypeEntityArray_Def.__bases__:
                bases = list(ns0.catalogProductAttributeMediaTypeEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.catalogProductAttributeMediaTypeEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class catalogProductImageFileEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductImageFileEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductImageFileEntity_Def.schema
            TClist = [ZSI.TC.String(pname="content", aname="_content", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="mime", aname="_mime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._content = None
                    self._mime = None
                    self._name = None
                    return
            Holder.__name__ = "catalogProductImageFileEntity_Holder"
            self.pyclass = Holder

    class catalogProductAttributeMediaCreateEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductAttributeMediaCreateEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductAttributeMediaCreateEntity_Def.schema
            TClist = [GTD("urn:Magento","catalogProductImageFileEntity",lazy=False)(pname="file", aname="_file", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="label", aname="_label", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="position", aname="_position", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","ArrayOfString",lazy=False)(pname="types", aname="_types", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="exclude", aname="_exclude", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="remove", aname="_remove", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._file = None
                    self._label = None
                    self._position = None
                    self._types = None
                    self._exclude = None
                    self._remove = None
                    return
            Holder.__name__ = "catalogProductAttributeMediaCreateEntity_Holder"
            self.pyclass = Holder

    class catalogProductLinkEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductLinkEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductLinkEntity_Def.schema
            TClist = [ZSI.TC.String(pname="product_id", aname="_product_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="set", aname="_set", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sku", aname="_sku", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="position", aname="_position", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="qty", aname="_qty", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._product_id = None
                    self._type = None
                    self._set = None
                    self._sku = None
                    self._position = None
                    self._qty = None
                    return
            Holder.__name__ = "catalogProductLinkEntity_Holder"
            self.pyclass = Holder

    class catalogProductLinkEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "catalogProductLinkEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.catalogProductLinkEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.catalogProductLinkEntityArray_Def.__bases__:
                bases = list(ns0.catalogProductLinkEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.catalogProductLinkEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class catalogProductLinkAttributeEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductLinkAttributeEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductLinkAttributeEntity_Def.schema
            TClist = [ZSI.TC.String(pname="code", aname="_code", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._code = None
                    self._type = None
                    return
            Holder.__name__ = "catalogProductLinkAttributeEntity_Holder"
            self.pyclass = Holder

    class catalogProductLinkAttributeEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "catalogProductLinkAttributeEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.catalogProductLinkAttributeEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.catalogProductLinkAttributeEntityArray_Def.__bases__:
                bases = list(ns0.catalogProductLinkAttributeEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.catalogProductLinkAttributeEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class catalogProductAttributeFrontendLabelEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductAttributeFrontendLabelEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductAttributeFrontendLabelEntity_Def.schema
            TClist = [ZSI.TC.String(pname="store_id", aname="_store_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="label", aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._store_id = None
                    self._label = None
                    return
            Holder.__name__ = "catalogProductAttributeFrontendLabelEntity_Holder"
            self.pyclass = Holder

    class catalogProductAttributeFrontendLabelArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "catalogProductAttributeFrontendLabelArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.catalogProductAttributeFrontendLabelArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.catalogProductAttributeFrontendLabelArray_Def.__bases__:
                bases = list(ns0.catalogProductAttributeFrontendLabelArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.catalogProductAttributeFrontendLabelArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class catalogProductAttributeEntityToCreate_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductAttributeEntityToCreate")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductAttributeEntityToCreate_Def.schema
            TClist = [ZSI.TC.String(pname="attribute_code", aname="_attribute_code", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="frontend_input", aname="_frontend_input", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="scope", aname="_scope", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="default_value", aname="_default_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_unique", aname="_is_unique", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_required", aname="_is_required", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","ArrayOfString",lazy=False)(pname="apply_to", aname="_apply_to", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_configurable", aname="_is_configurable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_searchable", aname="_is_searchable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_visible_in_advanced_search", aname="_is_visible_in_advanced_search", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_comparable", aname="_is_comparable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_used_for_promo_rules", aname="_is_used_for_promo_rules", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_visible_on_front", aname="_is_visible_on_front", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="used_in_product_listing", aname="_used_in_product_listing", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","associativeArray",lazy=False)(pname="additional_fields", aname="_additional_fields", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","catalogProductAttributeFrontendLabelArray",lazy=False)(pname="frontend_label", aname="_frontend_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._attribute_code = None
                    self._frontend_input = None
                    self._scope = None
                    self._default_value = None
                    self._is_unique = None
                    self._is_required = None
                    self._apply_to = None
                    self._is_configurable = None
                    self._is_searchable = None
                    self._is_visible_in_advanced_search = None
                    self._is_comparable = None
                    self._is_used_for_promo_rules = None
                    self._is_visible_on_front = None
                    self._used_in_product_listing = None
                    self._additional_fields = None
                    self._frontend_label = None
                    return
            Holder.__name__ = "catalogProductAttributeEntityToCreate_Holder"
            self.pyclass = Holder

    class catalogProductAttributeEntityToUpdate_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductAttributeEntityToUpdate")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductAttributeEntityToUpdate_Def.schema
            TClist = [ZSI.TC.String(pname="scope", aname="_scope", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="default_value", aname="_default_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_unique", aname="_is_unique", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_required", aname="_is_required", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","ArrayOfString",lazy=False)(pname="apply_to", aname="_apply_to", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_configurable", aname="_is_configurable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_searchable", aname="_is_searchable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_visible_in_advanced_search", aname="_is_visible_in_advanced_search", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_comparable", aname="_is_comparable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_used_for_promo_rules", aname="_is_used_for_promo_rules", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_visible_on_front", aname="_is_visible_on_front", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="used_in_product_listing", aname="_used_in_product_listing", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","associativeArray",lazy=False)(pname="additional_fields", aname="_additional_fields", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","catalogProductAttributeFrontendLabelArray",lazy=False)(pname="frontend_label", aname="_frontend_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._scope = None
                    self._default_value = None
                    self._is_unique = None
                    self._is_required = None
                    self._apply_to = None
                    self._is_configurable = None
                    self._is_searchable = None
                    self._is_visible_in_advanced_search = None
                    self._is_comparable = None
                    self._is_used_for_promo_rules = None
                    self._is_visible_on_front = None
                    self._used_in_product_listing = None
                    self._additional_fields = None
                    self._frontend_label = None
                    return
            Holder.__name__ = "catalogProductAttributeEntityToUpdate_Holder"
            self.pyclass = Holder

    class catalogProductAttributeEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductAttributeEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductAttributeEntity_Def.schema
            TClist = [ZSI.TC.String(pname="attribute_id", aname="_attribute_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="attribute_code", aname="_attribute_code", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="frontend_input", aname="_frontend_input", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="scope", aname="_scope", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="default_value", aname="_default_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_unique", aname="_is_unique", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_required", aname="_is_required", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","ArrayOfString",lazy=False)(pname="apply_to", aname="_apply_to", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_configurable", aname="_is_configurable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_searchable", aname="_is_searchable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_visible_in_advanced_search", aname="_is_visible_in_advanced_search", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_comparable", aname="_is_comparable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_used_for_promo_rules", aname="_is_used_for_promo_rules", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_visible_on_front", aname="_is_visible_on_front", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="used_in_product_listing", aname="_used_in_product_listing", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","associativeArray",lazy=False)(pname="additional_fields", aname="_additional_fields", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","catalogAttributeOptionEntityArray",lazy=False)(pname="options", aname="_options", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","catalogProductAttributeFrontendLabelArray",lazy=False)(pname="frontend_label", aname="_frontend_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._attribute_id = None
                    self._attribute_code = None
                    self._frontend_input = None
                    self._scope = None
                    self._default_value = None
                    self._is_unique = None
                    self._is_required = None
                    self._apply_to = None
                    self._is_configurable = None
                    self._is_searchable = None
                    self._is_visible_in_advanced_search = None
                    self._is_comparable = None
                    self._is_used_for_promo_rules = None
                    self._is_visible_on_front = None
                    self._used_in_product_listing = None
                    self._additional_fields = None
                    self._options = None
                    self._frontend_label = None
                    return
            Holder.__name__ = "catalogProductAttributeEntity_Holder"
            self.pyclass = Holder

    class catalogProductAttributeOptionLabelEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductAttributeOptionLabelEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductAttributeOptionLabelEntity_Def.schema
            TClist = [GTD("urn:Magento","ArrayOfString",lazy=False)(pname="store_id", aname="_store_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._store_id = None
                    self._value = None
                    return
            Holder.__name__ = "catalogProductAttributeOptionLabelEntity_Holder"
            self.pyclass = Holder

    class catalogProductAttributeOptionLabelArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "catalogProductAttributeOptionLabelArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.catalogProductAttributeOptionLabelArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.catalogProductAttributeOptionLabelArray_Def.__bases__:
                bases = list(ns0.catalogProductAttributeOptionLabelArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.catalogProductAttributeOptionLabelArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class catalogProductAttributeOptionEntityToAdd_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductAttributeOptionEntityToAdd")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductAttributeOptionEntityToAdd_Def.schema
            TClist = [GTD("urn:Magento","catalogProductAttributeOptionLabelArray",lazy=False)(pname="label", aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="order", aname="_order", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_default", aname="_is_default", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._label = None
                    self._order = None
                    self._is_default = None
                    return
            Holder.__name__ = "catalogProductAttributeOptionEntityToAdd_Holder"
            self.pyclass = Holder

    class catalogProductCustomOptionAdditionalFieldsEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductCustomOptionAdditionalFieldsEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductCustomOptionAdditionalFieldsEntity_Def.schema
            TClist = [ZSI.TC.String(pname="title", aname="_title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="price", aname="_price", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="price_type", aname="_price_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sku", aname="_sku", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="max_characters", aname="_max_characters", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sort_order", aname="_sort_order", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="file_extension", aname="_file_extension", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="image_size_x", aname="_image_size_x", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="image_size_y", aname="_image_size_y", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value_id", aname="_value_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._title = None
                    self._price = None
                    self._price_type = None
                    self._sku = None
                    self._max_characters = None
                    self._sort_order = None
                    self._file_extension = None
                    self._image_size_x = None
                    self._image_size_y = None
                    self._value_id = None
                    return
            Holder.__name__ = "catalogProductCustomOptionAdditionalFieldsEntity_Holder"
            self.pyclass = Holder

    class catalogProductCustomOptionAdditionalFieldsArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "catalogProductCustomOptionAdditionalFieldsArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.catalogProductCustomOptionAdditionalFieldsArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.catalogProductCustomOptionAdditionalFieldsArray_Def.__bases__:
                bases = list(ns0.catalogProductCustomOptionAdditionalFieldsArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.catalogProductCustomOptionAdditionalFieldsArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class catalogProductCustomOptionToAdd_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductCustomOptionToAdd")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductCustomOptionToAdd_Def.schema
            TClist = [ZSI.TC.String(pname="title", aname="_title", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sort_order", aname="_sort_order", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_require", aname="_is_require", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","catalogProductCustomOptionAdditionalFieldsArray",lazy=False)(pname="additional_fields", aname="_additional_fields", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._title = None
                    self._type = None
                    self._sort_order = None
                    self._is_require = None
                    self._additional_fields = None
                    return
            Holder.__name__ = "catalogProductCustomOptionToAdd_Holder"
            self.pyclass = Holder

    class catalogProductCustomOptionToUpdate_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductCustomOptionToUpdate")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductCustomOptionToUpdate_Def.schema
            TClist = [ZSI.TC.String(pname="title", aname="_title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sort_order", aname="_sort_order", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_require", aname="_is_require", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","catalogProductCustomOptionAdditionalFieldsArray",lazy=False)(pname="additional_fields", aname="_additional_fields", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._title = None
                    self._type = None
                    self._sort_order = None
                    self._is_require = None
                    self._additional_fields = None
                    return
            Holder.__name__ = "catalogProductCustomOptionToUpdate_Holder"
            self.pyclass = Holder

    class catalogProductCustomOptionInfoEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductCustomOptionInfoEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductCustomOptionInfoEntity_Def.schema
            TClist = [ZSI.TC.String(pname="title", aname="_title", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sort_order", aname="_sort_order", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_require", aname="_is_require", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","catalogProductCustomOptionAdditionalFieldsArray",lazy=False)(pname="additional_fields", aname="_additional_fields", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._title = None
                    self._type = None
                    self._sort_order = None
                    self._is_require = None
                    self._additional_fields = None
                    return
            Holder.__name__ = "catalogProductCustomOptionInfoEntity_Holder"
            self.pyclass = Holder

    class catalogProductCustomOptionListEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductCustomOptionListEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductCustomOptionListEntity_Def.schema
            TClist = [ZSI.TC.String(pname="option_id", aname="_option_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="title", aname="_title", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sort_order", aname="_sort_order", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_require", aname="_is_require", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._option_id = None
                    self._title = None
                    self._type = None
                    self._sort_order = None
                    self._is_require = None
                    return
            Holder.__name__ = "catalogProductCustomOptionListEntity_Holder"
            self.pyclass = Holder

    class catalogProductCustomOptionListArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "catalogProductCustomOptionListArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.catalogProductCustomOptionListArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.catalogProductCustomOptionListArray_Def.__bases__:
                bases = list(ns0.catalogProductCustomOptionListArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.catalogProductCustomOptionListArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class catalogProductCustomOptionTypesEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductCustomOptionTypesEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductCustomOptionTypesEntity_Def.schema
            TClist = [ZSI.TC.String(pname="label", aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._label = None
                    self._value = None
                    return
            Holder.__name__ = "catalogProductCustomOptionTypesEntity_Holder"
            self.pyclass = Holder

    class catalogProductCustomOptionTypesArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "catalogProductCustomOptionTypesArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.catalogProductCustomOptionTypesArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.catalogProductCustomOptionTypesArray_Def.__bases__:
                bases = list(ns0.catalogProductCustomOptionTypesArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.catalogProductCustomOptionTypesArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class catalogProductCustomOptionValueInfoEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductCustomOptionValueInfoEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductCustomOptionValueInfoEntity_Def.schema
            TClist = [ZSI.TC.String(pname="value_id", aname="_value_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="option_id", aname="_option_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sku", aname="_sku", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sort_order", aname="_sort_order", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="default_price", aname="_default_price", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="default_price_type", aname="_default_price_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="store_price", aname="_store_price", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="store_price_type", aname="_store_price_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="price", aname="_price", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="price_type", aname="_price_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="default_title", aname="_default_title", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="store_title", aname="_store_title", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="title", aname="_title", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._value_id = None
                    self._option_id = None
                    self._sku = None
                    self._sort_order = None
                    self._default_price = None
                    self._default_price_type = None
                    self._store_price = None
                    self._store_price_type = None
                    self._price = None
                    self._price_type = None
                    self._default_title = None
                    self._store_title = None
                    self._title = None
                    return
            Holder.__name__ = "catalogProductCustomOptionValueInfoEntity_Holder"
            self.pyclass = Holder

    class catalogProductCustomOptionValueListEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductCustomOptionValueListEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductCustomOptionValueListEntity_Def.schema
            TClist = [ZSI.TC.String(pname="value_id", aname="_value_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="title", aname="_title", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="price", aname="_price", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="price_type", aname="_price_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sku", aname="_sku", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sort_order", aname="_sort_order", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._value_id = None
                    self._title = None
                    self._price = None
                    self._price_type = None
                    self._sku = None
                    self._sort_order = None
                    return
            Holder.__name__ = "catalogProductCustomOptionValueListEntity_Holder"
            self.pyclass = Holder

    class catalogProductCustomOptionValueListArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "catalogProductCustomOptionValueListArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.catalogProductCustomOptionValueListArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.catalogProductCustomOptionValueListArray_Def.__bases__:
                bases = list(ns0.catalogProductCustomOptionValueListArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.catalogProductCustomOptionValueListArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class catalogProductCustomOptionValueAddEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductCustomOptionValueAddEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductCustomOptionValueAddEntity_Def.schema
            TClist = [ZSI.TC.String(pname="title", aname="_title", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="price", aname="_price", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="price_type", aname="_price_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sku", aname="_sku", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sort_order", aname="_sort_order", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._title = None
                    self._price = None
                    self._price_type = None
                    self._sku = None
                    self._sort_order = None
                    return
            Holder.__name__ = "catalogProductCustomOptionValueAddEntity_Holder"
            self.pyclass = Holder

    class catalogProductCustomOptionValueAddArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "catalogProductCustomOptionValueAddArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.catalogProductCustomOptionValueAddArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.catalogProductCustomOptionValueAddArray_Def.__bases__:
                bases = list(ns0.catalogProductCustomOptionValueAddArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.catalogProductCustomOptionValueAddArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class catalogProductCustomOptionValueUpdateEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductCustomOptionValueUpdateEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductCustomOptionValueUpdateEntity_Def.schema
            TClist = [ZSI.TC.String(pname="title", aname="_title", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="price", aname="_price", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="price_type", aname="_price_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sku", aname="_sku", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sort_order", aname="_sort_order", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._title = None
                    self._price = None
                    self._price_type = None
                    self._sku = None
                    self._sort_order = None
                    return
            Holder.__name__ = "catalogProductCustomOptionValueUpdateEntity_Holder"
            self.pyclass = Holder

    class salesOrderEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "salesOrderEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.salesOrderEntity_Def.schema
            TClist = [ZSI.TC.String(pname="increment_id", aname="_increment_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="parent_id", aname="_parent_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="store_id", aname="_store_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="created_at", aname="_created_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="updated_at", aname="_updated_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="is_active", aname="_is_active", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_id", aname="_customer_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tax_amount", aname="_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_amount", aname="_shipping_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="discount_amount", aname="_discount_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="subtotal", aname="_subtotal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="grand_total", aname="_grand_total", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="total_paid", aname="_total_paid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="total_refunded", aname="_total_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="total_qty_ordered", aname="_total_qty_ordered", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="total_canceled", aname="_total_canceled", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="total_invoiced", aname="_total_invoiced", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="total_online_refunded", aname="_total_online_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="total_offline_refunded", aname="_total_offline_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_tax_amount", aname="_base_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_shipping_amount", aname="_base_shipping_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_discount_amount", aname="_base_discount_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_subtotal", aname="_base_subtotal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_grand_total", aname="_base_grand_total", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_total_paid", aname="_base_total_paid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_total_refunded", aname="_base_total_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_total_qty_ordered", aname="_base_total_qty_ordered", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_total_canceled", aname="_base_total_canceled", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_total_invoiced", aname="_base_total_invoiced", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_total_online_refunded", aname="_base_total_online_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_total_offline_refunded", aname="_base_total_offline_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="billing_address_id", aname="_billing_address_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="billing_firstname", aname="_billing_firstname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="billing_lastname", aname="_billing_lastname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_address_id", aname="_shipping_address_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_firstname", aname="_shipping_firstname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_lastname", aname="_shipping_lastname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="billing_name", aname="_billing_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_name", aname="_shipping_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="store_to_base_rate", aname="_store_to_base_rate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="store_to_order_rate", aname="_store_to_order_rate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_to_global_rate", aname="_base_to_global_rate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_to_order_rate", aname="_base_to_order_rate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="weight", aname="_weight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="store_name", aname="_store_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="remote_ip", aname="_remote_ip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="status", aname="_status", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="applied_rule_ids", aname="_applied_rule_ids", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="global_currency_code", aname="_global_currency_code", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_currency_code", aname="_base_currency_code", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="store_currency_code", aname="_store_currency_code", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="order_currency_code", aname="_order_currency_code", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_method", aname="_shipping_method", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_description", aname="_shipping_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_email", aname="_customer_email", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_firstname", aname="_customer_firstname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_lastname", aname="_customer_lastname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="quote_id", aname="_quote_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="is_virtual", aname="_is_virtual", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_group_id", aname="_customer_group_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_note_notify", aname="_customer_note_notify", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_is_guest", aname="_customer_is_guest", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="email_sent", aname="_email_sent", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="order_id", aname="_order_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gift_message_id", aname="_gift_message_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gift_message", aname="_gift_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","salesOrderAddressEntity",lazy=False)(pname="shipping_address", aname="_shipping_address", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","salesOrderAddressEntity",lazy=False)(pname="billing_address", aname="_billing_address", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","salesOrderItemEntityArray",lazy=False)(pname="items", aname="_items", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","salesOrderPaymentEntity",lazy=False)(pname="payment", aname="_payment", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","salesOrderStatusHistoryEntityArray",lazy=False)(pname="status_history", aname="_status_history", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._increment_id = None
                    self._parent_id = None
                    self._store_id = None
                    self._created_at = None
                    self._updated_at = None
                    self._is_active = None
                    self._customer_id = None
                    self._tax_amount = None
                    self._shipping_amount = None
                    self._discount_amount = None
                    self._subtotal = None
                    self._grand_total = None
                    self._total_paid = None
                    self._total_refunded = None
                    self._total_qty_ordered = None
                    self._total_canceled = None
                    self._total_invoiced = None
                    self._total_online_refunded = None
                    self._total_offline_refunded = None
                    self._base_tax_amount = None
                    self._base_shipping_amount = None
                    self._base_discount_amount = None
                    self._base_subtotal = None
                    self._base_grand_total = None
                    self._base_total_paid = None
                    self._base_total_refunded = None
                    self._base_total_qty_ordered = None
                    self._base_total_canceled = None
                    self._base_total_invoiced = None
                    self._base_total_online_refunded = None
                    self._base_total_offline_refunded = None
                    self._billing_address_id = None
                    self._billing_firstname = None
                    self._billing_lastname = None
                    self._shipping_address_id = None
                    self._shipping_firstname = None
                    self._shipping_lastname = None
                    self._billing_name = None
                    self._shipping_name = None
                    self._store_to_base_rate = None
                    self._store_to_order_rate = None
                    self._base_to_global_rate = None
                    self._base_to_order_rate = None
                    self._weight = None
                    self._store_name = None
                    self._remote_ip = None
                    self._status = None
                    self._state = None
                    self._applied_rule_ids = None
                    self._global_currency_code = None
                    self._base_currency_code = None
                    self._store_currency_code = None
                    self._order_currency_code = None
                    self._shipping_method = None
                    self._shipping_description = None
                    self._customer_email = None
                    self._customer_firstname = None
                    self._customer_lastname = None
                    self._quote_id = None
                    self._is_virtual = None
                    self._customer_group_id = None
                    self._customer_note_notify = None
                    self._customer_is_guest = None
                    self._email_sent = None
                    self._order_id = None
                    self._gift_message_id = None
                    self._gift_message = None
                    self._shipping_address = None
                    self._billing_address = None
                    self._items = None
                    self._payment = None
                    self._status_history = None
                    return
            Holder.__name__ = "salesOrderEntity_Holder"
            self.pyclass = Holder

    class salesOrderListEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "salesOrderListEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.salesOrderListEntity_Def.schema
            TClist = [ZSI.TC.String(pname="increment_id", aname="_increment_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="store_id", aname="_store_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="created_at", aname="_created_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="updated_at", aname="_updated_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_id", aname="_customer_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tax_amount", aname="_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_amount", aname="_shipping_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="discount_amount", aname="_discount_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="subtotal", aname="_subtotal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="grand_total", aname="_grand_total", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="total_paid", aname="_total_paid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="total_refunded", aname="_total_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="total_qty_ordered", aname="_total_qty_ordered", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="total_canceled", aname="_total_canceled", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="total_invoiced", aname="_total_invoiced", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="total_online_refunded", aname="_total_online_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="total_offline_refunded", aname="_total_offline_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_tax_amount", aname="_base_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_shipping_amount", aname="_base_shipping_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_discount_amount", aname="_base_discount_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_subtotal", aname="_base_subtotal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_grand_total", aname="_base_grand_total", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_total_paid", aname="_base_total_paid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_total_refunded", aname="_base_total_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_total_qty_ordered", aname="_base_total_qty_ordered", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_total_canceled", aname="_base_total_canceled", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_total_invoiced", aname="_base_total_invoiced", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_total_online_refunded", aname="_base_total_online_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_total_offline_refunded", aname="_base_total_offline_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="billing_address_id", aname="_billing_address_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="billing_firstname", aname="_billing_firstname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="billing_lastname", aname="_billing_lastname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_address_id", aname="_shipping_address_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_firstname", aname="_shipping_firstname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_lastname", aname="_shipping_lastname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="billing_name", aname="_billing_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_name", aname="_shipping_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="store_to_base_rate", aname="_store_to_base_rate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="store_to_order_rate", aname="_store_to_order_rate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_to_global_rate", aname="_base_to_global_rate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_to_order_rate", aname="_base_to_order_rate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="weight", aname="_weight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="store_name", aname="_store_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="remote_ip", aname="_remote_ip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="status", aname="_status", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="applied_rule_ids", aname="_applied_rule_ids", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="global_currency_code", aname="_global_currency_code", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_currency_code", aname="_base_currency_code", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="store_currency_code", aname="_store_currency_code", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="order_currency_code", aname="_order_currency_code", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_method", aname="_shipping_method", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_description", aname="_shipping_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_email", aname="_customer_email", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_firstname", aname="_customer_firstname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_lastname", aname="_customer_lastname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="quote_id", aname="_quote_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="is_virtual", aname="_is_virtual", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_group_id", aname="_customer_group_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_note_notify", aname="_customer_note_notify", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_is_guest", aname="_customer_is_guest", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="email_sent", aname="_email_sent", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="order_id", aname="_order_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gift_message_id", aname="_gift_message_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="coupon_code", aname="_coupon_code", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="protect_code", aname="_protect_code", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_discount_canceled", aname="_base_discount_canceled", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_discount_invoiced", aname="_base_discount_invoiced", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_discount_refunded", aname="_base_discount_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_shipping_canceled", aname="_base_shipping_canceled", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_shipping_invoiced", aname="_base_shipping_invoiced", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_shipping_refunded", aname="_base_shipping_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_shipping_tax_amount", aname="_base_shipping_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_shipping_tax_refunded", aname="_base_shipping_tax_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_subtotal_canceled", aname="_base_subtotal_canceled", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_subtotal_invoiced", aname="_base_subtotal_invoiced", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_subtotal_refunded", aname="_base_subtotal_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_tax_canceled", aname="_base_tax_canceled", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_tax_invoiced", aname="_base_tax_invoiced", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_tax_refunded", aname="_base_tax_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_total_invoiced_cost", aname="_base_total_invoiced_cost", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="discount_canceled", aname="_discount_canceled", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="discount_invoiced", aname="_discount_invoiced", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="discount_refunded", aname="_discount_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_canceled", aname="_shipping_canceled", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_invoiced", aname="_shipping_invoiced", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_refunded", aname="_shipping_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_tax_amount", aname="_shipping_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_tax_refunded", aname="_shipping_tax_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="subtotal_canceled", aname="_subtotal_canceled", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="subtotal_invoiced", aname="_subtotal_invoiced", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="subtotal_refunded", aname="_subtotal_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tax_canceled", aname="_tax_canceled", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tax_invoiced", aname="_tax_invoiced", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tax_refunded", aname="_tax_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="can_ship_partially", aname="_can_ship_partially", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="can_ship_partially_item", aname="_can_ship_partially_item", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="edit_increment", aname="_edit_increment", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="forced_do_shipment_with_invoice", aname="_forced_do_shipment_with_invoice", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="payment_authorization_expiration", aname="_payment_authorization_expiration", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="paypal_ipn_customer_notified", aname="_paypal_ipn_customer_notified", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="quote_address_id", aname="_quote_address_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="adjustment_negative", aname="_adjustment_negative", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="adjustment_positive", aname="_adjustment_positive", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_adjustment_negative", aname="_base_adjustment_negative", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_adjustment_positive", aname="_base_adjustment_positive", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_shipping_discount_amount", aname="_base_shipping_discount_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_subtotal_incl_tax", aname="_base_subtotal_incl_tax", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_total_due", aname="_base_total_due", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="payment_authorization_amount", aname="_payment_authorization_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_discount_amount", aname="_shipping_discount_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="subtotal_incl_tax", aname="_subtotal_incl_tax", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="total_due", aname="_total_due", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_dob", aname="_customer_dob", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_middlename", aname="_customer_middlename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_prefix", aname="_customer_prefix", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_suffix", aname="_customer_suffix", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_taxvat", aname="_customer_taxvat", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="discount_description", aname="_discount_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ext_customer_id", aname="_ext_customer_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ext_order_id", aname="_ext_order_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hold_before_state", aname="_hold_before_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hold_before_status", aname="_hold_before_status", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="original_increment_id", aname="_original_increment_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="relation_child_id", aname="_relation_child_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="relation_child_real_id", aname="_relation_child_real_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="relation_parent_id", aname="_relation_parent_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="relation_parent_real_id", aname="_relation_parent_real_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="x_forwarded_for", aname="_x_forwarded_for", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_note", aname="_customer_note", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="total_item_count", aname="_total_item_count", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_gender", aname="_customer_gender", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hidden_tax_amount", aname="_hidden_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_hidden_tax_amount", aname="_base_hidden_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_hidden_tax_amount", aname="_shipping_hidden_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_shipping_hidden_tax_amount", aname="_base_shipping_hidden_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hidden_tax_invoiced", aname="_hidden_tax_invoiced", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_hidden_tax_invoiced", aname="_base_hidden_tax_invoiced", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hidden_tax_refunded", aname="_hidden_tax_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_hidden_tax_refunded", aname="_base_hidden_tax_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_incl_tax", aname="_shipping_incl_tax", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_shipping_incl_tax", aname="_base_shipping_incl_tax", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_customer_balance_amount", aname="_base_customer_balance_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_balance_amount", aname="_customer_balance_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_customer_balance_invoiced", aname="_base_customer_balance_invoiced", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_balance_invoiced", aname="_customer_balance_invoiced", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_customer_balance_refunded", aname="_base_customer_balance_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_balance_refunded", aname="_customer_balance_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_customer_balance_total_refunded", aname="_base_customer_balance_total_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_balance_total_refunded", aname="_customer_balance_total_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gift_cards", aname="_gift_cards", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_gift_cards_amount", aname="_base_gift_cards_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gift_cards_amount", aname="_gift_cards_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_gift_cards_invoiced", aname="_base_gift_cards_invoiced", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gift_cards_invoiced", aname="_gift_cards_invoiced", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_gift_cards_refunded", aname="_base_gift_cards_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gift_cards_refunded", aname="_gift_cards_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reward_points_balance", aname="_reward_points_balance", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_reward_currency_amount", aname="_base_reward_currency_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reward_currency_amount", aname="_reward_currency_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_reward_currency_amount_invoiced", aname="_base_reward_currency_amount_invoiced", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reward_currency_amount_invoiced", aname="_reward_currency_amount_invoiced", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_reward_currency_amount_refunded", aname="_base_reward_currency_amount_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reward_currency_amount_refunded", aname="_reward_currency_amount_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reward_points_balance_refunded", aname="_reward_points_balance_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reward_points_balance_to_refund", aname="_reward_points_balance_to_refund", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reward_salesrule_points", aname="_reward_salesrule_points", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="firstname", aname="_firstname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lastname", aname="_lastname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="telephone", aname="_telephone", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="postcode", aname="_postcode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._increment_id = None
                    self._store_id = None
                    self._created_at = None
                    self._updated_at = None
                    self._customer_id = None
                    self._tax_amount = None
                    self._shipping_amount = None
                    self._discount_amount = None
                    self._subtotal = None
                    self._grand_total = None
                    self._total_paid = None
                    self._total_refunded = None
                    self._total_qty_ordered = None
                    self._total_canceled = None
                    self._total_invoiced = None
                    self._total_online_refunded = None
                    self._total_offline_refunded = None
                    self._base_tax_amount = None
                    self._base_shipping_amount = None
                    self._base_discount_amount = None
                    self._base_subtotal = None
                    self._base_grand_total = None
                    self._base_total_paid = None
                    self._base_total_refunded = None
                    self._base_total_qty_ordered = None
                    self._base_total_canceled = None
                    self._base_total_invoiced = None
                    self._base_total_online_refunded = None
                    self._base_total_offline_refunded = None
                    self._billing_address_id = None
                    self._billing_firstname = None
                    self._billing_lastname = None
                    self._shipping_address_id = None
                    self._shipping_firstname = None
                    self._shipping_lastname = None
                    self._billing_name = None
                    self._shipping_name = None
                    self._store_to_base_rate = None
                    self._store_to_order_rate = None
                    self._base_to_global_rate = None
                    self._base_to_order_rate = None
                    self._weight = None
                    self._store_name = None
                    self._remote_ip = None
                    self._status = None
                    self._state = None
                    self._applied_rule_ids = None
                    self._global_currency_code = None
                    self._base_currency_code = None
                    self._store_currency_code = None
                    self._order_currency_code = None
                    self._shipping_method = None
                    self._shipping_description = None
                    self._customer_email = None
                    self._customer_firstname = None
                    self._customer_lastname = None
                    self._quote_id = None
                    self._is_virtual = None
                    self._customer_group_id = None
                    self._customer_note_notify = None
                    self._customer_is_guest = None
                    self._email_sent = None
                    self._order_id = None
                    self._gift_message_id = None
                    self._coupon_code = None
                    self._protect_code = None
                    self._base_discount_canceled = None
                    self._base_discount_invoiced = None
                    self._base_discount_refunded = None
                    self._base_shipping_canceled = None
                    self._base_shipping_invoiced = None
                    self._base_shipping_refunded = None
                    self._base_shipping_tax_amount = None
                    self._base_shipping_tax_refunded = None
                    self._base_subtotal_canceled = None
                    self._base_subtotal_invoiced = None
                    self._base_subtotal_refunded = None
                    self._base_tax_canceled = None
                    self._base_tax_invoiced = None
                    self._base_tax_refunded = None
                    self._base_total_invoiced_cost = None
                    self._discount_canceled = None
                    self._discount_invoiced = None
                    self._discount_refunded = None
                    self._shipping_canceled = None
                    self._shipping_invoiced = None
                    self._shipping_refunded = None
                    self._shipping_tax_amount = None
                    self._shipping_tax_refunded = None
                    self._subtotal_canceled = None
                    self._subtotal_invoiced = None
                    self._subtotal_refunded = None
                    self._tax_canceled = None
                    self._tax_invoiced = None
                    self._tax_refunded = None
                    self._can_ship_partially = None
                    self._can_ship_partially_item = None
                    self._edit_increment = None
                    self._forced_do_shipment_with_invoice = None
                    self._payment_authorization_expiration = None
                    self._paypal_ipn_customer_notified = None
                    self._quote_address_id = None
                    self._adjustment_negative = None
                    self._adjustment_positive = None
                    self._base_adjustment_negative = None
                    self._base_adjustment_positive = None
                    self._base_shipping_discount_amount = None
                    self._base_subtotal_incl_tax = None
                    self._base_total_due = None
                    self._payment_authorization_amount = None
                    self._shipping_discount_amount = None
                    self._subtotal_incl_tax = None
                    self._total_due = None
                    self._customer_dob = None
                    self._customer_middlename = None
                    self._customer_prefix = None
                    self._customer_suffix = None
                    self._customer_taxvat = None
                    self._discount_description = None
                    self._ext_customer_id = None
                    self._ext_order_id = None
                    self._hold_before_state = None
                    self._hold_before_status = None
                    self._original_increment_id = None
                    self._relation_child_id = None
                    self._relation_child_real_id = None
                    self._relation_parent_id = None
                    self._relation_parent_real_id = None
                    self._x_forwarded_for = None
                    self._customer_note = None
                    self._total_item_count = None
                    self._customer_gender = None
                    self._hidden_tax_amount = None
                    self._base_hidden_tax_amount = None
                    self._shipping_hidden_tax_amount = None
                    self._base_shipping_hidden_tax_amount = None
                    self._hidden_tax_invoiced = None
                    self._base_hidden_tax_invoiced = None
                    self._hidden_tax_refunded = None
                    self._base_hidden_tax_refunded = None
                    self._shipping_incl_tax = None
                    self._base_shipping_incl_tax = None
                    self._base_customer_balance_amount = None
                    self._customer_balance_amount = None
                    self._base_customer_balance_invoiced = None
                    self._customer_balance_invoiced = None
                    self._base_customer_balance_refunded = None
                    self._customer_balance_refunded = None
                    self._base_customer_balance_total_refunded = None
                    self._customer_balance_total_refunded = None
                    self._gift_cards = None
                    self._base_gift_cards_amount = None
                    self._gift_cards_amount = None
                    self._base_gift_cards_invoiced = None
                    self._gift_cards_invoiced = None
                    self._base_gift_cards_refunded = None
                    self._gift_cards_refunded = None
                    self._reward_points_balance = None
                    self._base_reward_currency_amount = None
                    self._reward_currency_amount = None
                    self._base_reward_currency_amount_invoiced = None
                    self._reward_currency_amount_invoiced = None
                    self._base_reward_currency_amount_refunded = None
                    self._reward_currency_amount_refunded = None
                    self._reward_points_balance_refunded = None
                    self._reward_points_balance_to_refund = None
                    self._reward_salesrule_points = None
                    self._firstname = None
                    self._lastname = None
                    self._telephone = None
                    self._postcode = None
                    return
            Holder.__name__ = "salesOrderListEntity_Holder"
            self.pyclass = Holder

    class salesOrderListEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "salesOrderListEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.salesOrderListEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.salesOrderListEntityArray_Def.__bases__:
                bases = list(ns0.salesOrderListEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.salesOrderListEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class salesOrderAddressEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "salesOrderAddressEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.salesOrderAddressEntity_Def.schema
            TClist = [ZSI.TC.String(pname="increment_id", aname="_increment_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="parent_id", aname="_parent_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="created_at", aname="_created_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="updated_at", aname="_updated_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="is_active", aname="_is_active", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address_type", aname="_address_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="firstname", aname="_firstname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lastname", aname="_lastname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="company", aname="_company", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="street", aname="_street", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="city", aname="_city", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="region", aname="_region", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="postcode", aname="_postcode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="country_id", aname="_country_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="telephone", aname="_telephone", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="fax", aname="_fax", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="region_id", aname="_region_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address_id", aname="_address_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._increment_id = None
                    self._parent_id = None
                    self._created_at = None
                    self._updated_at = None
                    self._is_active = None
                    self._address_type = None
                    self._firstname = None
                    self._lastname = None
                    self._company = None
                    self._street = None
                    self._city = None
                    self._region = None
                    self._postcode = None
                    self._country_id = None
                    self._telephone = None
                    self._fax = None
                    self._region_id = None
                    self._address_id = None
                    return
            Holder.__name__ = "salesOrderAddressEntity_Holder"
            self.pyclass = Holder

    class salesOrderItemEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "salesOrderItemEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.salesOrderItemEntity_Def.schema
            TClist = [ZSI.TC.String(pname="item_id", aname="_item_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="order_id", aname="_order_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="quote_item_id", aname="_quote_item_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="created_at", aname="_created_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="updated_at", aname="_updated_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="product_id", aname="_product_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="product_type", aname="_product_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="product_options", aname="_product_options", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="weight", aname="_weight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="is_virtual", aname="_is_virtual", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sku", aname="_sku", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="applied_rule_ids", aname="_applied_rule_ids", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="free_shipping", aname="_free_shipping", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="is_qty_decimal", aname="_is_qty_decimal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="no_discount", aname="_no_discount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="qty_canceled", aname="_qty_canceled", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="qty_invoiced", aname="_qty_invoiced", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="qty_ordered", aname="_qty_ordered", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="qty_refunded", aname="_qty_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="qty_shipped", aname="_qty_shipped", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cost", aname="_cost", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="price", aname="_price", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_price", aname="_base_price", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="original_price", aname="_original_price", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_original_price", aname="_base_original_price", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tax_percent", aname="_tax_percent", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tax_amount", aname="_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_tax_amount", aname="_base_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tax_invoiced", aname="_tax_invoiced", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_tax_invoiced", aname="_base_tax_invoiced", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="discount_percent", aname="_discount_percent", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="discount_amount", aname="_discount_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_discount_amount", aname="_base_discount_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="discount_invoiced", aname="_discount_invoiced", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_discount_invoiced", aname="_base_discount_invoiced", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="amount_refunded", aname="_amount_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_amount_refunded", aname="_base_amount_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="row_total", aname="_row_total", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_row_total", aname="_base_row_total", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="row_invoiced", aname="_row_invoiced", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_row_invoiced", aname="_base_row_invoiced", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="row_weight", aname="_row_weight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gift_message_id", aname="_gift_message_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gift_message", aname="_gift_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gift_message_available", aname="_gift_message_available", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_tax_before_discount", aname="_base_tax_before_discount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tax_before_discount", aname="_tax_before_discount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="weee_tax_applied", aname="_weee_tax_applied", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="weee_tax_applied_amount", aname="_weee_tax_applied_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="weee_tax_applied_row_amount", aname="_weee_tax_applied_row_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_weee_tax_applied_amount", aname="_base_weee_tax_applied_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_weee_tax_applied_row_amount", aname="_base_weee_tax_applied_row_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="weee_tax_disposition", aname="_weee_tax_disposition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="weee_tax_row_disposition", aname="_weee_tax_row_disposition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_weee_tax_disposition", aname="_base_weee_tax_disposition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_weee_tax_row_disposition", aname="_base_weee_tax_row_disposition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._item_id = None
                    self._order_id = None
                    self._quote_item_id = None
                    self._created_at = None
                    self._updated_at = None
                    self._product_id = None
                    self._product_type = None
                    self._product_options = None
                    self._weight = None
                    self._is_virtual = None
                    self._sku = None
                    self._name = None
                    self._applied_rule_ids = None
                    self._free_shipping = None
                    self._is_qty_decimal = None
                    self._no_discount = None
                    self._qty_canceled = None
                    self._qty_invoiced = None
                    self._qty_ordered = None
                    self._qty_refunded = None
                    self._qty_shipped = None
                    self._cost = None
                    self._price = None
                    self._base_price = None
                    self._original_price = None
                    self._base_original_price = None
                    self._tax_percent = None
                    self._tax_amount = None
                    self._base_tax_amount = None
                    self._tax_invoiced = None
                    self._base_tax_invoiced = None
                    self._discount_percent = None
                    self._discount_amount = None
                    self._base_discount_amount = None
                    self._discount_invoiced = None
                    self._base_discount_invoiced = None
                    self._amount_refunded = None
                    self._base_amount_refunded = None
                    self._row_total = None
                    self._base_row_total = None
                    self._row_invoiced = None
                    self._base_row_invoiced = None
                    self._row_weight = None
                    self._gift_message_id = None
                    self._gift_message = None
                    self._gift_message_available = None
                    self._base_tax_before_discount = None
                    self._tax_before_discount = None
                    self._weee_tax_applied = None
                    self._weee_tax_applied_amount = None
                    self._weee_tax_applied_row_amount = None
                    self._base_weee_tax_applied_amount = None
                    self._base_weee_tax_applied_row_amount = None
                    self._weee_tax_disposition = None
                    self._weee_tax_row_disposition = None
                    self._base_weee_tax_disposition = None
                    self._base_weee_tax_row_disposition = None
                    return
            Holder.__name__ = "salesOrderItemEntity_Holder"
            self.pyclass = Holder

    class salesOrderItemEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "salesOrderItemEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.salesOrderItemEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.salesOrderItemEntityArray_Def.__bases__:
                bases = list(ns0.salesOrderItemEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.salesOrderItemEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class orderItemIdQty_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "orderItemIdQty")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.orderItemIdQty_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="order_item_id", aname="_order_item_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="qty", aname="_qty", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._order_item_id = None
                    self._qty = None
                    return
            Holder.__name__ = "orderItemIdQty_Holder"
            self.pyclass = Holder

    class orderItemIdQtyArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "orderItemIdQtyArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.orderItemIdQtyArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.orderItemIdQtyArray_Def.__bases__:
                bases = list(ns0.orderItemIdQtyArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.orderItemIdQtyArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class salesOrderPaymentEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "salesOrderPaymentEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.salesOrderPaymentEntity_Def.schema
            TClist = [ZSI.TC.String(pname="increment_id", aname="_increment_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="parent_id", aname="_parent_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="created_at", aname="_created_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="updated_at", aname="_updated_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="is_active", aname="_is_active", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="amount_ordered", aname="_amount_ordered", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_amount", aname="_shipping_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_amount_ordered", aname="_base_amount_ordered", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_shipping_amount", aname="_base_shipping_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="method", aname="_method", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="po_number", aname="_po_number", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cc_type", aname="_cc_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cc_number_enc", aname="_cc_number_enc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cc_last4", aname="_cc_last4", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cc_owner", aname="_cc_owner", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cc_exp_month", aname="_cc_exp_month", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cc_exp_year", aname="_cc_exp_year", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cc_ss_start_month", aname="_cc_ss_start_month", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cc_ss_start_year", aname="_cc_ss_start_year", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="payment_id", aname="_payment_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._increment_id = None
                    self._parent_id = None
                    self._created_at = None
                    self._updated_at = None
                    self._is_active = None
                    self._amount_ordered = None
                    self._shipping_amount = None
                    self._base_amount_ordered = None
                    self._base_shipping_amount = None
                    self._method = None
                    self._po_number = None
                    self._cc_type = None
                    self._cc_number_enc = None
                    self._cc_last4 = None
                    self._cc_owner = None
                    self._cc_exp_month = None
                    self._cc_exp_year = None
                    self._cc_ss_start_month = None
                    self._cc_ss_start_year = None
                    self._payment_id = None
                    return
            Holder.__name__ = "salesOrderPaymentEntity_Holder"
            self.pyclass = Holder

    class salesOrderStatusHistoryEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "salesOrderStatusHistoryEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.salesOrderStatusHistoryEntity_Def.schema
            TClist = [ZSI.TC.String(pname="increment_id", aname="_increment_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="parent_id", aname="_parent_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="created_at", aname="_created_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="updated_at", aname="_updated_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="is_active", aname="_is_active", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="is_customer_notified", aname="_is_customer_notified", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="status", aname="_status", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="comment", aname="_comment", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._increment_id = None
                    self._parent_id = None
                    self._created_at = None
                    self._updated_at = None
                    self._is_active = None
                    self._is_customer_notified = None
                    self._status = None
                    self._comment = None
                    return
            Holder.__name__ = "salesOrderStatusHistoryEntity_Holder"
            self.pyclass = Holder

    class salesOrderStatusHistoryEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "salesOrderStatusHistoryEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.salesOrderStatusHistoryEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.salesOrderStatusHistoryEntityArray_Def.__bases__:
                bases = list(ns0.salesOrderStatusHistoryEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.salesOrderStatusHistoryEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class salesOrderShipmentEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "salesOrderShipmentEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.salesOrderShipmentEntity_Def.schema
            TClist = [ZSI.TC.String(pname="increment_id", aname="_increment_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="parent_id", aname="_parent_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="store_id", aname="_store_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="created_at", aname="_created_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="updated_at", aname="_updated_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="is_active", aname="_is_active", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_address_id", aname="_shipping_address_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_firstname", aname="_shipping_firstname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_lastname", aname="_shipping_lastname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="order_id", aname="_order_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="order_increment_id", aname="_order_increment_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="order_created_at", aname="_order_created_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="total_qty", aname="_total_qty", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipment_id", aname="_shipment_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","salesOrderShipmentItemEntityArray",lazy=False)(pname="items", aname="_items", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","salesOrderShipmentTrackEntityArray",lazy=False)(pname="tracks", aname="_tracks", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","salesOrderShipmentCommentEntityArray",lazy=False)(pname="comments", aname="_comments", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._increment_id = None
                    self._parent_id = None
                    self._store_id = None
                    self._created_at = None
                    self._updated_at = None
                    self._is_active = None
                    self._shipping_address_id = None
                    self._shipping_firstname = None
                    self._shipping_lastname = None
                    self._order_id = None
                    self._order_increment_id = None
                    self._order_created_at = None
                    self._total_qty = None
                    self._shipment_id = None
                    self._items = None
                    self._tracks = None
                    self._comments = None
                    return
            Holder.__name__ = "salesOrderShipmentEntity_Holder"
            self.pyclass = Holder

    class salesOrderShipmentEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "salesOrderShipmentEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.salesOrderShipmentEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.salesOrderShipmentEntityArray_Def.__bases__:
                bases = list(ns0.salesOrderShipmentEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.salesOrderShipmentEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class salesOrderShipmentCommentEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "salesOrderShipmentCommentEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.salesOrderShipmentCommentEntity_Def.schema
            TClist = [ZSI.TC.String(pname="increment_id", aname="_increment_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="parent_id", aname="_parent_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="created_at", aname="_created_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="updated_at", aname="_updated_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="is_active", aname="_is_active", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="comment", aname="_comment", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="is_customer_notified", aname="_is_customer_notified", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="comment_id", aname="_comment_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._increment_id = None
                    self._parent_id = None
                    self._created_at = None
                    self._updated_at = None
                    self._is_active = None
                    self._comment = None
                    self._is_customer_notified = None
                    self._comment_id = None
                    return
            Holder.__name__ = "salesOrderShipmentCommentEntity_Holder"
            self.pyclass = Holder

    class salesOrderShipmentCommentEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "salesOrderShipmentCommentEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.salesOrderShipmentCommentEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.salesOrderShipmentCommentEntityArray_Def.__bases__:
                bases = list(ns0.salesOrderShipmentCommentEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.salesOrderShipmentCommentEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class salesOrderShipmentTrackEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "salesOrderShipmentTrackEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.salesOrderShipmentTrackEntity_Def.schema
            TClist = [ZSI.TC.String(pname="increment_id", aname="_increment_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="parent_id", aname="_parent_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="created_at", aname="_created_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="updated_at", aname="_updated_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="is_active", aname="_is_active", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="carrier_code", aname="_carrier_code", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="title", aname="_title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="number", aname="_number", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="order_id", aname="_order_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="track_id", aname="_track_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._increment_id = None
                    self._parent_id = None
                    self._created_at = None
                    self._updated_at = None
                    self._is_active = None
                    self._carrier_code = None
                    self._title = None
                    self._number = None
                    self._order_id = None
                    self._track_id = None
                    return
            Holder.__name__ = "salesOrderShipmentTrackEntity_Holder"
            self.pyclass = Holder

    class salesOrderShipmentTrackEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "salesOrderShipmentTrackEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.salesOrderShipmentTrackEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.salesOrderShipmentTrackEntityArray_Def.__bases__:
                bases = list(ns0.salesOrderShipmentTrackEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.salesOrderShipmentTrackEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class salesOrderShipmentItemEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "salesOrderShipmentItemEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.salesOrderShipmentItemEntity_Def.schema
            TClist = [ZSI.TC.String(pname="increment_id", aname="_increment_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="parent_id", aname="_parent_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="created_at", aname="_created_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="updated_at", aname="_updated_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="is_active", aname="_is_active", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sku", aname="_sku", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="order_item_id", aname="_order_item_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="product_id", aname="_product_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="weight", aname="_weight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="price", aname="_price", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="qty", aname="_qty", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="item_id", aname="_item_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._increment_id = None
                    self._parent_id = None
                    self._created_at = None
                    self._updated_at = None
                    self._is_active = None
                    self._sku = None
                    self._name = None
                    self._order_item_id = None
                    self._product_id = None
                    self._weight = None
                    self._price = None
                    self._qty = None
                    self._item_id = None
                    return
            Holder.__name__ = "salesOrderShipmentItemEntity_Holder"
            self.pyclass = Holder

    class salesOrderShipmentItemEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "salesOrderShipmentItemEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.salesOrderShipmentItemEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.salesOrderShipmentItemEntityArray_Def.__bases__:
                bases = list(ns0.salesOrderShipmentItemEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.salesOrderShipmentItemEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class salesOrderInvoiceEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "salesOrderInvoiceEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.salesOrderInvoiceEntity_Def.schema
            TClist = [ZSI.TC.String(pname="increment_id", aname="_increment_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="parent_id", aname="_parent_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="store_id", aname="_store_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="created_at", aname="_created_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="updated_at", aname="_updated_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="is_active", aname="_is_active", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="global_currency_code", aname="_global_currency_code", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_currency_code", aname="_base_currency_code", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="store_currency_code", aname="_store_currency_code", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="order_currency_code", aname="_order_currency_code", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="store_to_base_rate", aname="_store_to_base_rate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="store_to_order_rate", aname="_store_to_order_rate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_to_global_rate", aname="_base_to_global_rate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_to_order_rate", aname="_base_to_order_rate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="subtotal", aname="_subtotal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_subtotal", aname="_base_subtotal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_grand_total", aname="_base_grand_total", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="discount_amount", aname="_discount_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_discount_amount", aname="_base_discount_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_amount", aname="_shipping_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_shipping_amount", aname="_base_shipping_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tax_amount", aname="_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_tax_amount", aname="_base_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="billing_address_id", aname="_billing_address_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="billing_firstname", aname="_billing_firstname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="billing_lastname", aname="_billing_lastname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="order_id", aname="_order_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="order_increment_id", aname="_order_increment_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="order_created_at", aname="_order_created_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="grand_total", aname="_grand_total", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="invoice_id", aname="_invoice_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","salesOrderInvoiceItemEntityArray",lazy=False)(pname="items", aname="_items", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","salesOrderInvoiceCommentEntityArray",lazy=False)(pname="comments", aname="_comments", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._increment_id = None
                    self._parent_id = None
                    self._store_id = None
                    self._created_at = None
                    self._updated_at = None
                    self._is_active = None
                    self._global_currency_code = None
                    self._base_currency_code = None
                    self._store_currency_code = None
                    self._order_currency_code = None
                    self._store_to_base_rate = None
                    self._store_to_order_rate = None
                    self._base_to_global_rate = None
                    self._base_to_order_rate = None
                    self._subtotal = None
                    self._base_subtotal = None
                    self._base_grand_total = None
                    self._discount_amount = None
                    self._base_discount_amount = None
                    self._shipping_amount = None
                    self._base_shipping_amount = None
                    self._tax_amount = None
                    self._base_tax_amount = None
                    self._billing_address_id = None
                    self._billing_firstname = None
                    self._billing_lastname = None
                    self._order_id = None
                    self._order_increment_id = None
                    self._order_created_at = None
                    self._state = None
                    self._grand_total = None
                    self._invoice_id = None
                    self._items = None
                    self._comments = None
                    return
            Holder.__name__ = "salesOrderInvoiceEntity_Holder"
            self.pyclass = Holder

    class salesOrderInvoiceEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "salesOrderInvoiceEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.salesOrderInvoiceEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.salesOrderInvoiceEntityArray_Def.__bases__:
                bases = list(ns0.salesOrderInvoiceEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.salesOrderInvoiceEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class salesOrderInvoiceItemEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "salesOrderInvoiceItemEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.salesOrderInvoiceItemEntity_Def.schema
            TClist = [ZSI.TC.String(pname="increment_id", aname="_increment_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="parent_id", aname="_parent_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="created_at", aname="_created_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="updated_at", aname="_updated_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="is_active", aname="_is_active", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="weee_tax_applied", aname="_weee_tax_applied", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="qty", aname="_qty", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cost", aname="_cost", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="price", aname="_price", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tax_amount", aname="_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="row_total", aname="_row_total", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_price", aname="_base_price", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_tax_amount", aname="_base_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_row_total", aname="_base_row_total", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_weee_tax_applied_amount", aname="_base_weee_tax_applied_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_weee_tax_applied_row_amount", aname="_base_weee_tax_applied_row_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="weee_tax_applied_amount", aname="_weee_tax_applied_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="weee_tax_applied_row_amount", aname="_weee_tax_applied_row_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="weee_tax_disposition", aname="_weee_tax_disposition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="weee_tax_row_disposition", aname="_weee_tax_row_disposition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_weee_tax_disposition", aname="_base_weee_tax_disposition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_weee_tax_row_disposition", aname="_base_weee_tax_row_disposition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sku", aname="_sku", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="order_item_id", aname="_order_item_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="product_id", aname="_product_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="item_id", aname="_item_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._increment_id = None
                    self._parent_id = None
                    self._created_at = None
                    self._updated_at = None
                    self._is_active = None
                    self._weee_tax_applied = None
                    self._qty = None
                    self._cost = None
                    self._price = None
                    self._tax_amount = None
                    self._row_total = None
                    self._base_price = None
                    self._base_tax_amount = None
                    self._base_row_total = None
                    self._base_weee_tax_applied_amount = None
                    self._base_weee_tax_applied_row_amount = None
                    self._weee_tax_applied_amount = None
                    self._weee_tax_applied_row_amount = None
                    self._weee_tax_disposition = None
                    self._weee_tax_row_disposition = None
                    self._base_weee_tax_disposition = None
                    self._base_weee_tax_row_disposition = None
                    self._sku = None
                    self._name = None
                    self._order_item_id = None
                    self._product_id = None
                    self._item_id = None
                    return
            Holder.__name__ = "salesOrderInvoiceItemEntity_Holder"
            self.pyclass = Holder

    class salesOrderInvoiceItemEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "salesOrderInvoiceItemEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.salesOrderInvoiceItemEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.salesOrderInvoiceItemEntityArray_Def.__bases__:
                bases = list(ns0.salesOrderInvoiceItemEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.salesOrderInvoiceItemEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class salesOrderInvoiceCommentEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "salesOrderInvoiceCommentEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.salesOrderInvoiceCommentEntity_Def.schema
            TClist = [ZSI.TC.String(pname="increment_id", aname="_increment_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="parent_id", aname="_parent_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="created_at", aname="_created_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="updated_at", aname="_updated_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="is_active", aname="_is_active", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="comment", aname="_comment", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="is_customer_notified", aname="_is_customer_notified", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="comment_id", aname="_comment_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._increment_id = None
                    self._parent_id = None
                    self._created_at = None
                    self._updated_at = None
                    self._is_active = None
                    self._comment = None
                    self._is_customer_notified = None
                    self._comment_id = None
                    return
            Holder.__name__ = "salesOrderInvoiceCommentEntity_Holder"
            self.pyclass = Holder

    class salesOrderInvoiceCommentEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "salesOrderInvoiceCommentEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.salesOrderInvoiceCommentEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.salesOrderInvoiceCommentEntityArray_Def.__bases__:
                bases = list(ns0.salesOrderInvoiceCommentEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.salesOrderInvoiceCommentEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class salesOrderCreditmemoEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "salesOrderCreditmemoEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.salesOrderCreditmemoEntity_Def.schema
            TClist = [ZSI.TC.String(pname="updated_at", aname="_updated_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="created_at", aname="_created_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="increment_id", aname="_increment_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="transaction_id", aname="_transaction_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="global_currency_code", aname="_global_currency_code", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_currency_code", aname="_base_currency_code", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="order_currency_code", aname="_order_currency_code", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="store_currency_code", aname="_store_currency_code", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cybersource_token", aname="_cybersource_token", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="invoice_id", aname="_invoice_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="billing_address_id", aname="_billing_address_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_address_id", aname="_shipping_address_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="creditmemo_status", aname="_creditmemo_status", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="email_sent", aname="_email_sent", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="order_id", aname="_order_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tax_amount", aname="_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_tax_amount", aname="_shipping_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_tax_amount", aname="_base_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_adjustment_positive", aname="_base_adjustment_positive", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_grand_total", aname="_base_grand_total", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="adjustment", aname="_adjustment", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="subtotal", aname="_subtotal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="discount_amount", aname="_discount_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_subtotal", aname="_base_subtotal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_adjustment", aname="_base_adjustment", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_to_global_rate", aname="_base_to_global_rate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="store_to_base_rate", aname="_store_to_base_rate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_shipping_amount", aname="_base_shipping_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="adjustment_negative", aname="_adjustment_negative", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="subtotal_incl_tax", aname="_subtotal_incl_tax", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_amount", aname="_shipping_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_subtotal_incl_tax", aname="_base_subtotal_incl_tax", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_adjustment_negative", aname="_base_adjustment_negative", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="grand_total", aname="_grand_total", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_discount_amount", aname="_base_discount_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_to_order_rate", aname="_base_to_order_rate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="store_to_order_rate", aname="_store_to_order_rate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_shipping_tax_amount", aname="_base_shipping_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="adjustment_positive", aname="_adjustment_positive", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="store_id", aname="_store_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hidden_tax_amount", aname="_hidden_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_hidden_tax_amount", aname="_base_hidden_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_hidden_tax_amount", aname="_shipping_hidden_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_shipping_hidden_tax_amnt", aname="_base_shipping_hidden_tax_amnt", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_incl_tax", aname="_shipping_incl_tax", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_shipping_incl_tax", aname="_base_shipping_incl_tax", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_customer_balance_amount", aname="_base_customer_balance_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_balance_amount", aname="_customer_balance_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="bs_customer_bal_total_refunded", aname="_bs_customer_bal_total_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_bal_total_refunded", aname="_customer_bal_total_refunded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_gift_cards_amount", aname="_base_gift_cards_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gift_cards_amount", aname="_gift_cards_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gw_base_price", aname="_gw_base_price", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gw_price", aname="_gw_price", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gw_items_base_price", aname="_gw_items_base_price", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gw_items_price", aname="_gw_items_price", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gw_card_base_price", aname="_gw_card_base_price", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gw_card_price", aname="_gw_card_price", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gw_base_tax_amount", aname="_gw_base_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gw_tax_amount", aname="_gw_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gw_items_base_tax_amount", aname="_gw_items_base_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gw_items_tax_amount", aname="_gw_items_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gw_card_base_tax_amount", aname="_gw_card_base_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gw_card_tax_amount", aname="_gw_card_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_reward_currency_amount", aname="_base_reward_currency_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reward_currency_amount", aname="_reward_currency_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reward_points_balance", aname="_reward_points_balance", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reward_points_balance_refund", aname="_reward_points_balance_refund", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="creditmemo_id", aname="_creditmemo_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","salesOrderCreditmemoItemEntityArray",lazy=False)(pname="items", aname="_items", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","salesOrderCreditmemoCommentEntityArray",lazy=False)(pname="comments", aname="_comments", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._updated_at = None
                    self._created_at = None
                    self._increment_id = None
                    self._transaction_id = None
                    self._global_currency_code = None
                    self._base_currency_code = None
                    self._order_currency_code = None
                    self._store_currency_code = None
                    self._cybersource_token = None
                    self._invoice_id = None
                    self._billing_address_id = None
                    self._shipping_address_id = None
                    self._state = None
                    self._creditmemo_status = None
                    self._email_sent = None
                    self._order_id = None
                    self._tax_amount = None
                    self._shipping_tax_amount = None
                    self._base_tax_amount = None
                    self._base_adjustment_positive = None
                    self._base_grand_total = None
                    self._adjustment = None
                    self._subtotal = None
                    self._discount_amount = None
                    self._base_subtotal = None
                    self._base_adjustment = None
                    self._base_to_global_rate = None
                    self._store_to_base_rate = None
                    self._base_shipping_amount = None
                    self._adjustment_negative = None
                    self._subtotal_incl_tax = None
                    self._shipping_amount = None
                    self._base_subtotal_incl_tax = None
                    self._base_adjustment_negative = None
                    self._grand_total = None
                    self._base_discount_amount = None
                    self._base_to_order_rate = None
                    self._store_to_order_rate = None
                    self._base_shipping_tax_amount = None
                    self._adjustment_positive = None
                    self._store_id = None
                    self._hidden_tax_amount = None
                    self._base_hidden_tax_amount = None
                    self._shipping_hidden_tax_amount = None
                    self._base_shipping_hidden_tax_amnt = None
                    self._shipping_incl_tax = None
                    self._base_shipping_incl_tax = None
                    self._base_customer_balance_amount = None
                    self._customer_balance_amount = None
                    self._bs_customer_bal_total_refunded = None
                    self._customer_bal_total_refunded = None
                    self._base_gift_cards_amount = None
                    self._gift_cards_amount = None
                    self._gw_base_price = None
                    self._gw_price = None
                    self._gw_items_base_price = None
                    self._gw_items_price = None
                    self._gw_card_base_price = None
                    self._gw_card_price = None
                    self._gw_base_tax_amount = None
                    self._gw_tax_amount = None
                    self._gw_items_base_tax_amount = None
                    self._gw_items_tax_amount = None
                    self._gw_card_base_tax_amount = None
                    self._gw_card_tax_amount = None
                    self._base_reward_currency_amount = None
                    self._reward_currency_amount = None
                    self._reward_points_balance = None
                    self._reward_points_balance_refund = None
                    self._creditmemo_id = None
                    self._items = None
                    self._comments = None
                    return
            Holder.__name__ = "salesOrderCreditmemoEntity_Holder"
            self.pyclass = Holder

    class salesOrderCreditmemoEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "salesOrderCreditmemoEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.salesOrderCreditmemoEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.salesOrderCreditmemoEntityArray_Def.__bases__:
                bases = list(ns0.salesOrderCreditmemoEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.salesOrderCreditmemoEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class salesOrderCreditmemoItemEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "salesOrderCreditmemoItemEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.salesOrderCreditmemoItemEntity_Def.schema
            TClist = [ZSI.TC.String(pname="item_id", aname="_item_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="parent_id", aname="_parent_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="weee_tax_applied_row_amount", aname="_weee_tax_applied_row_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_price", aname="_base_price", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_weee_tax_row_disposition", aname="_base_weee_tax_row_disposition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tax_amount", aname="_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_weee_tax_applied_amount", aname="_base_weee_tax_applied_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="weee_tax_row_disposition", aname="_weee_tax_row_disposition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_row_total", aname="_base_row_total", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="discount_amount", aname="_discount_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="row_total", aname="_row_total", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="weee_tax_applied_amount", aname="_weee_tax_applied_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_discount_amount", aname="_base_discount_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_weee_tax_disposition", aname="_base_weee_tax_disposition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="price_incl_tax", aname="_price_incl_tax", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_tax_amount", aname="_base_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="weee_tax_disposition", aname="_weee_tax_disposition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_price_incl_tax", aname="_base_price_incl_tax", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="qty", aname="_qty", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_cost", aname="_base_cost", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_weee_tax_applied_row_amount", aname="_base_weee_tax_applied_row_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="price", aname="_price", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_row_total_incl_tax", aname="_base_row_total_incl_tax", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="row_total_incl_tax", aname="_row_total_incl_tax", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="product_id", aname="_product_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="order_item_id", aname="_order_item_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="additional_data", aname="_additional_data", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="weee_tax_applied", aname="_weee_tax_applied", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sku", aname="_sku", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hidden_tax_amount", aname="_hidden_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_hidden_tax_amount", aname="_base_hidden_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._item_id = None
                    self._parent_id = None
                    self._weee_tax_applied_row_amount = None
                    self._base_price = None
                    self._base_weee_tax_row_disposition = None
                    self._tax_amount = None
                    self._base_weee_tax_applied_amount = None
                    self._weee_tax_row_disposition = None
                    self._base_row_total = None
                    self._discount_amount = None
                    self._row_total = None
                    self._weee_tax_applied_amount = None
                    self._base_discount_amount = None
                    self._base_weee_tax_disposition = None
                    self._price_incl_tax = None
                    self._base_tax_amount = None
                    self._weee_tax_disposition = None
                    self._base_price_incl_tax = None
                    self._qty = None
                    self._base_cost = None
                    self._base_weee_tax_applied_row_amount = None
                    self._price = None
                    self._base_row_total_incl_tax = None
                    self._row_total_incl_tax = None
                    self._product_id = None
                    self._order_item_id = None
                    self._additional_data = None
                    self._description = None
                    self._weee_tax_applied = None
                    self._sku = None
                    self._name = None
                    self._hidden_tax_amount = None
                    self._base_hidden_tax_amount = None
                    return
            Holder.__name__ = "salesOrderCreditmemoItemEntity_Holder"
            self.pyclass = Holder

    class salesOrderCreditmemoItemEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "salesOrderCreditmemoItemEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.salesOrderCreditmemoItemEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.salesOrderCreditmemoItemEntityArray_Def.__bases__:
                bases = list(ns0.salesOrderCreditmemoItemEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.salesOrderCreditmemoItemEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class salesOrderCreditmemoCommentEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "salesOrderCreditmemoCommentEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.salesOrderCreditmemoCommentEntity_Def.schema
            TClist = [ZSI.TC.String(pname="parent_id", aname="_parent_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="created_at", aname="_created_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="comment", aname="_comment", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="is_customer_notified", aname="_is_customer_notified", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="comment_id", aname="_comment_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="is_visible_on_front", aname="_is_visible_on_front", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._parent_id = None
                    self._created_at = None
                    self._comment = None
                    self._is_customer_notified = None
                    self._comment_id = None
                    self._is_visible_on_front = None
                    return
            Holder.__name__ = "salesOrderCreditmemoCommentEntity_Holder"
            self.pyclass = Holder

    class salesOrderCreditmemoCommentEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "salesOrderCreditmemoCommentEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.salesOrderCreditmemoCommentEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.salesOrderCreditmemoCommentEntityArray_Def.__bases__:
                bases = list(ns0.salesOrderCreditmemoCommentEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.salesOrderCreditmemoCommentEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class salesOrderCreditmemoData_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "salesOrderCreditmemoData")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.salesOrderCreditmemoData_Def.schema
            TClist = [GTD("urn:Magento","orderItemIdQtyArray",lazy=False)(pname="qtys", aname="_qtys", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="shipping_amount", aname="_shipping_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="adjustment_positive", aname="_adjustment_positive", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="adjustment_negative", aname="_adjustment_negative", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._qtys = None
                    self._shipping_amount = None
                    self._adjustment_positive = None
                    self._adjustment_negative = None
                    return
            Holder.__name__ = "salesOrderCreditmemoData_Holder"
            self.pyclass = Holder

    class catalogInventoryStockItemEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogInventoryStockItemEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogInventoryStockItemEntity_Def.schema
            TClist = [ZSI.TC.String(pname="product_id", aname="_product_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sku", aname="_sku", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="qty", aname="_qty", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="is_in_stock", aname="_is_in_stock", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._product_id = None
                    self._sku = None
                    self._qty = None
                    self._is_in_stock = None
                    return
            Holder.__name__ = "catalogInventoryStockItemEntity_Holder"
            self.pyclass = Holder

    class catalogInventoryStockItemEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "catalogInventoryStockItemEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.catalogInventoryStockItemEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.catalogInventoryStockItemEntityArray_Def.__bases__:
                bases = list(ns0.catalogInventoryStockItemEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.catalogInventoryStockItemEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class catalogInventoryStockItemUpdateEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogInventoryStockItemUpdateEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogInventoryStockItemUpdateEntity_Def.schema
            TClist = [ZSI.TC.String(pname="qty", aname="_qty", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_in_stock", aname="_is_in_stock", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="manage_stock", aname="_manage_stock", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="use_config_manage_stock", aname="_use_config_manage_stock", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="min_qty", aname="_min_qty", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="use_config_min_qty", aname="_use_config_min_qty", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="min_sale_qty", aname="_min_sale_qty", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="use_config_min_sale_qty", aname="_use_config_min_sale_qty", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="max_sale_qty", aname="_max_sale_qty", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="use_config_max_sale_qty", aname="_use_config_max_sale_qty", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_qty_decimal", aname="_is_qty_decimal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="backorders", aname="_backorders", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="use_config_backorders", aname="_use_config_backorders", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="notify_stock_qty", aname="_notify_stock_qty", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="use_config_notify_stock_qty", aname="_use_config_notify_stock_qty", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._qty = None
                    self._is_in_stock = None
                    self._manage_stock = None
                    self._use_config_manage_stock = None
                    self._min_qty = None
                    self._use_config_min_qty = None
                    self._min_sale_qty = None
                    self._use_config_min_sale_qty = None
                    self._max_sale_qty = None
                    self._use_config_max_sale_qty = None
                    self._is_qty_decimal = None
                    self._backorders = None
                    self._use_config_backorders = None
                    self._notify_stock_qty = None
                    self._use_config_notify_stock_qty = None
                    return
            Holder.__name__ = "catalogInventoryStockItemUpdateEntity_Holder"
            self.pyclass = Holder

    class shoppingCartAddressEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "shoppingCartAddressEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.shoppingCartAddressEntity_Def.schema
            TClist = [ZSI.TC.String(pname="address_id", aname="_address_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="created_at", aname="_created_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="updated_at", aname="_updated_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_id", aname="_customer_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="save_in_address_book", aname="_save_in_address_book", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_address_id", aname="_customer_address_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address_type", aname="_address_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="email", aname="_email", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="prefix", aname="_prefix", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="firstname", aname="_firstname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="middlename", aname="_middlename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lastname", aname="_lastname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="suffix", aname="_suffix", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="company", aname="_company", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="street", aname="_street", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="city", aname="_city", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="region", aname="_region", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="region_id", aname="_region_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="postcode", aname="_postcode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="country_id", aname="_country_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="telephone", aname="_telephone", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="fax", aname="_fax", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="same_as_billing", aname="_same_as_billing", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="free_shipping", aname="_free_shipping", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_method", aname="_shipping_method", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="shipping_description", aname="_shipping_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="weight", aname="_weight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._address_id = None
                    self._created_at = None
                    self._updated_at = None
                    self._customer_id = None
                    self._save_in_address_book = None
                    self._customer_address_id = None
                    self._address_type = None
                    self._email = None
                    self._prefix = None
                    self._firstname = None
                    self._middlename = None
                    self._lastname = None
                    self._suffix = None
                    self._company = None
                    self._street = None
                    self._city = None
                    self._region = None
                    self._region_id = None
                    self._postcode = None
                    self._country_id = None
                    self._telephone = None
                    self._fax = None
                    self._same_as_billing = None
                    self._free_shipping = None
                    self._shipping_method = None
                    self._shipping_description = None
                    self._weight = None
                    return
            Holder.__name__ = "shoppingCartAddressEntity_Holder"
            self.pyclass = Holder

    class shoppingCartItemEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "shoppingCartItemEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.shoppingCartItemEntity_Def.schema
            TClist = [ZSI.TC.String(pname="item_id", aname="_item_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="created_at", aname="_created_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="updated_at", aname="_updated_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="product_id", aname="_product_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="store_id", aname="_store_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="parent_item_id", aname="_parent_item_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_virtual", aname="_is_virtual", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sku", aname="_sku", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="applied_rule_ids", aname="_applied_rule_ids", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="additional_data", aname="_additional_data", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="free_shipping", aname="_free_shipping", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="is_qty_decimal", aname="_is_qty_decimal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="no_discount", aname="_no_discount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="weight", aname="_weight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="qty", aname="_qty", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="price", aname="_price", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="base_price", aname="_base_price", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="custom_price", aname="_custom_price", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="discount_percent", aname="_discount_percent", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="discount_amount", aname="_discount_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="base_discount_amount", aname="_base_discount_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="tax_percent", aname="_tax_percent", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="tax_amount", aname="_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="base_tax_amount", aname="_base_tax_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="row_total", aname="_row_total", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="base_row_total", aname="_base_row_total", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="row_total_with_discount", aname="_row_total_with_discount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="row_weight", aname="_row_weight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="product_type", aname="_product_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="base_tax_before_discount", aname="_base_tax_before_discount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="tax_before_discount", aname="_tax_before_discount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="original_custom_price", aname="_original_custom_price", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="base_cost", aname="_base_cost", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="price_incl_tax", aname="_price_incl_tax", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="base_price_incl_tax", aname="_base_price_incl_tax", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="row_total_incl_tax", aname="_row_total_incl_tax", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="base_row_total_incl_tax", aname="_base_row_total_incl_tax", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gift_message_id", aname="_gift_message_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gift_message", aname="_gift_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gift_message_available", aname="_gift_message_available", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="weee_tax_applied", aname="_weee_tax_applied", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="weee_tax_applied_amount", aname="_weee_tax_applied_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="weee_tax_applied_row_amount", aname="_weee_tax_applied_row_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="base_weee_tax_applied_amount", aname="_base_weee_tax_applied_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="base_weee_tax_applied_row_amount", aname="_base_weee_tax_applied_row_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="weee_tax_disposition", aname="_weee_tax_disposition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="weee_tax_row_disposition", aname="_weee_tax_row_disposition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="base_weee_tax_disposition", aname="_base_weee_tax_disposition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="base_weee_tax_row_disposition", aname="_base_weee_tax_row_disposition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tax_class_id", aname="_tax_class_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._item_id = None
                    self._created_at = None
                    self._updated_at = None
                    self._product_id = None
                    self._store_id = None
                    self._parent_item_id = None
                    self._is_virtual = None
                    self._sku = None
                    self._name = None
                    self._description = None
                    self._applied_rule_ids = None
                    self._additional_data = None
                    self._free_shipping = None
                    self._is_qty_decimal = None
                    self._no_discount = None
                    self._weight = None
                    self._qty = None
                    self._price = None
                    self._base_price = None
                    self._custom_price = None
                    self._discount_percent = None
                    self._discount_amount = None
                    self._base_discount_amount = None
                    self._tax_percent = None
                    self._tax_amount = None
                    self._base_tax_amount = None
                    self._row_total = None
                    self._base_row_total = None
                    self._row_total_with_discount = None
                    self._row_weight = None
                    self._product_type = None
                    self._base_tax_before_discount = None
                    self._tax_before_discount = None
                    self._original_custom_price = None
                    self._base_cost = None
                    self._price_incl_tax = None
                    self._base_price_incl_tax = None
                    self._row_total_incl_tax = None
                    self._base_row_total_incl_tax = None
                    self._gift_message_id = None
                    self._gift_message = None
                    self._gift_message_available = None
                    self._weee_tax_applied = None
                    self._weee_tax_applied_amount = None
                    self._weee_tax_applied_row_amount = None
                    self._base_weee_tax_applied_amount = None
                    self._base_weee_tax_applied_row_amount = None
                    self._weee_tax_disposition = None
                    self._weee_tax_row_disposition = None
                    self._base_weee_tax_disposition = None
                    self._base_weee_tax_row_disposition = None
                    self._tax_class_id = None
                    return
            Holder.__name__ = "shoppingCartItemEntity_Holder"
            self.pyclass = Holder

    class shoppingCartItemEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "shoppingCartItemEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.shoppingCartItemEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.shoppingCartItemEntityArray_Def.__bases__:
                bases = list(ns0.shoppingCartItemEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.shoppingCartItemEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class shoppingCartPaymentEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "shoppingCartPaymentEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.shoppingCartPaymentEntity_Def.schema
            TClist = [ZSI.TC.String(pname="payment_id", aname="_payment_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="created_at", aname="_created_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="updated_at", aname="_updated_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="method", aname="_method", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cc_type", aname="_cc_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cc_number_enc", aname="_cc_number_enc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cc_last4", aname="_cc_last4", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cc_cid_enc", aname="_cc_cid_enc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cc_owner", aname="_cc_owner", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cc_exp_month", aname="_cc_exp_month", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cc_exp_year", aname="_cc_exp_year", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cc_ss_owner", aname="_cc_ss_owner", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cc_ss_start_month", aname="_cc_ss_start_month", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cc_ss_start_year", aname="_cc_ss_start_year", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cc_ss_issue", aname="_cc_ss_issue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="po_number", aname="_po_number", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="additional_data", aname="_additional_data", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="additional_information", aname="_additional_information", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._payment_id = None
                    self._created_at = None
                    self._updated_at = None
                    self._method = None
                    self._cc_type = None
                    self._cc_number_enc = None
                    self._cc_last4 = None
                    self._cc_cid_enc = None
                    self._cc_owner = None
                    self._cc_exp_month = None
                    self._cc_exp_year = None
                    self._cc_ss_owner = None
                    self._cc_ss_start_month = None
                    self._cc_ss_start_year = None
                    self._cc_ss_issue = None
                    self._po_number = None
                    self._additional_data = None
                    self._additional_information = None
                    return
            Holder.__name__ = "shoppingCartPaymentEntity_Holder"
            self.pyclass = Holder

    class shoppingCartInfoEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "shoppingCartInfoEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.shoppingCartInfoEntity_Def.schema
            TClist = [ZSI.TC.String(pname="store_id", aname="_store_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="created_at", aname="_created_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="updated_at", aname="_updated_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="converted_at", aname="_converted_at", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="quote_id", aname="_quote_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_active", aname="_is_active", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_virtual", aname="_is_virtual", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_multi_shipping", aname="_is_multi_shipping", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="items_count", aname="_items_count", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="items_qty", aname="_items_qty", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="orig_order_id", aname="_orig_order_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="store_to_base_rate", aname="_store_to_base_rate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="store_to_quote_rate", aname="_store_to_quote_rate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_currency_code", aname="_base_currency_code", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="store_currency_code", aname="_store_currency_code", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="quote_currency_code", aname="_quote_currency_code", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="grand_total", aname="_grand_total", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_grand_total", aname="_base_grand_total", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="checkout_method", aname="_checkout_method", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_id", aname="_customer_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_tax_class_id", aname="_customer_tax_class_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="customer_group_id", aname="_customer_group_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_email", aname="_customer_email", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_prefix", aname="_customer_prefix", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_firstname", aname="_customer_firstname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_middlename", aname="_customer_middlename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_lastname", aname="_customer_lastname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_suffix", aname="_customer_suffix", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_note", aname="_customer_note", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_note_notify", aname="_customer_note_notify", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_is_guest", aname="_customer_is_guest", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="applied_rule_ids", aname="_applied_rule_ids", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reserved_order_id", aname="_reserved_order_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password_hash", aname="_password_hash", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="coupon_code", aname="_coupon_code", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="global_currency_code", aname="_global_currency_code", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="base_to_global_rate", aname="_base_to_global_rate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="base_to_quote_rate", aname="_base_to_quote_rate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_taxvat", aname="_customer_taxvat", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_gender", aname="_customer_gender", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="subtotal", aname="_subtotal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="base_subtotal", aname="_base_subtotal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="subtotal_with_discount", aname="_subtotal_with_discount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="base_subtotal_with_discount", aname="_base_subtotal_with_discount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ext_shipping_info", aname="_ext_shipping_info", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gift_message_id", aname="_gift_message_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gift_message", aname="_gift_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="customer_balance_amount_used", aname="_customer_balance_amount_used", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="base_customer_balance_amount_used", aname="_base_customer_balance_amount_used", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="use_customer_balance", aname="_use_customer_balance", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gift_cards_amount", aname="_gift_cards_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_gift_cards_amount", aname="_base_gift_cards_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gift_cards_amount_used", aname="_gift_cards_amount_used", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="use_reward_points", aname="_use_reward_points", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reward_points_balance", aname="_reward_points_balance", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_reward_currency_amount", aname="_base_reward_currency_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reward_currency_amount", aname="_reward_currency_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","shoppingCartAddressEntity",lazy=False)(pname="shipping_address", aname="_shipping_address", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","shoppingCartAddressEntity",lazy=False)(pname="billing_address", aname="_billing_address", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","shoppingCartItemEntityArray",lazy=False)(pname="items", aname="_items", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","shoppingCartPaymentEntity",lazy=False)(pname="payment", aname="_payment", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._store_id = None
                    self._created_at = None
                    self._updated_at = None
                    self._converted_at = None
                    self._quote_id = None
                    self._is_active = None
                    self._is_virtual = None
                    self._is_multi_shipping = None
                    self._items_count = None
                    self._items_qty = None
                    self._orig_order_id = None
                    self._store_to_base_rate = None
                    self._store_to_quote_rate = None
                    self._base_currency_code = None
                    self._store_currency_code = None
                    self._quote_currency_code = None
                    self._grand_total = None
                    self._base_grand_total = None
                    self._checkout_method = None
                    self._customer_id = None
                    self._customer_tax_class_id = None
                    self._customer_group_id = None
                    self._customer_email = None
                    self._customer_prefix = None
                    self._customer_firstname = None
                    self._customer_middlename = None
                    self._customer_lastname = None
                    self._customer_suffix = None
                    self._customer_note = None
                    self._customer_note_notify = None
                    self._customer_is_guest = None
                    self._applied_rule_ids = None
                    self._reserved_order_id = None
                    self._password_hash = None
                    self._coupon_code = None
                    self._global_currency_code = None
                    self._base_to_global_rate = None
                    self._base_to_quote_rate = None
                    self._customer_taxvat = None
                    self._customer_gender = None
                    self._subtotal = None
                    self._base_subtotal = None
                    self._subtotal_with_discount = None
                    self._base_subtotal_with_discount = None
                    self._ext_shipping_info = None
                    self._gift_message_id = None
                    self._gift_message = None
                    self._customer_balance_amount_used = None
                    self._base_customer_balance_amount_used = None
                    self._use_customer_balance = None
                    self._gift_cards_amount = None
                    self._base_gift_cards_amount = None
                    self._gift_cards_amount_used = None
                    self._use_reward_points = None
                    self._reward_points_balance = None
                    self._base_reward_currency_amount = None
                    self._reward_currency_amount = None
                    self._shipping_address = None
                    self._billing_address = None
                    self._items = None
                    self._payment = None
                    return
            Holder.__name__ = "shoppingCartInfoEntity_Holder"
            self.pyclass = Holder

    class shoppingCartTotalsEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "shoppingCartTotalsEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.shoppingCartTotalsEntity_Def.schema
            TClist = [ZSI.TC.String(pname="title", aname="_title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="amount", aname="_amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._title = None
                    self._amount = None
                    return
            Holder.__name__ = "shoppingCartTotalsEntity_Holder"
            self.pyclass = Holder

    class shoppingCartTotalsEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "shoppingCartTotalsEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.shoppingCartTotalsEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.shoppingCartTotalsEntityArray_Def.__bases__:
                bases = list(ns0.shoppingCartTotalsEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.shoppingCartTotalsEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class shoppingCartLicenseEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "shoppingCartLicenseEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.shoppingCartLicenseEntity_Def.schema
            TClist = [ZSI.TC.String(pname="agreement_id", aname="_agreement_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="content", aname="_content", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_active", aname="_is_active", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_html", aname="_is_html", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._agreement_id = None
                    self._name = None
                    self._content = None
                    self._is_active = None
                    self._is_html = None
                    return
            Holder.__name__ = "shoppingCartLicenseEntity_Holder"
            self.pyclass = Holder

    class shoppingCartLicenseEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "shoppingCartLicenseEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.shoppingCartLicenseEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.shoppingCartLicenseEntityArray_Def.__bases__:
                bases = list(ns0.shoppingCartLicenseEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.shoppingCartLicenseEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class shoppingCartProductEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "shoppingCartProductEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.shoppingCartProductEntity_Def.schema
            TClist = [ZSI.TC.String(pname="product_id", aname="_product_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sku", aname="_sku", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="qty", aname="_qty", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","associativeArray",lazy=False)(pname="options", aname="_options", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","associativeArray",lazy=False)(pname="bundle_option", aname="_bundle_option", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","associativeArray",lazy=False)(pname="bundle_option_qty", aname="_bundle_option_qty", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","ArrayOfString",lazy=False)(pname="links", aname="_links", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._product_id = None
                    self._sku = None
                    self._qty = None
                    self._options = None
                    self._bundle_option = None
                    self._bundle_option_qty = None
                    self._links = None
                    return
            Holder.__name__ = "shoppingCartProductEntity_Holder"
            self.pyclass = Holder

    class shoppingCartProductEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "shoppingCartProductEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.shoppingCartProductEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.shoppingCartProductEntityArray_Def.__bases__:
                bases = list(ns0.shoppingCartProductEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.shoppingCartProductEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class shoppingCartProductResponseEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "shoppingCartProductResponseEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.shoppingCartProductResponseEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.shoppingCartProductResponseEntityArray_Def.__bases__:
                bases = list(ns0.shoppingCartProductResponseEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.shoppingCartProductResponseEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class shoppingCartCustomerEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "shoppingCartCustomerEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.shoppingCartCustomerEntity_Def.schema
            TClist = [ZSI.TC.String(pname="mode", aname="_mode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="customer_id", aname="_customer_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="email", aname="_email", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="firstname", aname="_firstname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lastname", aname="_lastname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="confirmation", aname="_confirmation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="website_id", aname="_website_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="store_id", aname="_store_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="group_id", aname="_group_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._mode = None
                    self._customer_id = None
                    self._email = None
                    self._firstname = None
                    self._lastname = None
                    self._password = None
                    self._confirmation = None
                    self._website_id = None
                    self._store_id = None
                    self._group_id = None
                    return
            Holder.__name__ = "shoppingCartCustomerEntity_Holder"
            self.pyclass = Holder

    class shoppingCartCustomerAddressEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "shoppingCartCustomerAddressEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.shoppingCartCustomerAddressEntity_Def.schema
            TClist = [ZSI.TC.String(pname="mode", aname="_mode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address_id", aname="_address_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="firstname", aname="_firstname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lastname", aname="_lastname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="company", aname="_company", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="street", aname="_street", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="city", aname="_city", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="region", aname="_region", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="region_id", aname="_region_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="postcode", aname="_postcode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="country_id", aname="_country_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="telephone", aname="_telephone", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="fax", aname="_fax", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_default_billing", aname="_is_default_billing", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_default_shipping", aname="_is_default_shipping", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._mode = None
                    self._address_id = None
                    self._firstname = None
                    self._lastname = None
                    self._company = None
                    self._street = None
                    self._city = None
                    self._region = None
                    self._region_id = None
                    self._postcode = None
                    self._country_id = None
                    self._telephone = None
                    self._fax = None
                    self._is_default_billing = None
                    self._is_default_shipping = None
                    return
            Holder.__name__ = "shoppingCartCustomerAddressEntity_Holder"
            self.pyclass = Holder

    class shoppingCartCustomerAddressEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "shoppingCartCustomerAddressEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.shoppingCartCustomerAddressEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.shoppingCartCustomerAddressEntityArray_Def.__bases__:
                bases = list(ns0.shoppingCartCustomerAddressEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.shoppingCartCustomerAddressEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class shoppingCartShippingMethodEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "shoppingCartShippingMethodEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.shoppingCartShippingMethodEntity_Def.schema
            TClist = [ZSI.TC.String(pname="code", aname="_code", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="carrier", aname="_carrier", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="carrier_title", aname="_carrier_title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="method", aname="_method", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="method_title", aname="_method_title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="method_description", aname="_method_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="price", aname="_price", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._code = None
                    self._carrier = None
                    self._carrier_title = None
                    self._method = None
                    self._method_title = None
                    self._method_description = None
                    self._price = None
                    return
            Holder.__name__ = "shoppingCartShippingMethodEntity_Holder"
            self.pyclass = Holder

    class shoppingCartShippingMethodEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "shoppingCartShippingMethodEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.shoppingCartShippingMethodEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.shoppingCartShippingMethodEntityArray_Def.__bases__:
                bases = list(ns0.shoppingCartShippingMethodEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.shoppingCartShippingMethodEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class shoppingCartPaymentMethodEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "shoppingCartPaymentMethodEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.shoppingCartPaymentMethodEntity_Def.schema
            TClist = [ZSI.TC.String(pname="po_number", aname="_po_number", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="method", aname="_method", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cc_cid", aname="_cc_cid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cc_owner", aname="_cc_owner", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cc_number", aname="_cc_number", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cc_type", aname="_cc_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cc_exp_year", aname="_cc_exp_year", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cc_exp_month", aname="_cc_exp_month", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._po_number = None
                    self._method = None
                    self._cc_cid = None
                    self._cc_owner = None
                    self._cc_number = None
                    self._cc_type = None
                    self._cc_exp_year = None
                    self._cc_exp_month = None
                    return
            Holder.__name__ = "shoppingCartPaymentMethodEntity_Holder"
            self.pyclass = Holder

    class shoppingCartPaymentMethodResponseEntityArray_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "shoppingCartPaymentMethodResponseEntityArray")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.shoppingCartPaymentMethodResponseEntityArray_Def.schema
            TClist = [ZSI.TC.String(pname="code", aname="_code", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="title", aname="_title", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","associativeArray",lazy=False)(pname="cc_types", aname="_cc_types", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._code = None
                    self._title = None
                    self._cc_types = None
                    return
            Holder.__name__ = "shoppingCartPaymentMethodResponseEntityArray_Holder"
            self.pyclass = Holder

    class catalogProductTagListEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductTagListEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductTagListEntity_Def.schema
            TClist = [ZSI.TC.String(pname="tag_id", aname="_tag_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._tag_id = None
                    self._name = None
                    return
            Holder.__name__ = "catalogProductTagListEntity_Holder"
            self.pyclass = Holder

    class catalogProductTagListEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "catalogProductTagListEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.catalogProductTagListEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.catalogProductTagListEntityArray_Def.__bases__:
                bases = list(ns0.catalogProductTagListEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.catalogProductTagListEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class catalogProductTagAddEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductTagAddEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductTagAddEntity_Def.schema
            TClist = [ZSI.TC.String(pname="tag", aname="_tag", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="product_id", aname="_product_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customer_id", aname="_customer_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="store", aname="_store", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._tag = None
                    self._product_id = None
                    self._customer_id = None
                    self._store = None
                    return
            Holder.__name__ = "catalogProductTagAddEntity_Holder"
            self.pyclass = Holder

    class catalogProductTagUpdateEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductTagUpdateEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductTagUpdateEntity_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="status", aname="_status", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_popularity", aname="_base_popularity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._status = None
                    self._base_popularity = None
                    return
            Holder.__name__ = "catalogProductTagUpdateEntity_Holder"
            self.pyclass = Holder

    class catalogProductTagInfoEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductTagInfoEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductTagInfoEntity_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="status", aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base_popularity", aname="_base_popularity", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","associativeArray",lazy=False)(pname="products", aname="_products", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._status = None
                    self._base_popularity = None
                    self._products = None
                    return
            Holder.__name__ = "catalogProductTagInfoEntity_Holder"
            self.pyclass = Holder

    class giftMessageEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "giftMessageEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.giftMessageEntity_Def.schema
            TClist = [ZSI.TC.String(pname="from", aname="_from", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="to", aname="_to", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._from = None
                    self._to = None
                    self._message = None
                    return
            Holder.__name__ = "giftMessageEntity_Holder"
            self.pyclass = Holder

    class giftMessageResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "giftMessageResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.giftMessageResponse_Def.schema
            TClist = [ZSI.TC.String(pname="entityId", aname="_entityId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="result", aname="_result", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="error", aname="_error", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._entityId = None
                    self._result = None
                    self._error = None
                    return
            Holder.__name__ = "giftMessageResponse_Holder"
            self.pyclass = Holder

    class giftMessageResponseArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "giftMessageResponseArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.giftMessageResponseArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.giftMessageResponseArray_Def.__bases__:
                bases = list(ns0.giftMessageResponseArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.giftMessageResponseArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class giftMessageAssociativeProductsEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "giftMessageAssociativeProductsEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.giftMessageAssociativeProductsEntity_Def.schema
            TClist = [GTD("urn:Magento","shoppingCartProductEntity",lazy=False)(pname="product", aname="_product", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","giftMessageEntity",lazy=False)(pname="message", aname="_message", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._product = None
                    self._message = None
                    return
            Holder.__name__ = "giftMessageAssociativeProductsEntity_Holder"
            self.pyclass = Holder

    class giftMessageAssociativeProductsEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "giftMessageAssociativeProductsEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.giftMessageAssociativeProductsEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.giftMessageAssociativeProductsEntityArray_Def.__bases__:
                bases = list(ns0.giftMessageAssociativeProductsEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.giftMessageAssociativeProductsEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class catalogProductDownloadableLinkFileEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductDownloadableLinkFileEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductDownloadableLinkFileEntity_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="base64_content", aname="_base64_content", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._base64_content = None
                    return
            Holder.__name__ = "catalogProductDownloadableLinkFileEntity_Holder"
            self.pyclass = Holder

    class catalogProductDownloadableLinkAddSampleEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductDownloadableLinkAddSampleEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductDownloadableLinkAddSampleEntity_Def.schema
            TClist = [ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","catalogProductDownloadableLinkFileEntity",lazy=False)(pname="file", aname="_file", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="url", aname="_url", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._type = None
                    self._file = None
                    self._url = None
                    return
            Holder.__name__ = "catalogProductDownloadableLinkAddSampleEntity_Holder"
            self.pyclass = Holder

    class catalogProductDownloadableLinkAddEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductDownloadableLinkAddEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductDownloadableLinkAddEntity_Def.schema
            TClist = [ZSI.TC.String(pname="title", aname="_title", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="price", aname="_price", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_unlimited", aname="_is_unlimited", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="number_of_downloads", aname="_number_of_downloads", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_shareable", aname="_is_shareable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","catalogProductDownloadableLinkAddSampleEntity",lazy=False)(pname="sample", aname="_sample", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","catalogProductDownloadableLinkFileEntity",lazy=False)(pname="file", aname="_file", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="link_url", aname="_link_url", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sample_url", aname="_sample_url", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="sort_order", aname="_sort_order", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._title = None
                    self._price = None
                    self._is_unlimited = None
                    self._number_of_downloads = None
                    self._is_shareable = None
                    self._sample = None
                    self._type = None
                    self._file = None
                    self._link_url = None
                    self._sample_url = None
                    self._sort_order = None
                    return
            Holder.__name__ = "catalogProductDownloadableLinkAddEntity_Holder"
            self.pyclass = Holder

    class catalogProductDownloadableLinkFileInfoEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductDownloadableLinkFileInfoEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductDownloadableLinkFileInfoEntity_Def.schema
            TClist = [ZSI.TC.String(pname="file", aname="_file", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="size", aname="_size", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="status", aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._file = None
                    self._name = None
                    self._size = None
                    self._status = None
                    return
            Holder.__name__ = "catalogProductDownloadableLinkFileInfoEntity_Holder"
            self.pyclass = Holder

    class catalogProductDownloadableLinkFileInfoEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "catalogProductDownloadableLinkFileInfoEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.catalogProductDownloadableLinkFileInfoEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.catalogProductDownloadableLinkFileInfoEntityArray_Def.__bases__:
                bases = list(ns0.catalogProductDownloadableLinkFileInfoEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.catalogProductDownloadableLinkFileInfoEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class catalogProductDownloadableLinkEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductDownloadableLinkEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductDownloadableLinkEntity_Def.schema
            TClist = [ZSI.TC.String(pname="link_id", aname="_link_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="title", aname="_title", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="price", aname="_price", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="number_of_downloads", aname="_number_of_downloads", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_unlimited", aname="_is_unlimited", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="is_shareable", aname="_is_shareable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="link_url", aname="_link_url", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="link_type", aname="_link_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sample_file", aname="_sample_file", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sample_url", aname="_sample_url", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sample_type", aname="_sample_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="sort_order", aname="_sort_order", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","catalogProductDownloadableLinkFileInfoEntityArray",lazy=False)(pname="file_save", aname="_file_save", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","catalogProductDownloadableLinkFileInfoEntityArray",lazy=False)(pname="sample_file_save", aname="_sample_file_save", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._link_id = None
                    self._title = None
                    self._price = None
                    self._number_of_downloads = None
                    self._is_unlimited = None
                    self._is_shareable = None
                    self._link_url = None
                    self._link_type = None
                    self._sample_file = None
                    self._sample_url = None
                    self._sample_type = None
                    self._sort_order = None
                    self._file_save = None
                    self._sample_file_save = None
                    return
            Holder.__name__ = "catalogProductDownloadableLinkEntity_Holder"
            self.pyclass = Holder

    class catalogProductDownloadableLinkEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "catalogProductDownloadableLinkEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.catalogProductDownloadableLinkEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.catalogProductDownloadableLinkEntityArray_Def.__bases__:
                bases = list(ns0.catalogProductDownloadableLinkEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.catalogProductDownloadableLinkEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class catalogProductDownloadableLinkSampleEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductDownloadableLinkSampleEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductDownloadableLinkSampleEntity_Def.schema
            TClist = [ZSI.TC.String(pname="sample_id", aname="_sample_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="product_id", aname="_product_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sample_file", aname="_sample_file", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sample_url", aname="_sample_url", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sample_type", aname="_sample_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sort_order", aname="_sort_order", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="default_title", aname="_default_title", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="store_title", aname="_store_title", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="title", aname="_title", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sample_id = None
                    self._product_id = None
                    self._sample_file = None
                    self._sample_url = None
                    self._sample_type = None
                    self._sort_order = None
                    self._default_title = None
                    self._store_title = None
                    self._title = None
                    return
            Holder.__name__ = "catalogProductDownloadableLinkSampleEntity_Holder"
            self.pyclass = Holder

    class catalogProductDownloadableLinkSampleEntityArray_Def(TypeDefinition):
        #complexType/complexContent restriction
        schema = "urn:Magento"
        type = (schema, "catalogProductDownloadableLinkSampleEntityArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.catalogProductDownloadableLinkSampleEntityArray_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
            if ns1.Array_Def not in ns0.catalogProductDownloadableLinkSampleEntityArray_Def.__bases__:
                bases = list(ns0.catalogProductDownloadableLinkSampleEntityArray_Def.__bases__)
                bases.insert(0, ns1.Array_Def)
                ns0.catalogProductDownloadableLinkSampleEntityArray_Def.__bases__ = tuple(bases)

            ns1.Array_Def.__init__(self, pname, ofwhat=TClist, restrict=True, **kw)

    class catalogProductDownloadableLinkInfoEntity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:Magento"
        type = (schema, "catalogProductDownloadableLinkInfoEntity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.catalogProductDownloadableLinkInfoEntity_Def.schema
            TClist = [GTD("urn:Magento","catalogProductDownloadableLinkEntityArray",lazy=False)(pname="links", aname="_links", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:Magento","catalogProductDownloadableLinkSampleEntityArray",lazy=False)(pname="samples", aname="_samples", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._links = None
                    self._samples = None
                    return
            Holder.__name__ = "catalogProductDownloadableLinkInfoEntity_Holder"
            self.pyclass = Holder

# end class ns0 (tns: urn:Magento)
